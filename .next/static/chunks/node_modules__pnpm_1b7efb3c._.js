(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules__pnpm_1b7efb3c._.js", {

"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/side-effect.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return SideEffect;
    }
});
const _react = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
const isServer = typeof window === 'undefined';
const useClientOnlyLayoutEffect = isServer ? ()=>{} : _react.useLayoutEffect;
const useClientOnlyEffect = isServer ? ()=>{} : _react.useEffect;
function SideEffect(props) {
    const { headManager, reduceComponentsToState } = props;
    function emitChange() {
        if (headManager && headManager.mountedInstances) {
            const headElements = _react.Children.toArray(Array.from(headManager.mountedInstances).filter(Boolean));
            headManager.updateHead(reduceComponentsToState(headElements, props));
        }
    }
    if (isServer) {
        var _headManager_mountedInstances;
        headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);
        emitChange();
    }
    useClientOnlyLayoutEffect({
        "SideEffect.useClientOnlyLayoutEffect": ()=>{
            var _headManager_mountedInstances;
            headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);
            return ({
                "SideEffect.useClientOnlyLayoutEffect": ()=>{
                    var _headManager_mountedInstances;
                    headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.delete(props.children);
                }
            })["SideEffect.useClientOnlyLayoutEffect"];
        }
    }["SideEffect.useClientOnlyLayoutEffect"]);
    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all
    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s
    // being rendered, we only trigger the method from the last one.
    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`
    // singleton in the layout effect pass, and actually trigger it in the effect pass.
    useClientOnlyLayoutEffect({
        "SideEffect.useClientOnlyLayoutEffect": ()=>{
            if (headManager) {
                headManager._pendingUpdate = emitChange;
            }
            return ({
                "SideEffect.useClientOnlyLayoutEffect": ()=>{
                    if (headManager) {
                        headManager._pendingUpdate = emitChange;
                    }
                }
            })["SideEffect.useClientOnlyLayoutEffect"];
        }
    }["SideEffect.useClientOnlyLayoutEffect"]);
    useClientOnlyEffect({
        "SideEffect.useClientOnlyEffect": ()=>{
            if (headManager && headManager._pendingUpdate) {
                headManager._pendingUpdate();
                headManager._pendingUpdate = null;
            }
            return ({
                "SideEffect.useClientOnlyEffect": ()=>{
                    if (headManager && headManager._pendingUpdate) {
                        headManager._pendingUpdate();
                        headManager._pendingUpdate = null;
                    }
                }
            })["SideEffect.useClientOnlyEffect"];
        }
    }["SideEffect.useClientOnlyEffect"]);
    return null;
} //# sourceMappingURL=side-effect.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/amp-context.shared-runtime.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "AmpStateContext", {
    enumerable: true,
    get: function() {
        return AmpStateContext;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const AmpStateContext = _react.default.createContext({});
if ("TURBOPACK compile-time truthy", 1) {
    AmpStateContext.displayName = 'AmpStateContext';
} //# sourceMappingURL=amp-context.shared-runtime.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/amp-mode.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "isInAmpMode", {
    enumerable: true,
    get: function() {
        return isInAmpMode;
    }
});
function isInAmpMode(param) {
    let { ampFirst = false, hybrid = false, hasQuery = false } = param === void 0 ? {} : param;
    return ampFirst || hybrid && hasQuery;
} //# sourceMappingURL=amp-mode.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/head.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    defaultHead: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    defaultHead: function() {
        return defaultHead;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _interop_require_wildcard = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)");
const _jsxruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const _sideeffect = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/side-effect.js [app-client] (ecmascript)"));
const _ampcontextsharedruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/amp-context.shared-runtime.js [app-client] (ecmascript)");
const _headmanagercontextsharedruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.js [app-client] (ecmascript)");
const _ampmode = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/amp-mode.js [app-client] (ecmascript)");
const _warnonce = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)");
function defaultHead(inAmpMode) {
    if (inAmpMode === void 0) inAmpMode = false;
    const head = [
        /*#__PURE__*/ (0, _jsxruntime.jsx)("meta", {
            charSet: "utf-8"
        }, "charset")
    ];
    if (!inAmpMode) {
        head.push(/*#__PURE__*/ (0, _jsxruntime.jsx)("meta", {
            name: "viewport",
            content: "width=device-width"
        }, "viewport"));
    }
    return head;
}
function onlyReactElement(list, child) {
    // React children can be "string" or "number" in this case we ignore them for backwards compat
    if (typeof child === 'string' || typeof child === 'number') {
        return list;
    }
    // Adds support for React.Fragment
    if (child.type === _react.default.Fragment) {
        return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild)=>{
            if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {
                return fragmentList;
            }
            return fragmentList.concat(fragmentChild);
        }, []));
    }
    return list.concat(child);
}
const METATYPES = [
    'name',
    'httpEquiv',
    'charSet',
    'itemProp'
];
/*
 returns a function for filtering head child elements
 which shouldn't be duplicated, like <title/>
 Also adds support for deduplicated `key` properties
*/ function unique() {
    const keys = new Set();
    const tags = new Set();
    const metaTypes = new Set();
    const metaCategories = {};
    return (h)=>{
        let isUnique = true;
        let hasKey = false;
        if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {
            hasKey = true;
            const key = h.key.slice(h.key.indexOf('$') + 1);
            if (keys.has(key)) {
                isUnique = false;
            } else {
                keys.add(key);
            }
        }
        // eslint-disable-next-line default-case
        switch(h.type){
            case 'title':
            case 'base':
                if (tags.has(h.type)) {
                    isUnique = false;
                } else {
                    tags.add(h.type);
                }
                break;
            case 'meta':
                for(let i = 0, len = METATYPES.length; i < len; i++){
                    const metatype = METATYPES[i];
                    if (!h.props.hasOwnProperty(metatype)) continue;
                    if (metatype === 'charSet') {
                        if (metaTypes.has(metatype)) {
                            isUnique = false;
                        } else {
                            metaTypes.add(metatype);
                        }
                    } else {
                        const category = h.props[metatype];
                        const categories = metaCategories[metatype] || new Set();
                        if ((metatype !== 'name' || !hasKey) && categories.has(category)) {
                            isUnique = false;
                        } else {
                            categories.add(category);
                            metaCategories[metatype] = categories;
                        }
                    }
                }
                break;
        }
        return isUnique;
    };
}
/**
 *
 * @param headChildrenElements List of children of <Head>
 */ function reduceComponents(headChildrenElements, props) {
    const { inAmpMode } = props;
    return headChildrenElements.reduce(onlyReactElement, []).reverse().concat(defaultHead(inAmpMode).reverse()).filter(unique()).reverse().map((c, i)=>{
        const key = c.key || i;
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        }
        if ("TURBOPACK compile-time truthy", 1) {
            // omit JSON-LD structured data snippets from the warning
            if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {
                const srcMessage = c.props['src'] ? '<script> tag with src="' + c.props['src'] + '"' : "inline <script>";
                (0, _warnonce.warnOnce)("Do not add <script> tags using next/head (see " + srcMessage + "). Use next/script instead. \nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component");
            } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {
                (0, _warnonce.warnOnce)('Do not add stylesheets using next/head (see <link rel="stylesheet"> tag with href="' + c.props['href'] + '"). Use Document instead. \nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component');
            }
        }
        return /*#__PURE__*/ _react.default.cloneElement(c, {
            key
        });
    });
}
/**
 * This component injects elements to `<head>` of your page.
 * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
 */ function Head(param) {
    let { children } = param;
    const ampState = (0, _react.useContext)(_ampcontextsharedruntime.AmpStateContext);
    const headManager = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_sideeffect.default, {
        reduceComponentsToState: reduceComponents,
        headManager: headManager,
        inAmpMode: (0, _ampmode.isInAmpMode)(ampState),
        children: children
    });
}
const _default = Head;
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=head.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-blur-svg.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * A shared function, used on both client and server, to generate a SVG blur placeholder.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getImageBlurSvg", {
    enumerable: true,
    get: function() {
        return getImageBlurSvg;
    }
});
function getImageBlurSvg(param) {
    let { widthInt, heightInt, blurWidth, blurHeight, blurDataURL, objectFit } = param;
    const std = 20;
    const svgWidth = blurWidth ? blurWidth * 40 : widthInt;
    const svgHeight = blurHeight ? blurHeight * 40 : heightInt;
    const viewBox = svgWidth && svgHeight ? "viewBox='0 0 " + svgWidth + " " + svgHeight + "'" : '';
    const preserveAspectRatio = viewBox ? 'none' : objectFit === 'contain' ? 'xMidYMid' : objectFit === 'cover' ? 'xMidYMid slice' : 'none';
    return "%3Csvg xmlns='http://www.w3.org/2000/svg' " + viewBox + "%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='" + std + "'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='" + preserveAspectRatio + "' style='filter: url(%23b);' href='" + blurDataURL + "'/%3E%3C/svg%3E";
} //# sourceMappingURL=image-blur-svg.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    VALID_LOADERS: null,
    imageConfigDefault: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    VALID_LOADERS: function() {
        return VALID_LOADERS;
    },
    imageConfigDefault: function() {
        return imageConfigDefault;
    }
});
const VALID_LOADERS = [
    'default',
    'imgix',
    'cloudinary',
    'akamai',
    'custom'
];
const imageConfigDefault = {
    deviceSizes: [
        640,
        750,
        828,
        1080,
        1200,
        1920,
        2048,
        3840
    ],
    imageSizes: [
        16,
        32,
        48,
        64,
        96,
        128,
        256,
        384
    ],
    path: '/_next/image',
    loader: 'default',
    loaderFile: '',
    domains: [],
    disableStaticImages: false,
    minimumCacheTTL: 60,
    formats: [
        'image/webp'
    ],
    dangerouslyAllowSVG: false,
    contentSecurityPolicy: "script-src 'none'; frame-src 'none'; sandbox;",
    contentDispositionType: 'attachment',
    localPatterns: undefined,
    remotePatterns: [],
    qualities: undefined,
    unoptimized: false
}; //# sourceMappingURL=image-config.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/get-img-props.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getImgProps", {
    enumerable: true,
    get: function() {
        return getImgProps;
    }
});
const _warnonce = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)");
const _imageblursvg = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-blur-svg.js [app-client] (ecmascript)");
const _imageconfig = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)");
const VALID_LOADING_VALUES = [
    'lazy',
    'eager',
    undefined
];
function isStaticRequire(src) {
    return src.default !== undefined;
}
function isStaticImageData(src) {
    return src.src !== undefined;
}
function isStaticImport(src) {
    return !!src && typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));
}
const allImgs = new Map();
let perfObserver;
function getInt(x) {
    if (typeof x === 'undefined') {
        return x;
    }
    if (typeof x === 'number') {
        return Number.isFinite(x) ? x : NaN;
    }
    if (typeof x === 'string' && /^[0-9]+$/.test(x)) {
        return parseInt(x, 10);
    }
    return NaN;
}
function getWidths(param, width, sizes) {
    let { deviceSizes, allSizes } = param;
    if (sizes) {
        // Find all the "vw" percent sizes used in the sizes prop
        const viewportWidthRe = /(^|\s)(1?\d?\d)vw/g;
        const percentSizes = [];
        for(let match; match = viewportWidthRe.exec(sizes); match){
            percentSizes.push(parseInt(match[2]));
        }
        if (percentSizes.length) {
            const smallestRatio = Math.min(...percentSizes) * 0.01;
            return {
                widths: allSizes.filter((s)=>s >= deviceSizes[0] * smallestRatio),
                kind: 'w'
            };
        }
        return {
            widths: allSizes,
            kind: 'w'
        };
    }
    if (typeof width !== 'number') {
        return {
            widths: deviceSizes,
            kind: 'w'
        };
    }
    const widths = [
        ...new Set(// > are actually 3x in the green color, but only 1.5x in the red and
        // > blue colors. Showing a 3x resolution image in the app vs a 2x
        // > resolution image will be visually the same, though the 3x image
        // > takes significantly more data. Even true 3x resolution screens are
        // > wasteful as the human eye cannot see that level of detail without
        // > something like a magnifying glass.
        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
        [
            width,
            width * 2 /*, width * 3*/ 
        ].map((w)=>allSizes.find((p)=>p >= w) || allSizes[allSizes.length - 1]))
    ];
    return {
        widths,
        kind: 'x'
    };
}
function generateImgAttrs(param) {
    let { config, src, unoptimized, width, quality, sizes, loader } = param;
    if (unoptimized) {
        return {
            src,
            srcSet: undefined,
            sizes: undefined
        };
    }
    const { widths, kind } = getWidths(config, width, sizes);
    const last = widths.length - 1;
    return {
        sizes: !sizes && kind === 'w' ? '100vw' : sizes,
        srcSet: widths.map((w, i)=>loader({
                config,
                src,
                quality,
                width: w
            }) + " " + (kind === 'w' ? w : i + 1) + kind).join(', '),
        // It's intended to keep `src` the last attribute because React updates
        // attributes in order. If we keep `src` the first one, Safari will
        // immediately start to fetch `src`, before `sizes` and `srcSet` are even
        // updated by React. That causes multiple unnecessary requests if `srcSet`
        // and `sizes` are defined.
        // This bug cannot be reproduced in Chrome or Firefox.
        src: loader({
            config,
            src,
            quality,
            width: widths[last]
        })
    };
}
function getImgProps(param, _state) {
    let { src, sizes, unoptimized = false, priority = false, loading, className, quality, width, height, fill = false, style, overrideSrc, onLoad, onLoadingComplete, placeholder = 'empty', blurDataURL, fetchPriority, decoding = 'async', layout, objectFit, objectPosition, lazyBoundary, lazyRoot, ...rest } = param;
    const { imgConf, showAltText, blurComplete, defaultLoader } = _state;
    let config;
    let c = imgConf || _imageconfig.imageConfigDefault;
    if ('allSizes' in c) {
        config = c;
    } else {
        var _c_qualities;
        const allSizes = [
            ...c.deviceSizes,
            ...c.imageSizes
        ].sort((a, b)=>a - b);
        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);
        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);
        config = {
            ...c,
            allSizes,
            deviceSizes,
            qualities
        };
    }
    if (typeof defaultLoader === 'undefined') {
        throw Object.defineProperty(new Error('images.loaderFile detected but the file is missing default export.\nRead more: https://nextjs.org/docs/messages/invalid-images-config'), "__NEXT_ERROR_CODE", {
            value: "E163",
            enumerable: false,
            configurable: true
        });
    }
    let loader = rest.loader || defaultLoader;
    // Remove property so it's not spread on <img> element
    delete rest.loader;
    delete rest.srcSet;
    // This special value indicates that the user
    // didn't define a "loader" prop or "loader" config.
    const isDefaultLoader = '__next_img_default' in loader;
    if (isDefaultLoader) {
        if (config.loader === 'custom') {
            throw Object.defineProperty(new Error('Image with src "' + src + '" is missing "loader" prop.' + "\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader"), "__NEXT_ERROR_CODE", {
                value: "E252",
                enumerable: false,
                configurable: true
            });
        }
    } else {
        // The user defined a "loader" prop or config.
        // Since the config object is internal only, we
        // must not pass it to the user-defined "loader".
        const customImageLoader = loader;
        loader = (obj)=>{
            const { config: _, ...opts } = obj;
            return customImageLoader(opts);
        };
    }
    if (layout) {
        if (layout === 'fill') {
            fill = true;
        }
        const layoutToStyle = {
            intrinsic: {
                maxWidth: '100%',
                height: 'auto'
            },
            responsive: {
                width: '100%',
                height: 'auto'
            }
        };
        const layoutToSizes = {
            responsive: '100vw',
            fill: '100vw'
        };
        const layoutStyle = layoutToStyle[layout];
        if (layoutStyle) {
            style = {
                ...style,
                ...layoutStyle
            };
        }
        const layoutSizes = layoutToSizes[layout];
        if (layoutSizes && !sizes) {
            sizes = layoutSizes;
        }
    }
    let staticSrc = '';
    let widthInt = getInt(width);
    let heightInt = getInt(height);
    let blurWidth;
    let blurHeight;
    if (isStaticImport(src)) {
        const staticImageData = isStaticRequire(src) ? src.default : src;
        if (!staticImageData.src) {
            throw Object.defineProperty(new Error("An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received " + JSON.stringify(staticImageData)), "__NEXT_ERROR_CODE", {
                value: "E460",
                enumerable: false,
                configurable: true
            });
        }
        if (!staticImageData.height || !staticImageData.width) {
            throw Object.defineProperty(new Error("An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received " + JSON.stringify(staticImageData)), "__NEXT_ERROR_CODE", {
                value: "E48",
                enumerable: false,
                configurable: true
            });
        }
        blurWidth = staticImageData.blurWidth;
        blurHeight = staticImageData.blurHeight;
        blurDataURL = blurDataURL || staticImageData.blurDataURL;
        staticSrc = staticImageData.src;
        if (!fill) {
            if (!widthInt && !heightInt) {
                widthInt = staticImageData.width;
                heightInt = staticImageData.height;
            } else if (widthInt && !heightInt) {
                const ratio = widthInt / staticImageData.width;
                heightInt = Math.round(staticImageData.height * ratio);
            } else if (!widthInt && heightInt) {
                const ratio = heightInt / staticImageData.height;
                widthInt = Math.round(staticImageData.width * ratio);
            }
        }
    }
    src = typeof src === 'string' ? src : staticSrc;
    let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');
    if (!src || src.startsWith('data:') || src.startsWith('blob:')) {
        // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
        unoptimized = true;
        isLazy = false;
    }
    if (config.unoptimized) {
        unoptimized = true;
    }
    if (isDefaultLoader && !config.dangerouslyAllowSVG && src.split('?', 1)[0].endsWith('.svg')) {
        // Special case to make svg serve as-is to avoid proxying
        // through the built-in Image Optimization API.
        unoptimized = true;
    }
    const qualityInt = getInt(quality);
    if ("TURBOPACK compile-time truthy", 1) {
        if (config.output === 'export' && isDefaultLoader && !unoptimized) {
            throw Object.defineProperty(new Error("Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\n  Possible solutions:\n    - Remove `{ output: 'export' }` and run \"next start\" to run server mode including the Image Optimization API.\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\n  Read more: https://nextjs.org/docs/messages/export-image-api"), "__NEXT_ERROR_CODE", {
                value: "E500",
                enumerable: false,
                configurable: true
            });
        }
        if (!src) {
            // React doesn't show the stack trace and there's
            // no `src` to help identify which image, so we
            // instead console.error(ref) during mount.
            unoptimized = true;
        } else {
            if (fill) {
                if (width) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "width" and "fill" properties. Only one should be used.'), "__NEXT_ERROR_CODE", {
                        value: "E96",
                        enumerable: false,
                        configurable: true
                    });
                }
                if (height) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "height" and "fill" properties. Only one should be used.'), "__NEXT_ERROR_CODE", {
                        value: "E115",
                        enumerable: false,
                        configurable: true
                    });
                }
                if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "fill" and "style.position" properties. Images with "fill" always use position absolute - it cannot be modified.'), "__NEXT_ERROR_CODE", {
                        value: "E216",
                        enumerable: false,
                        configurable: true
                    });
                }
                if ((style == null ? void 0 : style.width) && style.width !== '100%') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "fill" and "style.width" properties. Images with "fill" always use width 100% - it cannot be modified.'), "__NEXT_ERROR_CODE", {
                        value: "E73",
                        enumerable: false,
                        configurable: true
                    });
                }
                if ((style == null ? void 0 : style.height) && style.height !== '100%') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has both "fill" and "style.height" properties. Images with "fill" always use height 100% - it cannot be modified.'), "__NEXT_ERROR_CODE", {
                        value: "E404",
                        enumerable: false,
                        configurable: true
                    });
                }
            } else {
                if (typeof widthInt === 'undefined') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" is missing required "width" property.'), "__NEXT_ERROR_CODE", {
                        value: "E451",
                        enumerable: false,
                        configurable: true
                    });
                } else if (isNaN(widthInt)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "width" property. Expected a numeric value in pixels but received "' + width + '".'), "__NEXT_ERROR_CODE", {
                        value: "E66",
                        enumerable: false,
                        configurable: true
                    });
                }
                if (typeof heightInt === 'undefined') {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" is missing required "height" property.'), "__NEXT_ERROR_CODE", {
                        value: "E397",
                        enumerable: false,
                        configurable: true
                    });
                } else if (isNaN(heightInt)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "height" property. Expected a numeric value in pixels but received "' + height + '".'), "__NEXT_ERROR_CODE", {
                        value: "E444",
                        enumerable: false,
                        configurable: true
                    });
                }
                // eslint-disable-next-line no-control-regex
                if (/^[\x00-\x20]/.test(src)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.'), "__NEXT_ERROR_CODE", {
                        value: "E176",
                        enumerable: false,
                        configurable: true
                    });
                }
                // eslint-disable-next-line no-control-regex
                if (/[\x00-\x20]$/.test(src)) {
                    throw Object.defineProperty(new Error('Image with src "' + src + '" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.'), "__NEXT_ERROR_CODE", {
                        value: "E21",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
        if (!VALID_LOADING_VALUES.includes(loading)) {
            throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "loading" property. Provided "' + loading + '" should be one of ' + VALID_LOADING_VALUES.map(String).join(',') + "."), "__NEXT_ERROR_CODE", {
                value: "E357",
                enumerable: false,
                configurable: true
            });
        }
        if (priority && loading === 'lazy') {
            throw Object.defineProperty(new Error('Image with src "' + src + '" has both "priority" and "loading=\'lazy\'" properties. Only one should be used.'), "__NEXT_ERROR_CODE", {
                value: "E218",
                enumerable: false,
                configurable: true
            });
        }
        if (placeholder !== 'empty' && placeholder !== 'blur' && !placeholder.startsWith('data:image/')) {
            throw Object.defineProperty(new Error('Image with src "' + src + '" has invalid "placeholder" property "' + placeholder + '".'), "__NEXT_ERROR_CODE", {
                value: "E431",
                enumerable: false,
                configurable: true
            });
        }
        if (placeholder !== 'empty') {
            if (widthInt && heightInt && widthInt * heightInt < 1600) {
                (0, _warnonce.warnOnce)('Image with src "' + src + '" is smaller than 40x40. Consider removing the "placeholder" property to improve performance.');
            }
        }
        if (placeholder === 'blur' && !blurDataURL) {
            const VALID_BLUR_EXT = [
                'jpeg',
                'png',
                'webp',
                'avif'
            ] // should match next-image-loader
            ;
            throw Object.defineProperty(new Error('Image with src "' + src + '" has "placeholder=\'blur\'" property but is missing the "blurDataURL" property.\n        Possible solutions:\n          - Add a "blurDataURL" property, the contents should be a small Data URL to represent the image\n          - Change the "src" property to a static import with one of the supported file types: ' + VALID_BLUR_EXT.join(',') + ' (animated images not supported)\n          - Remove the "placeholder" property, effectively no blur effect\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url'), "__NEXT_ERROR_CODE", {
                value: "E371",
                enumerable: false,
                configurable: true
            });
        }
        if ('ref' in rest) {
            (0, _warnonce.warnOnce)('Image with src "' + src + '" is using unsupported "ref" property. Consider using the "onLoad" property instead.');
        }
        if (!unoptimized && !isDefaultLoader) {
            const urlStr = loader({
                config,
                src,
                width: widthInt || 400,
                quality: qualityInt || 75
            });
            let url;
            try {
                url = new URL(urlStr);
            } catch (err) {}
            if (urlStr === src || url && url.pathname === src && !url.search) {
                (0, _warnonce.warnOnce)('Image with src "' + src + '" has a "loader" property that does not implement width. Please implement it or use the "unoptimized" property instead.' + "\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width");
            }
        }
        if (onLoadingComplete) {
            (0, _warnonce.warnOnce)('Image with src "' + src + '" is using deprecated "onLoadingComplete" property. Please use the "onLoad" property instead.');
        }
        for (const [legacyKey, legacyValue] of Object.entries({
            layout,
            objectFit,
            objectPosition,
            lazyBoundary,
            lazyRoot
        })){
            if (legacyValue) {
                (0, _warnonce.warnOnce)('Image with src "' + src + '" has legacy prop "' + legacyKey + '". Did you forget to run the codemod?' + "\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13");
            }
        }
        if (typeof window !== 'undefined' && !perfObserver && window.PerformanceObserver) {
            perfObserver = new PerformanceObserver((entryList)=>{
                for (const entry of entryList.getEntries()){
                    var _entry_element;
                    // @ts-ignore - missing "LargestContentfulPaint" class with "element" prop
                    const imgSrc = (entry == null ? void 0 : (_entry_element = entry.element) == null ? void 0 : _entry_element.src) || '';
                    const lcpImage = allImgs.get(imgSrc);
                    if (lcpImage && !lcpImage.priority && lcpImage.placeholder === 'empty' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {
                        // https://web.dev/lcp/#measure-lcp-in-javascript
                        (0, _warnonce.warnOnce)('Image with src "' + lcpImage.src + '" was detected as the Largest Contentful Paint (LCP). Please add the "priority" property if this image is above the fold.' + "\nRead more: https://nextjs.org/docs/api-reference/next/image#priority");
                    }
                }
            });
            try {
                perfObserver.observe({
                    type: 'largest-contentful-paint',
                    buffered: true
                });
            } catch (err) {
                // Log error but don't crash the app
                console.error(err);
            }
        }
    }
    const imgStyle = Object.assign(fill ? {
        position: 'absolute',
        height: '100%',
        width: '100%',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        objectFit,
        objectPosition
    } : {}, showAltText ? {} : {
        color: 'transparent'
    }, style);
    const backgroundImage = !blurComplete && placeholder !== 'empty' ? placeholder === 'blur' ? 'url("data:image/svg+xml;charset=utf-8,' + (0, _imageblursvg.getImageBlurSvg)({
        widthInt,
        heightInt,
        blurWidth,
        blurHeight,
        blurDataURL: blurDataURL || '',
        objectFit: imgStyle.objectFit
    }) + '")' : 'url("' + placeholder + '")' // assume `data:image/`
     : null;
    let placeholderStyle = backgroundImage ? {
        backgroundSize: imgStyle.objectFit || 'cover',
        backgroundPosition: imgStyle.objectPosition || '50% 50%',
        backgroundRepeat: 'no-repeat',
        backgroundImage
    } : {};
    if ("TURBOPACK compile-time truthy", 1) {
        if (placeholderStyle.backgroundImage && placeholder === 'blur' && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {
            // During `next dev`, we don't want to generate blur placeholders with webpack
            // because it can delay starting the dev server. Instead, `next-image-loader.js`
            // will inline a special url to lazily generate the blur placeholder at request time.
            placeholderStyle.backgroundImage = 'url("' + blurDataURL + '")';
        }
    }
    const imgAttributes = generateImgAttrs({
        config,
        src,
        unoptimized,
        width: widthInt,
        quality: qualityInt,
        sizes,
        loader
    });
    if ("TURBOPACK compile-time truthy", 1) {
        if (typeof window !== 'undefined') {
            let fullUrl;
            try {
                fullUrl = new URL(imgAttributes.src);
            } catch (e) {
                fullUrl = new URL(imgAttributes.src, window.location.href);
            }
            allImgs.set(fullUrl.href, {
                src,
                priority,
                placeholder
            });
        }
    }
    const props = {
        ...rest,
        loading: isLazy ? 'lazy' : loading,
        fetchPriority,
        width: widthInt,
        height: heightInt,
        decoding,
        className,
        style: {
            ...imgStyle,
            ...placeholderStyle
        },
        sizes: imgAttributes.sizes,
        srcSet: imgAttributes.srcSet,
        src: overrideSrc || imgAttributes.src
    };
    const meta = {
        unoptimized,
        priority,
        placeholder,
        fill
    };
    return {
        props,
        meta
    };
} //# sourceMappingURL=get-img-props.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ImageConfigContext", {
    enumerable: true,
    get: function() {
        return ImageConfigContext;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const _imageconfig = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)");
const ImageConfigContext = _react.default.createContext(_imageconfig.imageConfigDefault);
if ("TURBOPACK compile-time truthy", 1) {
    ImageConfigContext.displayName = 'ImageConfigContext';
} //# sourceMappingURL=image-config-context.shared-runtime.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/router-context.shared-runtime.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "RouterContext", {
    enumerable: true,
    get: function() {
        return RouterContext;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const RouterContext = _react.default.createContext(null);
if ("TURBOPACK compile-time truthy", 1) {
    RouterContext.displayName = 'RouterContext';
} //# sourceMappingURL=router-context.shared-runtime.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/picomatch/index.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
(()=>{
    "use strict";
    var t = {
        170: (t, e, u)=>{
            const n = u(510);
            const isWindows = ()=>{
                if (typeof navigator !== "undefined" && navigator.platform) {
                    const t = navigator.platform.toLowerCase();
                    return t === "win32" || t === "windows";
                }
                if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] !== "undefined" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].platform) {
                    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].platform === "win32";
                }
                return false;
            };
            function picomatch(t, e, u = false) {
                if (e && (e.windows === null || e.windows === undefined)) {
                    e = {
                        ...e,
                        windows: isWindows()
                    };
                }
                return n(t, e, u);
            }
            Object.assign(picomatch, n);
            t.exports = picomatch;
        },
        154: (t)=>{
            const e = "\\\\/";
            const u = `[^${e}]`;
            const n = "\\.";
            const o = "\\+";
            const s = "\\?";
            const r = "\\/";
            const a = "(?=.)";
            const i = "[^/]";
            const c = `(?:${r}|$)`;
            const p = `(?:^|${r})`;
            const l = `${n}{1,2}${c}`;
            const f = `(?!${n})`;
            const A = `(?!${p}${l})`;
            const _ = `(?!${n}{0,1}${c})`;
            const R = `(?!${l})`;
            const E = `[^.${r}]`;
            const h = `${i}*?`;
            const g = "/";
            const b = {
                DOT_LITERAL: n,
                PLUS_LITERAL: o,
                QMARK_LITERAL: s,
                SLASH_LITERAL: r,
                ONE_CHAR: a,
                QMARK: i,
                END_ANCHOR: c,
                DOTS_SLASH: l,
                NO_DOT: f,
                NO_DOTS: A,
                NO_DOT_SLASH: _,
                NO_DOTS_SLASH: R,
                QMARK_NO_DOT: E,
                STAR: h,
                START_ANCHOR: p,
                SEP: g
            };
            const C = {
                ...b,
                SLASH_LITERAL: `[${e}]`,
                QMARK: u,
                STAR: `${u}*?`,
                DOTS_SLASH: `${n}{1,2}(?:[${e}]|$)`,
                NO_DOT: `(?!${n})`,
                NO_DOTS: `(?!(?:^|[${e}])${n}{1,2}(?:[${e}]|$))`,
                NO_DOT_SLASH: `(?!${n}{0,1}(?:[${e}]|$))`,
                NO_DOTS_SLASH: `(?!${n}{1,2}(?:[${e}]|$))`,
                QMARK_NO_DOT: `[^.${e}]`,
                START_ANCHOR: `(?:^|[${e}])`,
                END_ANCHOR: `(?:[${e}]|$)`,
                SEP: "\\"
            };
            const y = {
                alnum: "a-zA-Z0-9",
                alpha: "a-zA-Z",
                ascii: "\\x00-\\x7F",
                blank: " \\t",
                cntrl: "\\x00-\\x1F\\x7F",
                digit: "0-9",
                graph: "\\x21-\\x7E",
                lower: "a-z",
                print: "\\x20-\\x7E ",
                punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
                space: " \\t\\r\\n\\v\\f",
                upper: "A-Z",
                word: "A-Za-z0-9_",
                xdigit: "A-Fa-f0-9"
            };
            t.exports = {
                MAX_LENGTH: 1024 * 64,
                POSIX_REGEX_SOURCE: y,
                REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
                REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
                REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
                REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
                REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
                REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
                REPLACEMENTS: {
                    "***": "*",
                    "**/**": "**",
                    "**/**/**": "**"
                },
                CHAR_0: 48,
                CHAR_9: 57,
                CHAR_UPPERCASE_A: 65,
                CHAR_LOWERCASE_A: 97,
                CHAR_UPPERCASE_Z: 90,
                CHAR_LOWERCASE_Z: 122,
                CHAR_LEFT_PARENTHESES: 40,
                CHAR_RIGHT_PARENTHESES: 41,
                CHAR_ASTERISK: 42,
                CHAR_AMPERSAND: 38,
                CHAR_AT: 64,
                CHAR_BACKWARD_SLASH: 92,
                CHAR_CARRIAGE_RETURN: 13,
                CHAR_CIRCUMFLEX_ACCENT: 94,
                CHAR_COLON: 58,
                CHAR_COMMA: 44,
                CHAR_DOT: 46,
                CHAR_DOUBLE_QUOTE: 34,
                CHAR_EQUAL: 61,
                CHAR_EXCLAMATION_MARK: 33,
                CHAR_FORM_FEED: 12,
                CHAR_FORWARD_SLASH: 47,
                CHAR_GRAVE_ACCENT: 96,
                CHAR_HASH: 35,
                CHAR_HYPHEN_MINUS: 45,
                CHAR_LEFT_ANGLE_BRACKET: 60,
                CHAR_LEFT_CURLY_BRACE: 123,
                CHAR_LEFT_SQUARE_BRACKET: 91,
                CHAR_LINE_FEED: 10,
                CHAR_NO_BREAK_SPACE: 160,
                CHAR_PERCENT: 37,
                CHAR_PLUS: 43,
                CHAR_QUESTION_MARK: 63,
                CHAR_RIGHT_ANGLE_BRACKET: 62,
                CHAR_RIGHT_CURLY_BRACE: 125,
                CHAR_RIGHT_SQUARE_BRACKET: 93,
                CHAR_SEMICOLON: 59,
                CHAR_SINGLE_QUOTE: 39,
                CHAR_SPACE: 32,
                CHAR_TAB: 9,
                CHAR_UNDERSCORE: 95,
                CHAR_VERTICAL_LINE: 124,
                CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
                extglobChars (t) {
                    return {
                        "!": {
                            type: "negate",
                            open: "(?:(?!(?:",
                            close: `))${t.STAR})`
                        },
                        "?": {
                            type: "qmark",
                            open: "(?:",
                            close: ")?"
                        },
                        "+": {
                            type: "plus",
                            open: "(?:",
                            close: ")+"
                        },
                        "*": {
                            type: "star",
                            open: "(?:",
                            close: ")*"
                        },
                        "@": {
                            type: "at",
                            open: "(?:",
                            close: ")"
                        }
                    };
                },
                globChars (t) {
                    return t === true ? C : b;
                }
            };
        },
        697: (t, e, u)=>{
            const n = u(154);
            const o = u(96);
            const { MAX_LENGTH: s, POSIX_REGEX_SOURCE: r, REGEX_NON_SPECIAL_CHARS: a, REGEX_SPECIAL_CHARS_BACKREF: i, REPLACEMENTS: c } = n;
            const expandRange = (t, e)=>{
                if (typeof e.expandRange === "function") {
                    return e.expandRange(...t, e);
                }
                t.sort();
                const u = `[${t.join("-")}]`;
                try {
                    new RegExp(u);
                } catch (e) {
                    return t.map((t)=>o.escapeRegex(t)).join("..");
                }
                return u;
            };
            const syntaxError = (t, e)=>`Missing ${t}: "${e}" - use "\\\\${e}" to match literal characters`;
            const parse = (t, e)=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected a string");
                }
                t = c[t] || t;
                const u = {
                    ...e
                };
                const p = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                let l = t.length;
                if (l > p) {
                    throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`);
                }
                const f = {
                    type: "bos",
                    value: "",
                    output: u.prepend || ""
                };
                const A = [
                    f
                ];
                const _ = u.capture ? "" : "?:";
                const R = n.globChars(u.windows);
                const E = n.extglobChars(R);
                const { DOT_LITERAL: h, PLUS_LITERAL: g, SLASH_LITERAL: b, ONE_CHAR: C, DOTS_SLASH: y, NO_DOT: $, NO_DOT_SLASH: x, NO_DOTS_SLASH: S, QMARK: H, QMARK_NO_DOT: v, STAR: d, START_ANCHOR: L } = R;
                const globstar = (t)=>`(${_}(?:(?!${L}${t.dot ? y : h}).)*?)`;
                const T = u.dot ? "" : $;
                const O = u.dot ? H : v;
                let k = u.bash === true ? globstar(u) : d;
                if (u.capture) {
                    k = `(${k})`;
                }
                if (typeof u.noext === "boolean") {
                    u.noextglob = u.noext;
                }
                const m = {
                    input: t,
                    index: -1,
                    start: 0,
                    dot: u.dot === true,
                    consumed: "",
                    output: "",
                    prefix: "",
                    backtrack: false,
                    negated: false,
                    brackets: 0,
                    braces: 0,
                    parens: 0,
                    quotes: 0,
                    globstar: false,
                    tokens: A
                };
                t = o.removePrefix(t, m);
                l = t.length;
                const w = [];
                const N = [];
                const I = [];
                let B = f;
                let G;
                const eos = ()=>m.index === l - 1;
                const D = m.peek = (e = 1)=>t[m.index + e];
                const M = m.advance = ()=>t[++m.index] || "";
                const remaining = ()=>t.slice(m.index + 1);
                const consume = (t = "", e = 0)=>{
                    m.consumed += t;
                    m.index += e;
                };
                const append = (t)=>{
                    m.output += t.output != null ? t.output : t.value;
                    consume(t.value);
                };
                const negate = ()=>{
                    let t = 1;
                    while(D() === "!" && (D(2) !== "(" || D(3) === "?")){
                        M();
                        m.start++;
                        t++;
                    }
                    if (t % 2 === 0) {
                        return false;
                    }
                    m.negated = true;
                    m.start++;
                    return true;
                };
                const increment = (t)=>{
                    m[t]++;
                    I.push(t);
                };
                const decrement = (t)=>{
                    m[t]--;
                    I.pop();
                };
                const push = (t)=>{
                    if (B.type === "globstar") {
                        const e = m.braces > 0 && (t.type === "comma" || t.type === "brace");
                        const u = t.extglob === true || w.length && (t.type === "pipe" || t.type === "paren");
                        if (t.type !== "slash" && t.type !== "paren" && !e && !u) {
                            m.output = m.output.slice(0, -B.output.length);
                            B.type = "star";
                            B.value = "*";
                            B.output = k;
                            m.output += B.output;
                        }
                    }
                    if (w.length && t.type !== "paren") {
                        w[w.length - 1].inner += t.value;
                    }
                    if (t.value || t.output) append(t);
                    if (B && B.type === "text" && t.type === "text") {
                        B.output = (B.output || B.value) + t.value;
                        B.value += t.value;
                        return;
                    }
                    t.prev = B;
                    A.push(t);
                    B = t;
                };
                const extglobOpen = (t, e)=>{
                    const n = {
                        ...E[e],
                        conditions: 1,
                        inner: ""
                    };
                    n.prev = B;
                    n.parens = m.parens;
                    n.output = m.output;
                    const o = (u.capture ? "(" : "") + n.open;
                    increment("parens");
                    push({
                        type: t,
                        value: e,
                        output: m.output ? "" : C
                    });
                    push({
                        type: "paren",
                        extglob: true,
                        value: M(),
                        output: o
                    });
                    w.push(n);
                };
                const extglobClose = (t)=>{
                    let n = t.close + (u.capture ? ")" : "");
                    let o;
                    if (t.type === "negate") {
                        let s = k;
                        if (t.inner && t.inner.length > 1 && t.inner.includes("/")) {
                            s = globstar(u);
                        }
                        if (s !== k || eos() || /^\)+$/.test(remaining())) {
                            n = t.close = `)$))${s}`;
                        }
                        if (t.inner.includes("*") && (o = remaining()) && /^\.[^\\/.]+$/.test(o)) {
                            const u = parse(o, {
                                ...e,
                                fastpaths: false
                            }).output;
                            n = t.close = `)${u})${s})`;
                        }
                        if (t.prev.type === "bos") {
                            m.negatedExtglob = true;
                        }
                    }
                    push({
                        type: "paren",
                        extglob: true,
                        value: G,
                        output: n
                    });
                    decrement("parens");
                };
                if (u.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(t)) {
                    let n = false;
                    let s = t.replace(i, (t, e, u, o, s, r)=>{
                        if (o === "\\") {
                            n = true;
                            return t;
                        }
                        if (o === "?") {
                            if (e) {
                                return e + o + (s ? H.repeat(s.length) : "");
                            }
                            if (r === 0) {
                                return O + (s ? H.repeat(s.length) : "");
                            }
                            return H.repeat(u.length);
                        }
                        if (o === ".") {
                            return h.repeat(u.length);
                        }
                        if (o === "*") {
                            if (e) {
                                return e + o + (s ? k : "");
                            }
                            return k;
                        }
                        return e ? t : `\\${t}`;
                    });
                    if (n === true) {
                        if (u.unescape === true) {
                            s = s.replace(/\\/g, "");
                        } else {
                            s = s.replace(/\\+/g, (t)=>t.length % 2 === 0 ? "\\\\" : t ? "\\" : "");
                        }
                    }
                    if (s === t && u.contains === true) {
                        m.output = t;
                        return m;
                    }
                    m.output = o.wrapOutput(s, m, e);
                    return m;
                }
                while(!eos()){
                    G = M();
                    if (G === "\0") {
                        continue;
                    }
                    if (G === "\\") {
                        const t = D();
                        if (t === "/" && u.bash !== true) {
                            continue;
                        }
                        if (t === "." || t === ";") {
                            continue;
                        }
                        if (!t) {
                            G += "\\";
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                        const e = /^\\+/.exec(remaining());
                        let n = 0;
                        if (e && e[0].length > 2) {
                            n = e[0].length;
                            m.index += n;
                            if (n % 2 !== 0) {
                                G += "\\";
                            }
                        }
                        if (u.unescape === true) {
                            G = M();
                        } else {
                            G += M();
                        }
                        if (m.brackets === 0) {
                            push({
                                type: "text",
                                value: G
                            });
                            continue;
                        }
                    }
                    if (m.brackets > 0 && (G !== "]" || B.value === "[" || B.value === "[^")) {
                        if (u.posix !== false && G === ":") {
                            const t = B.value.slice(1);
                            if (t.includes("[")) {
                                B.posix = true;
                                if (t.includes(":")) {
                                    const t = B.value.lastIndexOf("[");
                                    const e = B.value.slice(0, t);
                                    const u = B.value.slice(t + 2);
                                    const n = r[u];
                                    if (n) {
                                        B.value = e + n;
                                        m.backtrack = true;
                                        M();
                                        if (!f.output && A.indexOf(B) === 1) {
                                            f.output = C;
                                        }
                                        continue;
                                    }
                                }
                            }
                        }
                        if (G === "[" && D() !== ":" || G === "-" && D() === "]") {
                            G = `\\${G}`;
                        }
                        if (G === "]" && (B.value === "[" || B.value === "[^")) {
                            G = `\\${G}`;
                        }
                        if (u.posix === true && G === "!" && B.value === "[") {
                            G = "^";
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (m.quotes === 1 && G !== '"') {
                        G = o.escapeRegex(G);
                        B.value += G;
                        append({
                            value: G
                        });
                        continue;
                    }
                    if (G === '"') {
                        m.quotes = m.quotes === 1 ? 0 : 1;
                        if (u.keepQuotes === true) {
                            push({
                                type: "text",
                                value: G
                            });
                        }
                        continue;
                    }
                    if (G === "(") {
                        increment("parens");
                        push({
                            type: "paren",
                            value: G
                        });
                        continue;
                    }
                    if (G === ")") {
                        if (m.parens === 0 && u.strictBrackets === true) {
                            throw new SyntaxError(syntaxError("opening", "("));
                        }
                        const t = w[w.length - 1];
                        if (t && m.parens === t.parens + 1) {
                            extglobClose(w.pop());
                            continue;
                        }
                        push({
                            type: "paren",
                            value: G,
                            output: m.parens ? ")" : "\\)"
                        });
                        decrement("parens");
                        continue;
                    }
                    if (G === "[") {
                        if (u.nobracket === true || !remaining().includes("]")) {
                            if (u.nobracket !== true && u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("closing", "]"));
                            }
                            G = `\\${G}`;
                        } else {
                            increment("brackets");
                        }
                        push({
                            type: "bracket",
                            value: G
                        });
                        continue;
                    }
                    if (G === "]") {
                        if (u.nobracket === true || B && B.type === "bracket" && B.value.length === 1) {
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        if (m.brackets === 0) {
                            if (u.strictBrackets === true) {
                                throw new SyntaxError(syntaxError("opening", "["));
                            }
                            push({
                                type: "text",
                                value: G,
                                output: `\\${G}`
                            });
                            continue;
                        }
                        decrement("brackets");
                        const t = B.value.slice(1);
                        if (B.posix !== true && t[0] === "^" && !t.includes("/")) {
                            G = `/${G}`;
                        }
                        B.value += G;
                        append({
                            value: G
                        });
                        if (u.literalBrackets === false || o.hasRegexChars(t)) {
                            continue;
                        }
                        const e = o.escapeRegex(B.value);
                        m.output = m.output.slice(0, -B.value.length);
                        if (u.literalBrackets === true) {
                            m.output += e;
                            B.value = e;
                            continue;
                        }
                        B.value = `(${_}${e}|${B.value})`;
                        m.output += B.value;
                        continue;
                    }
                    if (G === "{" && u.nobrace !== true) {
                        increment("braces");
                        const t = {
                            type: "brace",
                            value: G,
                            output: "(",
                            outputIndex: m.output.length,
                            tokensIndex: m.tokens.length
                        };
                        N.push(t);
                        push(t);
                        continue;
                    }
                    if (G === "}") {
                        const t = N[N.length - 1];
                        if (u.nobrace === true || !t) {
                            push({
                                type: "text",
                                value: G,
                                output: G
                            });
                            continue;
                        }
                        let e = ")";
                        if (t.dots === true) {
                            const t = A.slice();
                            const n = [];
                            for(let e = t.length - 1; e >= 0; e--){
                                A.pop();
                                if (t[e].type === "brace") {
                                    break;
                                }
                                if (t[e].type !== "dots") {
                                    n.unshift(t[e].value);
                                }
                            }
                            e = expandRange(n, u);
                            m.backtrack = true;
                        }
                        if (t.comma !== true && t.dots !== true) {
                            const u = m.output.slice(0, t.outputIndex);
                            const n = m.tokens.slice(t.tokensIndex);
                            t.value = t.output = "\\{";
                            G = e = "\\}";
                            m.output = u;
                            for (const t of n){
                                m.output += t.output || t.value;
                            }
                        }
                        push({
                            type: "brace",
                            value: G,
                            output: e
                        });
                        decrement("braces");
                        N.pop();
                        continue;
                    }
                    if (G === "|") {
                        if (w.length > 0) {
                            w[w.length - 1].conditions++;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G === ",") {
                        let t = G;
                        const e = N[N.length - 1];
                        if (e && I[I.length - 1] === "braces") {
                            e.comma = true;
                            t = "|";
                        }
                        push({
                            type: "comma",
                            value: G,
                            output: t
                        });
                        continue;
                    }
                    if (G === "/") {
                        if (B.type === "dot" && m.index === m.start + 1) {
                            m.start = m.index + 1;
                            m.consumed = "";
                            m.output = "";
                            A.pop();
                            B = f;
                            continue;
                        }
                        push({
                            type: "slash",
                            value: G,
                            output: b
                        });
                        continue;
                    }
                    if (G === ".") {
                        if (m.braces > 0 && B.type === "dot") {
                            if (B.value === ".") B.output = h;
                            const t = N[N.length - 1];
                            B.type = "dots";
                            B.output += G;
                            B.value += G;
                            t.dots = true;
                            continue;
                        }
                        if (m.braces + m.parens === 0 && B.type !== "bos" && B.type !== "slash") {
                            push({
                                type: "text",
                                value: G,
                                output: h
                            });
                            continue;
                        }
                        push({
                            type: "dot",
                            value: G,
                            output: h
                        });
                        continue;
                    }
                    if (G === "?") {
                        const t = B && B.value === "(";
                        if (!t && u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("qmark", G);
                            continue;
                        }
                        if (B && B.type === "paren") {
                            const t = D();
                            let e = G;
                            if (B.value === "(" && !/[!=<:]/.test(t) || t === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                                e = `\\${G}`;
                            }
                            push({
                                type: "text",
                                value: G,
                                output: e
                            });
                            continue;
                        }
                        if (u.dot !== true && (B.type === "slash" || B.type === "bos")) {
                            push({
                                type: "qmark",
                                value: G,
                                output: v
                            });
                            continue;
                        }
                        push({
                            type: "qmark",
                            value: G,
                            output: H
                        });
                        continue;
                    }
                    if (G === "!") {
                        if (u.noextglob !== true && D() === "(") {
                            if (D(2) !== "?" || !/[!=<:]/.test(D(3))) {
                                extglobOpen("negate", G);
                                continue;
                            }
                        }
                        if (u.nonegate !== true && m.index === 0) {
                            negate();
                            continue;
                        }
                    }
                    if (G === "+") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            extglobOpen("plus", G);
                            continue;
                        }
                        if (B && B.value === "(" || u.regex === false) {
                            push({
                                type: "plus",
                                value: G,
                                output: g
                            });
                            continue;
                        }
                        if (B && (B.type === "bracket" || B.type === "paren" || B.type === "brace") || m.parens > 0) {
                            push({
                                type: "plus",
                                value: G
                            });
                            continue;
                        }
                        push({
                            type: "plus",
                            value: g
                        });
                        continue;
                    }
                    if (G === "@") {
                        if (u.noextglob !== true && D() === "(" && D(2) !== "?") {
                            push({
                                type: "at",
                                extglob: true,
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (G !== "*") {
                        if (G === "$" || G === "^") {
                            G = `\\${G}`;
                        }
                        const t = a.exec(remaining());
                        if (t) {
                            G += t[0];
                            m.index += t[0].length;
                        }
                        push({
                            type: "text",
                            value: G
                        });
                        continue;
                    }
                    if (B && (B.type === "globstar" || B.star === true)) {
                        B.type = "star";
                        B.star = true;
                        B.value += G;
                        B.output = k;
                        m.backtrack = true;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    let e = remaining();
                    if (u.noextglob !== true && /^\([^?]/.test(e)) {
                        extglobOpen("star", G);
                        continue;
                    }
                    if (B.type === "star") {
                        if (u.noglobstar === true) {
                            consume(G);
                            continue;
                        }
                        const n = B.prev;
                        const o = n.prev;
                        const s = n.type === "slash" || n.type === "bos";
                        const r = o && (o.type === "star" || o.type === "globstar");
                        if (u.bash === true && (!s || e[0] && e[0] !== "/")) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        const a = m.braces > 0 && (n.type === "comma" || n.type === "brace");
                        const i = w.length && (n.type === "pipe" || n.type === "paren");
                        if (!s && n.type !== "paren" && !a && !i) {
                            push({
                                type: "star",
                                value: G,
                                output: ""
                            });
                            continue;
                        }
                        while(e.slice(0, 3) === "/**"){
                            const u = t[m.index + 4];
                            if (u && u !== "/") {
                                break;
                            }
                            e = e.slice(3);
                            consume("/**", 3);
                        }
                        if (n.type === "bos" && eos()) {
                            B.type = "globstar";
                            B.value += G;
                            B.output = globstar(u);
                            m.output = B.output;
                            m.globstar = true;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && !r && eos()) {
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = globstar(u) + (u.strictSlashes ? ")" : "|$)");
                            B.value += G;
                            m.globstar = true;
                            m.output += n.output + B.output;
                            consume(G);
                            continue;
                        }
                        if (n.type === "slash" && n.prev.type !== "bos" && e[0] === "/") {
                            const t = e[1] !== void 0 ? "|$" : "";
                            m.output = m.output.slice(0, -(n.output + B.output).length);
                            n.output = `(?:${n.output}`;
                            B.type = "globstar";
                            B.output = `${globstar(u)}${b}|${b}${t})`;
                            B.value += G;
                            m.output += n.output + B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        if (n.type === "bos" && e[0] === "/") {
                            B.type = "globstar";
                            B.value += G;
                            B.output = `(?:^|${b}|${globstar(u)}${b})`;
                            m.output = B.output;
                            m.globstar = true;
                            consume(G + M());
                            push({
                                type: "slash",
                                value: "/",
                                output: ""
                            });
                            continue;
                        }
                        m.output = m.output.slice(0, -B.output.length);
                        B.type = "globstar";
                        B.output = globstar(u);
                        B.value += G;
                        m.output += B.output;
                        m.globstar = true;
                        consume(G);
                        continue;
                    }
                    const n = {
                        type: "star",
                        value: G,
                        output: k
                    };
                    if (u.bash === true) {
                        n.output = ".*?";
                        if (B.type === "bos" || B.type === "slash") {
                            n.output = T + n.output;
                        }
                        push(n);
                        continue;
                    }
                    if (B && (B.type === "bracket" || B.type === "paren") && u.regex === true) {
                        n.output = G;
                        push(n);
                        continue;
                    }
                    if (m.index === m.start || B.type === "slash" || B.type === "dot") {
                        if (B.type === "dot") {
                            m.output += x;
                            B.output += x;
                        } else if (u.dot === true) {
                            m.output += S;
                            B.output += S;
                        } else {
                            m.output += T;
                            B.output += T;
                        }
                        if (D() !== "*") {
                            m.output += C;
                            B.output += C;
                        }
                    }
                    push(n);
                }
                while(m.brackets > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
                    m.output = o.escapeLast(m.output, "[");
                    decrement("brackets");
                }
                while(m.parens > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
                    m.output = o.escapeLast(m.output, "(");
                    decrement("parens");
                }
                while(m.braces > 0){
                    if (u.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
                    m.output = o.escapeLast(m.output, "{");
                    decrement("braces");
                }
                if (u.strictSlashes !== true && (B.type === "star" || B.type === "bracket")) {
                    push({
                        type: "maybe_slash",
                        value: "",
                        output: `${b}?`
                    });
                }
                if (m.backtrack === true) {
                    m.output = "";
                    for (const t of m.tokens){
                        m.output += t.output != null ? t.output : t.value;
                        if (t.suffix) {
                            m.output += t.suffix;
                        }
                    }
                }
                return m;
            };
            parse.fastpaths = (t, e)=>{
                const u = {
                    ...e
                };
                const r = typeof u.maxLength === "number" ? Math.min(s, u.maxLength) : s;
                const a = t.length;
                if (a > r) {
                    throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`);
                }
                t = c[t] || t;
                const { DOT_LITERAL: i, SLASH_LITERAL: p, ONE_CHAR: l, DOTS_SLASH: f, NO_DOT: A, NO_DOTS: _, NO_DOTS_SLASH: R, STAR: E, START_ANCHOR: h } = n.globChars(u.windows);
                const g = u.dot ? _ : A;
                const b = u.dot ? R : A;
                const C = u.capture ? "" : "?:";
                const y = {
                    negated: false,
                    prefix: ""
                };
                let $ = u.bash === true ? ".*?" : E;
                if (u.capture) {
                    $ = `(${$})`;
                }
                const globstar = (t)=>{
                    if (t.noglobstar === true) return $;
                    return `(${C}(?:(?!${h}${t.dot ? f : i}).)*?)`;
                };
                const create = (t)=>{
                    switch(t){
                        case "*":
                            return `${g}${l}${$}`;
                        case ".*":
                            return `${i}${l}${$}`;
                        case "*.*":
                            return `${g}${$}${i}${l}${$}`;
                        case "*/*":
                            return `${g}${$}${p}${l}${b}${$}`;
                        case "**":
                            return g + globstar(u);
                        case "**/*":
                            return `(?:${g}${globstar(u)}${p})?${b}${l}${$}`;
                        case "**/*.*":
                            return `(?:${g}${globstar(u)}${p})?${b}${$}${i}${l}${$}`;
                        case "**/.*":
                            return `(?:${g}${globstar(u)}${p})?${i}${l}${$}`;
                        default:
                            {
                                const e = /^(.*?)\.(\w+)$/.exec(t);
                                if (!e) return;
                                const u = create(e[1]);
                                if (!u) return;
                                return u + i + e[2];
                            }
                    }
                };
                const x = o.removePrefix(t, y);
                let S = create(x);
                if (S && u.strictSlashes !== true) {
                    S += `${p}?`;
                }
                return S;
            };
            t.exports = parse;
        },
        510: (t, e, u)=>{
            const n = u(716);
            const o = u(697);
            const s = u(96);
            const r = u(154);
            const isObject = (t)=>t && typeof t === "object" && !Array.isArray(t);
            const picomatch = (t, e, u = false)=>{
                if (Array.isArray(t)) {
                    const n = t.map((t)=>picomatch(t, e, u));
                    const arrayMatcher = (t)=>{
                        for (const e of n){
                            const u = e(t);
                            if (u) return u;
                        }
                        return false;
                    };
                    return arrayMatcher;
                }
                const n = isObject(t) && t.tokens && t.input;
                if (t === "" || typeof t !== "string" && !n) {
                    throw new TypeError("Expected pattern to be a non-empty string");
                }
                const o = e || {};
                const s = o.windows;
                const r = n ? picomatch.compileRe(t, e) : picomatch.makeRe(t, e, false, true);
                const a = r.state;
                delete r.state;
                let isIgnored = ()=>false;
                if (o.ignore) {
                    const t = {
                        ...e,
                        ignore: null,
                        onMatch: null,
                        onResult: null
                    };
                    isIgnored = picomatch(o.ignore, t, u);
                }
                const matcher = (u, n = false)=>{
                    const { isMatch: i, match: c, output: p } = picomatch.test(u, r, e, {
                        glob: t,
                        posix: s
                    });
                    const l = {
                        glob: t,
                        state: a,
                        regex: r,
                        posix: s,
                        input: u,
                        output: p,
                        match: c,
                        isMatch: i
                    };
                    if (typeof o.onResult === "function") {
                        o.onResult(l);
                    }
                    if (i === false) {
                        l.isMatch = false;
                        return n ? l : false;
                    }
                    if (isIgnored(u)) {
                        if (typeof o.onIgnore === "function") {
                            o.onIgnore(l);
                        }
                        l.isMatch = false;
                        return n ? l : false;
                    }
                    if (typeof o.onMatch === "function") {
                        o.onMatch(l);
                    }
                    return n ? l : true;
                };
                if (u) {
                    matcher.state = a;
                }
                return matcher;
            };
            picomatch.test = (t, e, u, { glob: n, posix: o } = {})=>{
                if (typeof t !== "string") {
                    throw new TypeError("Expected input to be a string");
                }
                if (t === "") {
                    return {
                        isMatch: false,
                        output: ""
                    };
                }
                const r = u || {};
                const a = r.format || (o ? s.toPosixSlashes : null);
                let i = t === n;
                let c = i && a ? a(t) : t;
                if (i === false) {
                    c = a ? a(t) : t;
                    i = c === n;
                }
                if (i === false || r.capture === true) {
                    if (r.matchBase === true || r.basename === true) {
                        i = picomatch.matchBase(t, e, u, o);
                    } else {
                        i = e.exec(c);
                    }
                }
                return {
                    isMatch: Boolean(i),
                    match: i,
                    output: c
                };
            };
            picomatch.matchBase = (t, e, u)=>{
                const n = e instanceof RegExp ? e : picomatch.makeRe(e, u);
                return n.test(s.basename(t));
            };
            picomatch.isMatch = (t, e, u)=>picomatch(e, u)(t);
            picomatch.parse = (t, e)=>{
                if (Array.isArray(t)) return t.map((t)=>picomatch.parse(t, e));
                return o(t, {
                    ...e,
                    fastpaths: false
                });
            };
            picomatch.scan = (t, e)=>n(t, e);
            picomatch.compileRe = (t, e, u = false, n = false)=>{
                if (u === true) {
                    return t.output;
                }
                const o = e || {};
                const s = o.contains ? "" : "^";
                const r = o.contains ? "" : "$";
                let a = `${s}(?:${t.output})${r}`;
                if (t && t.negated === true) {
                    a = `^(?!${a}).*$`;
                }
                const i = picomatch.toRegex(a, e);
                if (n === true) {
                    i.state = t;
                }
                return i;
            };
            picomatch.makeRe = (t, e = {}, u = false, n = false)=>{
                if (!t || typeof t !== "string") {
                    throw new TypeError("Expected a non-empty string");
                }
                let s = {
                    negated: false,
                    fastpaths: true
                };
                if (e.fastpaths !== false && (t[0] === "." || t[0] === "*")) {
                    s.output = o.fastpaths(t, e);
                }
                if (!s.output) {
                    s = o(t, e);
                }
                return picomatch.compileRe(s, e, u, n);
            };
            picomatch.toRegex = (t, e)=>{
                try {
                    const u = e || {};
                    return new RegExp(t, u.flags || (u.nocase ? "i" : ""));
                } catch (t) {
                    if (e && e.debug === true) throw t;
                    return /$^/;
                }
            };
            picomatch.constants = r;
            t.exports = picomatch;
        },
        716: (t, e, u)=>{
            const n = u(96);
            const { CHAR_ASTERISK: o, CHAR_AT: s, CHAR_BACKWARD_SLASH: r, CHAR_COMMA: a, CHAR_DOT: i, CHAR_EXCLAMATION_MARK: c, CHAR_FORWARD_SLASH: p, CHAR_LEFT_CURLY_BRACE: l, CHAR_LEFT_PARENTHESES: f, CHAR_LEFT_SQUARE_BRACKET: A, CHAR_PLUS: _, CHAR_QUESTION_MARK: R, CHAR_RIGHT_CURLY_BRACE: E, CHAR_RIGHT_PARENTHESES: h, CHAR_RIGHT_SQUARE_BRACKET: g } = u(154);
            const isPathSeparator = (t)=>t === p || t === r;
            const depth = (t)=>{
                if (t.isPrefix !== true) {
                    t.depth = t.isGlobstar ? Infinity : 1;
                }
            };
            const scan = (t, e)=>{
                const u = e || {};
                const b = t.length - 1;
                const C = u.parts === true || u.scanToEnd === true;
                const y = [];
                const $ = [];
                const x = [];
                let S = t;
                let H = -1;
                let v = 0;
                let d = 0;
                let L = false;
                let T = false;
                let O = false;
                let k = false;
                let m = false;
                let w = false;
                let N = false;
                let I = false;
                let B = false;
                let G = false;
                let D = 0;
                let M;
                let P;
                let K = {
                    value: "",
                    depth: 0,
                    isGlob: false
                };
                const eos = ()=>H >= b;
                const peek = ()=>S.charCodeAt(H + 1);
                const advance = ()=>{
                    M = P;
                    return S.charCodeAt(++H);
                };
                while(H < b){
                    P = advance();
                    let t;
                    if (P === r) {
                        N = K.backslashes = true;
                        P = advance();
                        if (P === l) {
                            w = true;
                        }
                        continue;
                    }
                    if (w === true || P === l) {
                        D++;
                        while(eos() !== true && (P = advance())){
                            if (P === r) {
                                N = K.backslashes = true;
                                advance();
                                continue;
                            }
                            if (P === l) {
                                D++;
                                continue;
                            }
                            if (w !== true && P === i && (P = advance()) === i) {
                                L = K.isBrace = true;
                                O = K.isGlob = true;
                                G = true;
                                if (C === true) {
                                    continue;
                                }
                                break;
                            }
                            if (w !== true && P === a) {
                                L = K.isBrace = true;
                                O = K.isGlob = true;
                                G = true;
                                if (C === true) {
                                    continue;
                                }
                                break;
                            }
                            if (P === E) {
                                D--;
                                if (D === 0) {
                                    w = false;
                                    L = K.isBrace = true;
                                    G = true;
                                    break;
                                }
                            }
                        }
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (P === p) {
                        y.push(H);
                        $.push(K);
                        K = {
                            value: "",
                            depth: 0,
                            isGlob: false
                        };
                        if (G === true) continue;
                        if (M === i && H === v + 1) {
                            v += 2;
                            continue;
                        }
                        d = H + 1;
                        continue;
                    }
                    if (u.noext !== true) {
                        const t = P === _ || P === s || P === o || P === R || P === c;
                        if (t === true && peek() === f) {
                            O = K.isGlob = true;
                            k = K.isExtglob = true;
                            G = true;
                            if (P === c && H === v) {
                                B = true;
                            }
                            if (C === true) {
                                while(eos() !== true && (P = advance())){
                                    if (P === r) {
                                        N = K.backslashes = true;
                                        P = advance();
                                        continue;
                                    }
                                    if (P === h) {
                                        O = K.isGlob = true;
                                        G = true;
                                        break;
                                    }
                                }
                                continue;
                            }
                            break;
                        }
                    }
                    if (P === o) {
                        if (M === o) m = K.isGlobstar = true;
                        O = K.isGlob = true;
                        G = true;
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (P === R) {
                        O = K.isGlob = true;
                        G = true;
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (P === A) {
                        while(eos() !== true && (t = advance())){
                            if (t === r) {
                                N = K.backslashes = true;
                                advance();
                                continue;
                            }
                            if (t === g) {
                                T = K.isBracket = true;
                                O = K.isGlob = true;
                                G = true;
                                break;
                            }
                        }
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                    if (u.nonegate !== true && P === c && H === v) {
                        I = K.negated = true;
                        v++;
                        continue;
                    }
                    if (u.noparen !== true && P === f) {
                        O = K.isGlob = true;
                        if (C === true) {
                            while(eos() !== true && (P = advance())){
                                if (P === f) {
                                    N = K.backslashes = true;
                                    P = advance();
                                    continue;
                                }
                                if (P === h) {
                                    G = true;
                                    break;
                                }
                            }
                            continue;
                        }
                        break;
                    }
                    if (O === true) {
                        G = true;
                        if (C === true) {
                            continue;
                        }
                        break;
                    }
                }
                if (u.noext === true) {
                    k = false;
                    O = false;
                }
                let U = S;
                let X = "";
                let F = "";
                if (v > 0) {
                    X = S.slice(0, v);
                    S = S.slice(v);
                    d -= v;
                }
                if (U && O === true && d > 0) {
                    U = S.slice(0, d);
                    F = S.slice(d);
                } else if (O === true) {
                    U = "";
                    F = S;
                } else {
                    U = S;
                }
                if (U && U !== "" && U !== "/" && U !== S) {
                    if (isPathSeparator(U.charCodeAt(U.length - 1))) {
                        U = U.slice(0, -1);
                    }
                }
                if (u.unescape === true) {
                    if (F) F = n.removeBackslashes(F);
                    if (U && N === true) {
                        U = n.removeBackslashes(U);
                    }
                }
                const Q = {
                    prefix: X,
                    input: t,
                    start: v,
                    base: U,
                    glob: F,
                    isBrace: L,
                    isBracket: T,
                    isGlob: O,
                    isExtglob: k,
                    isGlobstar: m,
                    negated: I,
                    negatedExtglob: B
                };
                if (u.tokens === true) {
                    Q.maxDepth = 0;
                    if (!isPathSeparator(P)) {
                        $.push(K);
                    }
                    Q.tokens = $;
                }
                if (u.parts === true || u.tokens === true) {
                    let e;
                    for(let n = 0; n < y.length; n++){
                        const o = e ? e + 1 : v;
                        const s = y[n];
                        const r = t.slice(o, s);
                        if (u.tokens) {
                            if (n === 0 && v !== 0) {
                                $[n].isPrefix = true;
                                $[n].value = X;
                            } else {
                                $[n].value = r;
                            }
                            depth($[n]);
                            Q.maxDepth += $[n].depth;
                        }
                        if (n !== 0 || r !== "") {
                            x.push(r);
                        }
                        e = s;
                    }
                    if (e && e + 1 < t.length) {
                        const n = t.slice(e + 1);
                        x.push(n);
                        if (u.tokens) {
                            $[$.length - 1].value = n;
                            depth($[$.length - 1]);
                            Q.maxDepth += $[$.length - 1].depth;
                        }
                    }
                    Q.slashes = y;
                    Q.parts = x;
                }
                return Q;
            };
            t.exports = scan;
        },
        96: (t, e, u)=>{
            const { REGEX_BACKSLASH: n, REGEX_REMOVE_BACKSLASH: o, REGEX_SPECIAL_CHARS: s, REGEX_SPECIAL_CHARS_GLOBAL: r } = u(154);
            e.isObject = (t)=>t !== null && typeof t === "object" && !Array.isArray(t);
            e.hasRegexChars = (t)=>s.test(t);
            e.isRegexChar = (t)=>t.length === 1 && e.hasRegexChars(t);
            e.escapeRegex = (t)=>t.replace(r, "\\$1");
            e.toPosixSlashes = (t)=>t.replace(n, "/");
            e.removeBackslashes = (t)=>t.replace(o, (t)=>t === "\\" ? "" : t);
            e.escapeLast = (t, u, n)=>{
                const o = t.lastIndexOf(u, n);
                if (o === -1) return t;
                if (t[o - 1] === "\\") return e.escapeLast(t, u, o - 1);
                return `${t.slice(0, o)}\\${t.slice(o)}`;
            };
            e.removePrefix = (t, e = {})=>{
                let u = t;
                if (u.startsWith("./")) {
                    u = u.slice(2);
                    e.prefix = "./";
                }
                return u;
            };
            e.wrapOutput = (t, e = {}, u = {})=>{
                const n = u.contains ? "" : "^";
                const o = u.contains ? "" : "$";
                let s = `${n}(?:${t})${o}`;
                if (e.negated === true) {
                    s = `(?:^(?!${s}).*$)`;
                }
                return s;
            };
            e.basename = (t, { windows: e } = {})=>{
                const u = t.split(e ? /[\\/]/ : "/");
                const n = u[u.length - 1];
                if (n === "") {
                    return u[u.length - 2];
                }
                return n;
            };
        }
    };
    var e = {};
    function __nccwpck_require__(u) {
        var n = e[u];
        if (n !== undefined) {
            return n.exports;
        }
        var o = e[u] = {
            exports: {}
        };
        var s = true;
        try {
            t[u](o, o.exports, __nccwpck_require__);
            s = false;
        } finally{
            if (s) delete e[u];
        }
        return o.exports;
    }
    if (typeof __nccwpck_require__ !== "undefined") __nccwpck_require__.ab = __dirname + "/";
    var u = __nccwpck_require__(170);
    module.exports = u;
})();
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/match-local-pattern.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    hasLocalMatch: null,
    matchLocalPattern: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasLocalMatch: function() {
        return hasLocalMatch;
    },
    matchLocalPattern: function() {
        return matchLocalPattern;
    }
});
const _picomatch = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/picomatch/index.js [app-client] (ecmascript)");
function matchLocalPattern(pattern, url) {
    if (pattern.search !== undefined) {
        if (pattern.search !== url.search) {
            return false;
        }
    }
    var _pattern_pathname;
    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {
        dot: true
    }).test(url.pathname)) {
        return false;
    }
    return true;
}
function hasLocalMatch(localPatterns, urlPathAndQuery) {
    if (!localPatterns) {
        // if the user didn't define "localPatterns", we allow all local images
        return true;
    }
    const url = new URL(urlPathAndQuery, 'http://n');
    return localPatterns.some((p)=>matchLocalPattern(p, url));
} //# sourceMappingURL=match-local-pattern.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/match-remote-pattern.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    hasRemoteMatch: null,
    matchRemotePattern: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasRemoteMatch: function() {
        return hasRemoteMatch;
    },
    matchRemotePattern: function() {
        return matchRemotePattern;
    }
});
const _picomatch = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/picomatch/index.js [app-client] (ecmascript)");
function matchRemotePattern(pattern, url) {
    if (pattern.protocol !== undefined) {
        const actualProto = url.protocol.slice(0, -1);
        if (pattern.protocol !== actualProto) {
            return false;
        }
    }
    if (pattern.port !== undefined) {
        if (pattern.port !== url.port) {
            return false;
        }
    }
    if (pattern.hostname === undefined) {
        throw Object.defineProperty(new Error("Pattern should define hostname but found\n" + JSON.stringify(pattern)), "__NEXT_ERROR_CODE", {
            value: "E410",
            enumerable: false,
            configurable: true
        });
    } else {
        if (!(0, _picomatch.makeRe)(pattern.hostname).test(url.hostname)) {
            return false;
        }
    }
    if (pattern.search !== undefined) {
        if (pattern.search !== url.search) {
            return false;
        }
    }
    var _pattern_pathname;
    // Should be the same as writeImagesManifest()
    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {
        dot: true
    }).test(url.pathname)) {
        return false;
    }
    return true;
}
function hasRemoteMatch(domains, remotePatterns, url) {
    return domains.some((domain)=>url.hostname === domain) || remotePatterns.some((p)=>matchRemotePattern(p, url));
} //# sourceMappingURL=match-remote-pattern.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-loader.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const DEFAULT_Q = 75;
function defaultLoader(param) {
    let { config, src, width, quality } = param;
    var _config_qualities;
    if ("TURBOPACK compile-time truthy", 1) {
        const missingValues = [];
        // these should always be provided but make sure they are
        if (!src) missingValues.push('src');
        if (!width) missingValues.push('width');
        if (missingValues.length > 0) {
            throw Object.defineProperty(new Error("Next Image Optimization requires " + missingValues.join(', ') + " to be provided. Make sure you pass them as props to the `next/image` component. Received: " + JSON.stringify({
                src,
                width,
                quality
            })), "__NEXT_ERROR_CODE", {
                value: "E188",
                enumerable: false,
                configurable: true
            });
        }
        if (src.startsWith('//')) {
            throw Object.defineProperty(new Error('Failed to parse src "' + src + '" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)'), "__NEXT_ERROR_CODE", {
                value: "E360",
                enumerable: false,
                configurable: true
            });
        }
        if (src.startsWith('/') && config.localPatterns) {
            if ("TURBOPACK compile-time truthy", 1) {
                // We use dynamic require because this should only error in development
                const { hasLocalMatch } = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/match-local-pattern.js [app-client] (ecmascript)");
                if (!hasLocalMatch(config.localPatterns, src)) {
                    throw Object.defineProperty(new Error("Invalid src prop (" + src + ") on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\n" + "See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns"), "__NEXT_ERROR_CODE", {
                        value: "E426",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
        if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {
            let parsedSrc;
            try {
                parsedSrc = new URL(src);
            } catch (err) {
                console.error(err);
                throw Object.defineProperty(new Error('Failed to parse src "' + src + '" on `next/image`, if using relative image it must start with a leading slash "/" or be an absolute URL (http:// or https://)'), "__NEXT_ERROR_CODE", {
                    value: "E63",
                    enumerable: false,
                    configurable: true
                });
            }
            if ("TURBOPACK compile-time truthy", 1) {
                // We use dynamic require because this should only error in development
                const { hasRemoteMatch } = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/match-remote-pattern.js [app-client] (ecmascript)");
                if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {
                    throw Object.defineProperty(new Error("Invalid src prop (" + src + ') on `next/image`, hostname "' + parsedSrc.hostname + '" is not configured under images in your `next.config.js`\n' + "See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host"), "__NEXT_ERROR_CODE", {
                        value: "E231",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
        if (quality && config.qualities && !config.qualities.includes(quality)) {
            throw Object.defineProperty(new Error("Invalid quality prop (" + quality + ") on `next/image` does not match `images.qualities` configured in your `next.config.js`\n" + "See more info: https://nextjs.org/docs/messages/next-image-unconfigured-qualities"), "__NEXT_ERROR_CODE", {
                value: "E623",
                enumerable: false,
                configurable: true
            });
        }
    }
    const q = quality || ((_config_qualities = config.qualities) == null ? void 0 : _config_qualities.reduce((prev, cur)=>Math.abs(cur - DEFAULT_Q) < Math.abs(prev - DEFAULT_Q) ? cur : prev)) || DEFAULT_Q;
    return config.path + "?url=" + encodeURIComponent(src) + "&w=" + width + "&q=" + q + (src.startsWith('/_next/static/media/') && ("TURBOPACK compile-time value", false) ? ("TURBOPACK unreachable", undefined) : '');
}
// We use this to determine if the import is the default loader
// or a custom loader defined by the user in next.config.js
defaultLoader.__next_img_default = true;
const _default = defaultLoader; //# sourceMappingURL=image-loader.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/use-merged-ref.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useMergedRef", {
    enumerable: true,
    get: function() {
        return useMergedRef;
    }
});
const _react = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
function useMergedRef(refA, refB) {
    const cleanupA = (0, _react.useRef)(null);
    const cleanupB = (0, _react.useRef)(null);
    // NOTE: In theory, we could skip the wrapping if only one of the refs is non-null.
    // (this happens often if the user doesn't pass a ref to Link/Form/Image)
    // But this can cause us to leak a cleanup-ref into user code (e.g. via `<Link legacyBehavior>`),
    // and the user might pass that ref into ref-merging library that doesn't support cleanup refs
    // (because it hasn't been updated for React 19)
    // which can then cause things to blow up, because a cleanup-returning ref gets called with `null`.
    // So in practice, it's safer to be defensive and always wrap the ref, even on React 19.
    return (0, _react.useCallback)((current)=>{
        if (current === null) {
            const cleanupFnA = cleanupA.current;
            if (cleanupFnA) {
                cleanupA.current = null;
                cleanupFnA();
            }
            const cleanupFnB = cleanupB.current;
            if (cleanupFnB) {
                cleanupB.current = null;
                cleanupFnB();
            }
        } else {
            if (refA) {
                cleanupA.current = applyRef(refA, current);
            }
            if (refB) {
                cleanupB.current = applyRef(refB, current);
            }
        }
    }, [
        refA,
        refB
    ]);
}
function applyRef(refA, current) {
    if (typeof refA === 'function') {
        const cleanup = refA(current);
        if (typeof cleanup === 'function') {
            return cleanup;
        } else {
            return ()=>refA(null);
        }
    } else {
        refA.current = current;
        return ()=>{
            refA.current = null;
        };
    }
}
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=use-merged-ref.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/image-component.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Image", {
    enumerable: true,
    get: function() {
        return Image;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _interop_require_wildcard = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)");
const _jsxruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const _reactdom = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)"));
const _head = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/head.js [app-client] (ecmascript)"));
const _getimgprops = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/get-img-props.js [app-client] (ecmascript)");
const _imageconfig = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-config.js [app-client] (ecmascript)");
const _imageconfigcontextsharedruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js [app-client] (ecmascript)");
const _warnonce = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)");
const _routercontextsharedruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/router-context.shared-runtime.js [app-client] (ecmascript)");
const _imageloader = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-loader.js [app-client] (ecmascript)"));
const _usemergedref = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/use-merged-ref.js [app-client] (ecmascript)");
// This is replaced by webpack define plugin
const configEnv = ("TURBOPACK compile-time value", JSON.parse('{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'));
if (typeof window === 'undefined') {
    ;
    globalThis.__NEXT_IMAGE_IMPORTED = true;
}
// See https://stackoverflow.com/q/39777833/266535 for why we use this ref
// handler instead of the img's onLoad attribute.
function handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput) {
    const src = img == null ? void 0 : img.src;
    if (!img || img['data-loaded-src'] === src) {
        return;
    }
    img['data-loaded-src'] = src;
    const p = 'decode' in img ? img.decode() : Promise.resolve();
    p.catch(()=>{}).then(()=>{
        if (!img.parentElement || !img.isConnected) {
            // Exit early in case of race condition:
            // - onload() is called
            // - decode() is called but incomplete
            // - unmount is called
            // - decode() completes
            return;
        }
        if (placeholder !== 'empty') {
            setBlurComplete(true);
        }
        if (onLoadRef == null ? void 0 : onLoadRef.current) {
            // Since we don't have the SyntheticEvent here,
            // we must create one with the same shape.
            // See https://reactjs.org/docs/events.html
            const event = new Event('load');
            Object.defineProperty(event, 'target', {
                writable: false,
                value: img
            });
            let prevented = false;
            let stopped = false;
            onLoadRef.current({
                ...event,
                nativeEvent: event,
                currentTarget: img,
                target: img,
                isDefaultPrevented: ()=>prevented,
                isPropagationStopped: ()=>stopped,
                persist: ()=>{},
                preventDefault: ()=>{
                    prevented = true;
                    event.preventDefault();
                },
                stopPropagation: ()=>{
                    stopped = true;
                    event.stopPropagation();
                }
            });
        }
        if (onLoadingCompleteRef == null ? void 0 : onLoadingCompleteRef.current) {
            onLoadingCompleteRef.current(img);
        }
        if ("TURBOPACK compile-time truthy", 1) {
            const origSrc = new URL(src, 'http://n').searchParams.get('url') || src;
            if (img.getAttribute('data-nimg') === 'fill') {
                if (!unoptimized && (!sizesInput || sizesInput === '100vw')) {
                    let widthViewportRatio = img.getBoundingClientRect().width / window.innerWidth;
                    if (widthViewportRatio < 0.6) {
                        if (sizesInput === '100vw') {
                            (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" prop and "sizes" prop of "100vw", but image is not rendered at full viewport width. Please adjust "sizes" to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');
                        } else {
                            (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" but is missing "sizes" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');
                        }
                    }
                }
                if (img.parentElement) {
                    const { position } = window.getComputedStyle(img.parentElement);
                    const valid = [
                        'absolute',
                        'fixed',
                        'relative'
                    ];
                    if (!valid.includes(position)) {
                        (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" and parent element with invalid "position". Provided "' + position + '" should be one of ' + valid.map(String).join(',') + ".");
                    }
                }
                if (img.height === 0) {
                    (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has "fill" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.');
                }
            }
            const heightModified = img.height.toString() !== img.getAttribute('height');
            const widthModified = img.width.toString() !== img.getAttribute('width');
            if (heightModified && !widthModified || !heightModified && widthModified) {
                (0, _warnonce.warnOnce)('Image with src "' + origSrc + '" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles \'width: "auto"\' or \'height: "auto"\' to maintain the aspect ratio.');
            }
        }
    });
}
function getDynamicProps(fetchPriority) {
    if (Boolean(_react.use)) {
        // In React 19.0.0 or newer, we must use camelCase
        // prop to avoid "Warning: Invalid DOM property".
        // See https://github.com/facebook/react/pull/25927
        return {
            fetchPriority
        };
    }
    // In React 18.2.0 or older, we must use lowercase prop
    // to avoid "Warning: Invalid DOM property".
    return {
        fetchpriority: fetchPriority
    };
}
const ImageElement = /*#__PURE__*/ (0, _react.forwardRef)((param, forwardedRef)=>{
    let { src, srcSet, sizes, height, width, decoding, className, style, fetchPriority, placeholder, loading, unoptimized, fill, onLoadRef, onLoadingCompleteRef, setBlurComplete, setShowAltText, sizesInput, onLoad, onError, ...rest } = param;
    const ownRef = (0, _react.useCallback)((img)=>{
        if (!img) {
            return;
        }
        if (onError) {
            // If the image has an error before react hydrates, then the error is lost.
            // The workaround is to wait until the image is mounted which is after hydration,
            // then we set the src again to trigger the error handler (if there was an error).
            // eslint-disable-next-line no-self-assign
            img.src = img.src;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            if (!src) {
                console.error('Image is missing required "src" property:', img);
            }
            if (img.getAttribute('alt') === null) {
                console.error('Image is missing required "alt" property. Please add Alternative Text to describe the image for screen readers and search engines.');
            }
        }
        if (img.complete) {
            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);
        }
    }, [
        src,
        placeholder,
        onLoadRef,
        onLoadingCompleteRef,
        setBlurComplete,
        onError,
        unoptimized,
        sizesInput
    ]);
    const ref = (0, _usemergedref.useMergedRef)(forwardedRef, ownRef);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
        ...rest,
        ...getDynamicProps(fetchPriority),
        // It's intended to keep `loading` before `src` because React updates
        // props in order which causes Safari/Firefox to not lazy load properly.
        // See https://github.com/facebook/react/issues/25883
        loading: loading,
        width: width,
        height: height,
        decoding: decoding,
        "data-nimg": fill ? 'fill' : '1',
        className: className,
        style: style,
        // It's intended to keep `src` the last attribute because React updates
        // attributes in order. If we keep `src` the first one, Safari will
        // immediately start to fetch `src`, before `sizes` and `srcSet` are even
        // updated by React. That causes multiple unnecessary requests if `srcSet`
        // and `sizes` are defined.
        // This bug cannot be reproduced in Chrome or Firefox.
        sizes: sizes,
        srcSet: srcSet,
        src: src,
        ref: ref,
        onLoad: (event)=>{
            const img = event.currentTarget;
            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);
        },
        onError: (event)=>{
            // if the real image fails to load, this will ensure "alt" is visible
            setShowAltText(true);
            if (placeholder !== 'empty') {
                // If the real image fails to load, this will still remove the placeholder.
                setBlurComplete(true);
            }
            if (onError) {
                onError(event);
            }
        }
    });
});
function ImagePreload(param) {
    let { isAppRouter, imgAttributes } = param;
    const opts = {
        as: 'image',
        imageSrcSet: imgAttributes.srcSet,
        imageSizes: imgAttributes.sizes,
        crossOrigin: imgAttributes.crossOrigin,
        referrerPolicy: imgAttributes.referrerPolicy,
        ...getDynamicProps(imgAttributes.fetchPriority)
    };
    if (isAppRouter && _reactdom.default.preload) {
        // See https://github.com/facebook/react/pull/26940
        _reactdom.default.preload(imgAttributes.src, opts);
        return null;
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_head.default, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("link", {
            rel: "preload",
            // Note how we omit the `href` attribute, as it would only be relevant
            // for browsers that do not support `imagesrcset`, and in those cases
            // it would cause the incorrect image to be preloaded.
            //
            // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset
            href: imgAttributes.srcSet ? undefined : imgAttributes.src,
            ...opts
        }, '__nimg-' + imgAttributes.src + imgAttributes.srcSet + imgAttributes.sizes)
    });
}
const Image = /*#__PURE__*/ (0, _react.forwardRef)((props, forwardedRef)=>{
    const pagesRouter = (0, _react.useContext)(_routercontextsharedruntime.RouterContext);
    // We're in the app directory if there is no pages router.
    const isAppRouter = !pagesRouter;
    const configContext = (0, _react.useContext)(_imageconfigcontextsharedruntime.ImageConfigContext);
    const config = (0, _react.useMemo)(()=>{
        var _c_qualities;
        const c = configEnv || configContext || _imageconfig.imageConfigDefault;
        const allSizes = [
            ...c.deviceSizes,
            ...c.imageSizes
        ].sort((a, b)=>a - b);
        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);
        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);
        return {
            ...c,
            allSizes,
            deviceSizes,
            qualities
        };
    }, [
        configContext
    ]);
    const { onLoad, onLoadingComplete } = props;
    const onLoadRef = (0, _react.useRef)(onLoad);
    (0, _react.useEffect)(()=>{
        onLoadRef.current = onLoad;
    }, [
        onLoad
    ]);
    const onLoadingCompleteRef = (0, _react.useRef)(onLoadingComplete);
    (0, _react.useEffect)(()=>{
        onLoadingCompleteRef.current = onLoadingComplete;
    }, [
        onLoadingComplete
    ]);
    const [blurComplete, setBlurComplete] = (0, _react.useState)(false);
    const [showAltText, setShowAltText] = (0, _react.useState)(false);
    const { props: imgAttributes, meta: imgMeta } = (0, _getimgprops.getImgProps)(props, {
        defaultLoader: _imageloader.default,
        imgConf: config,
        blurComplete,
        showAltText
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(ImageElement, {
                ...imgAttributes,
                unoptimized: imgMeta.unoptimized,
                placeholder: imgMeta.placeholder,
                fill: imgMeta.fill,
                onLoadRef: onLoadRef,
                onLoadingCompleteRef: onLoadingCompleteRef,
                setBlurComplete: setBlurComplete,
                setShowAltText: setShowAltText,
                sizesInput: props.sizes,
                ref: forwardedRef
            }),
            imgMeta.priority ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ImagePreload, {
                isAppRouter: isAppRouter,
                imgAttributes: imgAttributes
            }) : null
        ]
    });
});
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=image-component.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/router/utils/querystring.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    assign: null,
    searchParamsToUrlQuery: null,
    urlQueryToSearchParams: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    assign: function() {
        return assign;
    },
    searchParamsToUrlQuery: function() {
        return searchParamsToUrlQuery;
    },
    urlQueryToSearchParams: function() {
        return urlQueryToSearchParams;
    }
});
function searchParamsToUrlQuery(searchParams) {
    const query = {};
    for (const [key, value] of searchParams.entries()){
        const existing = query[key];
        if (typeof existing === 'undefined') {
            query[key] = value;
        } else if (Array.isArray(existing)) {
            existing.push(value);
        } else {
            query[key] = [
                existing,
                value
            ];
        }
    }
    return query;
}
function stringifyUrlQueryParam(param) {
    if (typeof param === 'string') {
        return param;
    }
    if (typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
        return String(param);
    } else {
        return '';
    }
}
function urlQueryToSearchParams(query) {
    const searchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query)){
        if (Array.isArray(value)) {
            for (const item of value){
                searchParams.append(key, stringifyUrlQueryParam(item));
            }
        } else {
            searchParams.set(key, stringifyUrlQueryParam(value));
        }
    }
    return searchParams;
}
function assign(target) {
    for(var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        searchParamsList[_key - 1] = arguments[_key];
    }
    for (const searchParams of searchParamsList){
        for (const key of searchParams.keys()){
            target.delete(key);
        }
        for (const [key, value] of searchParams.entries()){
            target.append(key, value);
        }
    }
    return target;
} //# sourceMappingURL=querystring.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/router/utils/format-url.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
// Format function modified from nodejs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    formatUrl: null,
    formatWithValidation: null,
    urlObjectKeys: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatUrl: function() {
        return formatUrl;
    },
    formatWithValidation: function() {
        return formatWithValidation;
    },
    urlObjectKeys: function() {
        return urlObjectKeys;
    }
});
const _interop_require_wildcard = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)");
const _querystring = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/router/utils/querystring.js [app-client] (ecmascript)"));
const slashedProtocols = /https?|ftp|gopher|file/;
function formatUrl(urlObj) {
    let { auth, hostname } = urlObj;
    let protocol = urlObj.protocol || '';
    let pathname = urlObj.pathname || '';
    let hash = urlObj.hash || '';
    let query = urlObj.query || '';
    let host = false;
    auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';
    if (urlObj.host) {
        host = auth + urlObj.host;
    } else if (hostname) {
        host = auth + (~hostname.indexOf(':') ? "[" + hostname + "]" : hostname);
        if (urlObj.port) {
            host += ':' + urlObj.port;
        }
    }
    if (query && typeof query === 'object') {
        query = String(_querystring.urlQueryToSearchParams(query));
    }
    let search = urlObj.search || query && "?" + query || '';
    if (protocol && !protocol.endsWith(':')) protocol += ':';
    if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
    } else if (!host) {
        host = '';
    }
    if (hash && hash[0] !== '#') hash = '#' + hash;
    if (search && search[0] !== '?') search = '?' + search;
    pathname = pathname.replace(/[?#]/g, encodeURIComponent);
    search = search.replace('#', '%23');
    return "" + protocol + host + pathname + search + hash;
}
const urlObjectKeys = [
    'auth',
    'hash',
    'host',
    'hostname',
    'href',
    'path',
    'pathname',
    'port',
    'protocol',
    'query',
    'search',
    'slashes'
];
function formatWithValidation(url) {
    if ("TURBOPACK compile-time truthy", 1) {
        if (url !== null && typeof url === 'object') {
            Object.keys(url).forEach((key)=>{
                if (!urlObjectKeys.includes(key)) {
                    console.warn("Unknown key passed via urlObject into url.format: " + key);
                }
            });
        }
    }
    return formatUrl(url);
} //# sourceMappingURL=format-url.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/utils.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    DecodeError: null,
    MiddlewareNotFoundError: null,
    MissingStaticPage: null,
    NormalizeError: null,
    PageNotFoundError: null,
    SP: null,
    ST: null,
    WEB_VITALS: null,
    execOnce: null,
    getDisplayName: null,
    getLocationOrigin: null,
    getURL: null,
    isAbsoluteUrl: null,
    isResSent: null,
    loadGetInitialProps: null,
    normalizeRepeatedSlashes: null,
    stringifyError: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DecodeError: function() {
        return DecodeError;
    },
    MiddlewareNotFoundError: function() {
        return MiddlewareNotFoundError;
    },
    MissingStaticPage: function() {
        return MissingStaticPage;
    },
    NormalizeError: function() {
        return NormalizeError;
    },
    PageNotFoundError: function() {
        return PageNotFoundError;
    },
    SP: function() {
        return SP;
    },
    ST: function() {
        return ST;
    },
    WEB_VITALS: function() {
        return WEB_VITALS;
    },
    execOnce: function() {
        return execOnce;
    },
    getDisplayName: function() {
        return getDisplayName;
    },
    getLocationOrigin: function() {
        return getLocationOrigin;
    },
    getURL: function() {
        return getURL;
    },
    isAbsoluteUrl: function() {
        return isAbsoluteUrl;
    },
    isResSent: function() {
        return isResSent;
    },
    loadGetInitialProps: function() {
        return loadGetInitialProps;
    },
    normalizeRepeatedSlashes: function() {
        return normalizeRepeatedSlashes;
    },
    stringifyError: function() {
        return stringifyError;
    }
});
const WEB_VITALS = [
    'CLS',
    'FCP',
    'FID',
    'INP',
    'LCP',
    'TTFB'
];
function execOnce(fn) {
    let used = false;
    let result;
    return function() {
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
            args[_key] = arguments[_key];
        }
        if (!used) {
            used = true;
            result = fn(...args);
        }
        return result;
    };
}
// Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
// Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
const ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/;
const isAbsoluteUrl = (url)=>ABSOLUTE_URL_REGEX.test(url);
function getLocationOrigin() {
    const { protocol, hostname, port } = window.location;
    return protocol + "//" + hostname + (port ? ':' + port : '');
}
function getURL() {
    const { href } = window.location;
    const origin = getLocationOrigin();
    return href.substring(origin.length);
}
function getDisplayName(Component) {
    return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}
function isResSent(res) {
    return res.finished || res.headersSent;
}
function normalizeRepeatedSlashes(url) {
    const urlParts = url.split('?');
    const urlNoQuery = urlParts[0];
    return urlNoQuery // first we replace any non-encoded backslashes with forward
    // then normalize repeated forward slashes
    .replace(/\\/g, '/').replace(/\/\/+/g, '/') + (urlParts[1] ? "?" + urlParts.slice(1).join('?') : '');
}
async function loadGetInitialProps(App, ctx) {
    if ("TURBOPACK compile-time truthy", 1) {
        var _App_prototype;
        if ((_App_prototype = App.prototype) == null ? void 0 : _App_prototype.getInitialProps) {
            const message = '"' + getDisplayName(App) + '.getInitialProps()" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.';
            throw Object.defineProperty(new Error(message), "__NEXT_ERROR_CODE", {
                value: "E394",
                enumerable: false,
                configurable: true
            });
        }
    }
    // when called from _app `ctx` is nested in `ctx`
    const res = ctx.res || ctx.ctx && ctx.ctx.res;
    if (!App.getInitialProps) {
        if (ctx.ctx && ctx.Component) {
            // @ts-ignore pageProps default
            return {
                pageProps: await loadGetInitialProps(ctx.Component, ctx.ctx)
            };
        }
        return {};
    }
    const props = await App.getInitialProps(ctx);
    if (res && isResSent(res)) {
        return props;
    }
    if (!props) {
        const message = '"' + getDisplayName(App) + '.getInitialProps()" should resolve to an object. But found "' + props + '" instead.';
        throw Object.defineProperty(new Error(message), "__NEXT_ERROR_CODE", {
            value: "E394",
            enumerable: false,
            configurable: true
        });
    }
    if ("TURBOPACK compile-time truthy", 1) {
        if (Object.keys(props).length === 0 && !ctx.ctx) {
            console.warn("" + getDisplayName(App) + " returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps");
        }
    }
    return props;
}
const SP = typeof performance !== 'undefined';
const ST = SP && [
    'mark',
    'measure',
    'getEntriesByName'
].every((method)=>typeof performance[method] === 'function');
class DecodeError extends Error {
}
class NormalizeError extends Error {
}
class PageNotFoundError extends Error {
    constructor(page){
        super();
        this.code = 'ENOENT';
        this.name = 'PageNotFoundError';
        this.message = "Cannot find module for page: " + page;
    }
}
class MissingStaticPage extends Error {
    constructor(page, message){
        super();
        this.message = "Failed to load static file for page: " + page + " " + message;
    }
}
class MiddlewareNotFoundError extends Error {
    constructor(){
        super();
        this.code = 'ENOENT';
        this.message = "Cannot find the middleware module";
    }
}
function stringifyError(error) {
    return JSON.stringify({
        message: error.message,
        stack: error.stack
    });
} //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/app-dir/link.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _jsxruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const _formaturl = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/router/utils/format-url.js [app-client] (ecmascript)");
const _approutercontextsharedruntime = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js [app-client] (ecmascript)");
const _routerreducertypes = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/components/router-reducer/router-reducer-types.js [app-client] (ecmascript)");
const _usemergedref = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/use-merged-ref.js [app-client] (ecmascript)");
const _utils = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/utils.js [app-client] (ecmascript)");
const _addbasepath = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/add-base-path.js [app-client] (ecmascript)");
const _warnonce = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/utils/warn-once.js [app-client] (ecmascript)");
const _links = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/components/links.js [app-client] (ecmascript)");
function isModifiedEvent(event) {
    const eventTarget = event.currentTarget;
    const target = eventTarget.getAttribute('target');
    return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download
    event.nativeEvent && event.nativeEvent.which === 2;
}
function linkClicked(e, router, href, as, replace, shallow, scroll) {
    const { nodeName } = e.currentTarget;
    // anchors inside an svg have a lowercase nodeName
    const isAnchorNodeName = nodeName.toUpperCase() === 'A';
    if (isAnchorNodeName && isModifiedEvent(e)) {
        // ignore click for browser’s default behavior
        return;
    }
    e.preventDefault();
    const navigate = ()=>{
        // If the router is an NextRouter instance it will have `beforePopState`
        const routerScroll = scroll != null ? scroll : true;
        if ('beforePopState' in router) {
            router[replace ? 'replace' : 'push'](href, as, {
                shallow,
                scroll: routerScroll
            });
        } else {
            router[replace ? 'replace' : 'push'](as || href, {
                scroll: routerScroll
            });
        }
    };
    _react.default.startTransition(navigate);
}
function formatStringOrUrl(urlObjOrString) {
    if (typeof urlObjOrString === 'string') {
        return urlObjOrString;
    }
    return (0, _formaturl.formatUrl)(urlObjOrString);
}
/**
 * A React component that extends the HTML `<a>` element to provide
 * [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)
 * and client-side navigation. This is the primary way to navigate between routes in Next.js.
 *
 * @remarks
 * - Prefetching is only enabled in production.
 *
 * @see https://nextjs.org/docs/app/api-reference/components/link
 */ const Link = /*#__PURE__*/ _react.default.forwardRef(function LinkComponent(props, forwardedRef) {
    let children;
    const { href: hrefProp, as: asProp, children: childrenProp, prefetch: prefetchProp = null, passHref, replace, shallow, scroll, onClick, onMouseEnter: onMouseEnterProp, onTouchStart: onTouchStartProp, legacyBehavior = false, ...restProps } = props;
    children = childrenProp;
    if (legacyBehavior && (typeof children === 'string' || typeof children === 'number')) {
        children = /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
            children: children
        });
    }
    const router = _react.default.useContext(_approutercontextsharedruntime.AppRouterContext);
    const prefetchEnabled = prefetchProp !== false;
    /**
     * The possible states for prefetch are:
     * - null: this is the default "auto" mode, where we will prefetch partially if the link is in the viewport
     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially
     * - false: we will not prefetch if in the viewport at all
     */ const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;
    if ("TURBOPACK compile-time truthy", 1) {
        function createPropError(args) {
            return Object.defineProperty(new Error("Failed prop type: The prop `" + args.key + "` expects a " + args.expected + " in `<Link>`, but got `" + args.actual + "` instead." + (typeof window !== 'undefined' ? "\nOpen your browser's console to view the Component stack trace." : '')), "__NEXT_ERROR_CODE", {
                value: "E319",
                enumerable: false,
                configurable: true
            });
        }
        // TypeScript trick for type-guarding:
        const requiredPropsGuard = {
            href: true
        };
        const requiredProps = Object.keys(requiredPropsGuard);
        requiredProps.forEach((key)=>{
            if (key === 'href') {
                if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {
                    throw createPropError({
                        key,
                        expected: '`string` or `object`',
                        actual: props[key] === null ? 'null' : typeof props[key]
                    });
                }
            } else {
                // TypeScript trick for type-guarding:
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const _ = key;
            }
        });
        // TypeScript trick for type-guarding:
        const optionalPropsGuard = {
            as: true,
            replace: true,
            scroll: true,
            shallow: true,
            passHref: true,
            prefetch: true,
            onClick: true,
            onMouseEnter: true,
            onTouchStart: true,
            legacyBehavior: true
        };
        const optionalProps = Object.keys(optionalPropsGuard);
        optionalProps.forEach((key)=>{
            const valType = typeof props[key];
            if (key === 'as') {
                if (props[key] && valType !== 'string' && valType !== 'object') {
                    throw createPropError({
                        key,
                        expected: '`string` or `object`',
                        actual: valType
                    });
                }
            } else if (key === 'onClick' || key === 'onMouseEnter' || key === 'onTouchStart') {
                if (props[key] && valType !== 'function') {
                    throw createPropError({
                        key,
                        expected: '`function`',
                        actual: valType
                    });
                }
            } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch' || key === 'legacyBehavior') {
                if (props[key] != null && valType !== 'boolean') {
                    throw createPropError({
                        key,
                        expected: '`boolean`',
                        actual: valType
                    });
                }
            } else {
                // TypeScript trick for type-guarding:
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const _ = key;
            }
        });
    }
    if ("TURBOPACK compile-time truthy", 1) {
        if (props.locale) {
            (0, _warnonce.warnOnce)('The `locale` prop is not supported in `next/link` while using the `app` router. Read more about app router internalization: https://nextjs.org/docs/app/building-your-application/routing/internationalization');
        }
        if (!asProp) {
            let href;
            if (typeof hrefProp === 'string') {
                href = hrefProp;
            } else if (typeof hrefProp === 'object' && typeof hrefProp.pathname === 'string') {
                href = hrefProp.pathname;
            }
            if (href) {
                const hasDynamicSegment = href.split('/').some((segment)=>segment.startsWith('[') && segment.endsWith(']'));
                if (hasDynamicSegment) {
                    throw Object.defineProperty(new Error("Dynamic href `" + href + "` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href"), "__NEXT_ERROR_CODE", {
                        value: "E267",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
        }
    }
    const { href, as } = _react.default.useMemo({
        "Link.LinkComponent.useMemo": ()=>{
            const resolvedHref = formatStringOrUrl(hrefProp);
            return {
                href: resolvedHref,
                as: asProp ? formatStringOrUrl(asProp) : resolvedHref
            };
        }
    }["Link.LinkComponent.useMemo"], [
        hrefProp,
        asProp
    ]);
    // This will return the first child, if multiple are provided it will throw an error
    let child;
    if (legacyBehavior) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (onClick) {
                console.warn('"onClick" was passed to <Link> with `href` of `' + hrefProp + '` but "legacyBehavior" was set. The legacy behavior requires onClick be set on the child of next/link');
            }
            if (onMouseEnterProp) {
                console.warn('"onMouseEnter" was passed to <Link> with `href` of `' + hrefProp + '` but "legacyBehavior" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');
            }
            try {
                child = _react.default.Children.only(children);
            } catch (err) {
                if (!children) {
                    throw Object.defineProperty(new Error("No children were passed to <Link> with `href` of `" + hrefProp + "` but one child is required https://nextjs.org/docs/messages/link-no-children"), "__NEXT_ERROR_CODE", {
                        value: "E320",
                        enumerable: false,
                        configurable: true
                    });
                }
                throw Object.defineProperty(new Error("Multiple children were passed to <Link> with `href` of `" + hrefProp + "` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children" + (typeof window !== 'undefined' ? " \nOpen your browser's console to view the Component stack trace." : '')), "__NEXT_ERROR_CODE", {
                    value: "E266",
                    enumerable: false,
                    configurable: true
                });
            }
        } else {
            "TURBOPACK unreachable";
        }
    } else {
        if ("TURBOPACK compile-time truthy", 1) {
            if ((children == null ? void 0 : children.type) === 'a') {
                throw Object.defineProperty(new Error('Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor'), "__NEXT_ERROR_CODE", {
                    value: "E209",
                    enumerable: false,
                    configurable: true
                });
            }
        }
    }
    const childRef = legacyBehavior ? child && typeof child === 'object' && child.ref : forwardedRef;
    // Use a callback ref to attach an IntersectionObserver to the anchor tag on
    // mount. In the future we will also use this to keep track of all the
    // currently mounted <Link> instances, e.g. so we can re-prefetch them after
    // a revalidation or refresh.
    const observeLinkVisibilityOnMount = _react.default.useCallback({
        "Link.LinkComponent.useCallback[observeLinkVisibilityOnMount]": (element)=>{
            if (prefetchEnabled && router !== null) {
                (0, _links.mountLinkInstance)(element, href, router, appPrefetchKind);
            }
            return ({
                "Link.LinkComponent.useCallback[observeLinkVisibilityOnMount]": ()=>{
                    (0, _links.unmountLinkInstance)(element);
                }
            })["Link.LinkComponent.useCallback[observeLinkVisibilityOnMount]"];
        }
    }["Link.LinkComponent.useCallback[observeLinkVisibilityOnMount]"], [
        prefetchEnabled,
        href,
        router,
        appPrefetchKind
    ]);
    const mergedRef = (0, _usemergedref.useMergedRef)(observeLinkVisibilityOnMount, childRef);
    const childProps = {
        ref: mergedRef,
        onClick (e) {
            if ("TURBOPACK compile-time truthy", 1) {
                if (!e) {
                    throw Object.defineProperty(new Error('Component rendered inside next/link has to pass click event to "onClick" prop.'), "__NEXT_ERROR_CODE", {
                        value: "E312",
                        enumerable: false,
                        configurable: true
                    });
                }
            }
            if (!legacyBehavior && typeof onClick === 'function') {
                onClick(e);
            }
            if (legacyBehavior && child.props && typeof child.props.onClick === 'function') {
                child.props.onClick(e);
            }
            if (!router) {
                return;
            }
            if (e.defaultPrevented) {
                return;
            }
            linkClicked(e, router, href, as, replace, shallow, scroll);
        },
        onMouseEnter (e) {
            if (!legacyBehavior && typeof onMouseEnterProp === 'function') {
                onMouseEnterProp(e);
            }
            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === 'function') {
                child.props.onMouseEnter(e);
            }
            if (!router) {
                return;
            }
            if ("TURBOPACK compile-time truthy", 1) {
                return;
            }
            "TURBOPACK unreachable";
        },
        onTouchStart: ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : function onTouchStart(e) {
            if (!legacyBehavior && typeof onTouchStartProp === 'function') {
                onTouchStartProp(e);
            }
            if (legacyBehavior && child.props && typeof child.props.onTouchStart === 'function') {
                child.props.onTouchStart(e);
            }
            if (!router) {
                return;
            }
            if (!prefetchEnabled) {
                return;
            }
            (0, _links.onNavigationIntent)(e.currentTarget);
        }
    };
    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is
    // defined, we specify the current 'href', so that repetition is not needed by the user.
    // If the url is absolute, we can bypass the logic to prepend the basePath.
    if ((0, _utils.isAbsoluteUrl)(as)) {
        childProps.href = as;
    } else if (!legacyBehavior || passHref || child.type === 'a' && !('href' in child.props)) {
        childProps.href = (0, _addbasepath.addBasePath)(as);
    }
    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
        ...restProps,
        ...childProps,
        children: children
    });
});
const _default = Link;
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=link.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function getTaskName(type) {
        if (type === REACT_FRAGMENT_TYPE) return "<>";
        if ("object" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE) return "<...>";
        try {
            var name = getComponentNameFromType(type);
            return name ? "<" + name + ">" : "<...>";
        } catch (x) {
            return "<...>";
        }
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.defineProperty(type, "_debugStack", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugStack
        });
        Object.defineProperty(type, "_debugTask", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: debugTask
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {
        var children = config.children;
        if (void 0 !== children) if (isStaticChildren) if (isArrayImpl(children)) {
            for(isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)validateChildKeys(children[isStaticChildren]);
            Object.freeze && Object.freeze(children);
        } else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
        else validateChildKeys(children);
        if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
                return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
            maybeKey = {};
            for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(maybeKey, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, children, self, source, getOwner(), maybeKey, debugStack, debugTask);
    }
    function validateChildKeys(node) {
        "object" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);
    }
    var React = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray;
    new ("function" === typeof WeakMap ? WeakMap : Map)();
    var createTask = console.createTask ? console.createTask : function() {
        return null;
    }, specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var didWarnAboutKeySpread = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {
        return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, Error("react-stack-top-frame"), createTask(getTaskName(type)));
    };
}();
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js [app-client] (ecmascript)");
}
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-external.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    default: null,
    getImageProps: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    getImageProps: function() {
        return getImageProps;
    }
});
const _interop_require_default = __turbopack_context__.r("[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _getimgprops = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/get-img-props.js [app-client] (ecmascript)");
const _imagecomponent = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/client/image-component.js [app-client] (ecmascript)");
const _imageloader = /*#__PURE__*/ _interop_require_default._(__turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-loader.js [app-client] (ecmascript)"));
function getImageProps(imgProps) {
    const { props } = (0, _getimgprops.getImgProps)(imgProps, {
        defaultLoader: _imageloader.default,
        // This is replaced by webpack define plugin
        imgConf: ("TURBOPACK compile-time value", JSON.parse('{"deviceSizes":[640,750,828,1080,1200,1920,2048,3840],"imageSizes":[16,32,48,64,96,128,256,384],"path":"/_next/image","loader":"default","dangerouslyAllowSVG":false,"unoptimized":false,"domains":[],"remotePatterns":[]}'))
    });
    // Normally we don't care about undefined props because we pass to JSX,
    // but this exported function could be used by the end user for anything
    // so we delete undefined props to clean it up a little.
    for (const [key, value] of Object.entries(props)){
        if (value === undefined) {
            delete props[key];
        }
    }
    return {
        props
    };
}
const _default = _imagecomponent.Image; //# sourceMappingURL=image-external.js.map
}}),
"[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/image.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { g: global, d: __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = __turbopack_context__.r("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/shared/lib/image-external.js [app-client] (ecmascript)");
}}),
"[project]/node_modules/.pnpm/recoil@0.7.7_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/recoil/es/index.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, d: __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DefaultValue": (()=>Recoil_index_1),
    "RecoilEnv": (()=>Recoil_index_4),
    "RecoilLoadable": (()=>Recoil_index_3),
    "RecoilRoot": (()=>Recoil_index_5),
    "atom": (()=>Recoil_index_8),
    "atomFamily": (()=>Recoil_index_10),
    "constSelector": (()=>Recoil_index_12),
    "default": (()=>__TURBOPACK__default__export__),
    "errorSelector": (()=>Recoil_index_13),
    "isRecoilValue": (()=>Recoil_index_2),
    "noWait": (()=>Recoil_index_15),
    "readOnlySelector": (()=>Recoil_index_14),
    "retentionZone": (()=>Recoil_index_38),
    "selector": (()=>Recoil_index_9),
    "selectorFamily": (()=>Recoil_index_11),
    "snapshot_UNSTABLE": (()=>Recoil_index_36),
    "useGetRecoilValueInfo_UNSTABLE": (()=>Recoil_index_26),
    "useGotoRecoilSnapshot": (()=>Recoil_index_33),
    "useRecoilBridgeAcrossReactRoots_UNSTABLE": (()=>Recoil_index_7),
    "useRecoilCallback": (()=>Recoil_index_31),
    "useRecoilRefresher_UNSTABLE": (()=>Recoil_index_27),
    "useRecoilSnapshot": (()=>Recoil_index_34),
    "useRecoilState": (()=>Recoil_index_22),
    "useRecoilStateLoadable": (()=>Recoil_index_23),
    "useRecoilState_TRANSITION_SUPPORT_UNSTABLE": (()=>Recoil_index_30),
    "useRecoilStoreID": (()=>Recoil_index_6),
    "useRecoilTransactionObserver_UNSTABLE": (()=>Recoil_index_35),
    "useRecoilTransaction_UNSTABLE": (()=>Recoil_index_32),
    "useRecoilValue": (()=>Recoil_index_20),
    "useRecoilValueLoadable": (()=>Recoil_index_21),
    "useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE": (()=>Recoil_index_28),
    "useRecoilValue_TRANSITION_SUPPORT_UNSTABLE": (()=>Recoil_index_29),
    "useResetRecoilState": (()=>Recoil_index_25),
    "useRetain": (()=>Recoil_index_37),
    "useSetRecoilState": (()=>Recoil_index_24),
    "waitForAll": (()=>Recoil_index_18),
    "waitForAllSettled": (()=>Recoil_index_19),
    "waitForAny": (()=>Recoil_index_17),
    "waitForNone": (()=>Recoil_index_16)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/.pnpm/next@15.2.1_react-dom@19.0.0_react@19.0.0__react@19.0.0/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)");
;
;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function err(message) {
    const error = new Error(message); // In V8, Error objects keep the closure scope chain alive until the
    // err.stack property is accessed.
    if (error.stack === undefined) {
        // IE sets the stack only if error is thrown
        try {
            throw error;
        } catch (_) {} // eslint-disable-line fb-www/no-unused-catch-bindings, no-empty
    }
    return error;
}
var err_1 = err;
// @oss-only
var Recoil_err = err_1;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ // Split declaration and implementation to allow this function to pretend to
// check for actual instance of Promise instead of something with a `then`
// method.
// eslint-disable-next-line no-redeclare
function isPromise(p) {
    return !!p && typeof p.then === 'function';
}
var Recoil_isPromise = isPromise;
function nullthrows(x, message) {
    if (x != null) {
        return x;
    }
    throw Recoil_err(message !== null && message !== void 0 ? message : 'Got unexpected null or undefined');
}
var Recoil_nullthrows = nullthrows;
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class BaseLoadable {
    getValue() {
        throw Recoil_err('BaseLoadable');
    }
    toPromise() {
        throw Recoil_err('BaseLoadable');
    }
    valueMaybe() {
        throw Recoil_err('BaseLoadable');
    }
    valueOrThrow() {
        // $FlowFixMe[prop-missing]
        throw Recoil_err(`Loadable expected value, but in "${this.state}" state`);
    }
    promiseMaybe() {
        throw Recoil_err('BaseLoadable');
    }
    promiseOrThrow() {
        // $FlowFixMe[prop-missing]
        throw Recoil_err(`Loadable expected promise, but in "${this.state}" state`);
    }
    errorMaybe() {
        throw Recoil_err('BaseLoadable');
    }
    errorOrThrow() {
        // $FlowFixMe[prop-missing]
        throw Recoil_err(`Loadable expected error, but in "${this.state}" state`);
    }
    is(other) {
        // $FlowFixMe[prop-missing]
        return other.state === this.state && other.contents === this.contents;
    }
    map(_map) {
        throw Recoil_err('BaseLoadable');
    }
}
class ValueLoadable extends BaseLoadable {
    constructor(value){
        super();
        _defineProperty(this, "state", 'hasValue');
        _defineProperty(this, "contents", void 0);
        this.contents = value;
    }
    getValue() {
        return this.contents;
    }
    toPromise() {
        return Promise.resolve(this.contents);
    }
    valueMaybe() {
        return this.contents;
    }
    valueOrThrow() {
        return this.contents;
    }
    promiseMaybe() {
        return undefined;
    }
    errorMaybe() {
        return undefined;
    }
    map(map) {
        try {
            const next = map(this.contents);
            return Recoil_isPromise(next) ? loadableWithPromise(next) : isLoadable(next) ? next : loadableWithValue(next);
        } catch (e) {
            return Recoil_isPromise(e) ? // errors and subsequent retries will be handled in 'loading' case
            // $FlowFixMe[prop-missing]
            loadableWithPromise(e.next(()=>this.map(map))) : loadableWithError(e);
        }
    }
}
class ErrorLoadable extends BaseLoadable {
    constructor(error){
        super();
        _defineProperty(this, "state", 'hasError');
        _defineProperty(this, "contents", void 0);
        this.contents = error;
    }
    getValue() {
        throw this.contents;
    }
    toPromise() {
        return Promise.reject(this.contents);
    }
    valueMaybe() {
        return undefined;
    }
    promiseMaybe() {
        return undefined;
    }
    errorMaybe() {
        return this.contents;
    }
    errorOrThrow() {
        return this.contents;
    }
    map(_map) {
        // $FlowIssue[incompatible-return]
        return this;
    }
}
class LoadingLoadable extends BaseLoadable {
    constructor(promise){
        super();
        _defineProperty(this, "state", 'loading');
        _defineProperty(this, "contents", void 0);
        this.contents = promise;
    }
    getValue() {
        throw this.contents;
    }
    toPromise() {
        return this.contents;
    }
    valueMaybe() {
        return undefined;
    }
    promiseMaybe() {
        return this.contents;
    }
    promiseOrThrow() {
        return this.contents;
    }
    errorMaybe() {
        return undefined;
    }
    map(map) {
        return loadableWithPromise(this.contents.then((value)=>{
            const next = map(value);
            if (isLoadable(next)) {
                const nextLoadable = next;
                switch(nextLoadable.state){
                    case 'hasValue':
                        return nextLoadable.contents;
                    case 'hasError':
                        throw nextLoadable.contents;
                    case 'loading':
                        return nextLoadable.contents;
                }
            } // $FlowIssue[incompatible-return]
            return next;
        }) // $FlowFixMe[incompatible-call]
        .catch((e)=>{
            if (Recoil_isPromise(e)) {
                // we were "suspended," try again
                return e.then(()=>this.map(map).contents);
            }
            throw e;
        }));
    }
}
function loadableWithValue(value) {
    return Object.freeze(new ValueLoadable(value));
}
function loadableWithError(error) {
    return Object.freeze(new ErrorLoadable(error));
}
function loadableWithPromise(promise) {
    return Object.freeze(new LoadingLoadable(promise));
}
function loadableLoading() {
    return Object.freeze(new LoadingLoadable(new Promise(()=>{})));
}
function loadableAllArray(inputs) {
    return inputs.every((i)=>i.state === 'hasValue') ? loadableWithValue(inputs.map((i)=>i.contents)) : inputs.some((i)=>i.state === 'hasError') ? loadableWithError(Recoil_nullthrows(inputs.find((i)=>i.state === 'hasError'), 'Invalid loadable passed to loadableAll').contents) : loadableWithPromise(Promise.all(inputs.map((i)=>i.contents)));
}
function loadableAll(inputs) {
    const unwrapedInputs = Array.isArray(inputs) ? inputs : Object.getOwnPropertyNames(inputs).map((key)=>inputs[key]);
    const normalizedInputs = unwrapedInputs.map((x)=>isLoadable(x) ? x : Recoil_isPromise(x) ? loadableWithPromise(x) : loadableWithValue(x));
    const output = loadableAllArray(normalizedInputs);
    return Array.isArray(inputs) ? output : // $FlowIssue[incompatible-call]
    output.map((outputs)=>Object.getOwnPropertyNames(inputs).reduce((out, key, idx)=>({
                ...out,
                [key]: outputs[idx]
            }), {}));
}
function isLoadable(x) {
    return x instanceof BaseLoadable;
}
const LoadableStaticInterface = {
    of: (value)=>Recoil_isPromise(value) ? loadableWithPromise(value) : isLoadable(value) ? value : loadableWithValue(value),
    error: (error)=>loadableWithError(error),
    // $FlowIssue[incompatible-return]
    loading: ()=>loadableLoading(),
    // $FlowIssue[unclear-type]
    all: loadableAll,
    isLoadable
};
var Recoil_Loadable = {
    loadableWithValue,
    loadableWithError,
    loadableWithPromise,
    loadableLoading,
    loadableAll,
    isLoadable,
    RecoilLoadable: LoadableStaticInterface
};
var Recoil_Loadable_1 = Recoil_Loadable.loadableWithValue;
var Recoil_Loadable_2 = Recoil_Loadable.loadableWithError;
var Recoil_Loadable_3 = Recoil_Loadable.loadableWithPromise;
var Recoil_Loadable_4 = Recoil_Loadable.loadableLoading;
var Recoil_Loadable_5 = Recoil_Loadable.loadableAll;
var Recoil_Loadable_6 = Recoil_Loadable.isLoadable;
var Recoil_Loadable_7 = Recoil_Loadable.RecoilLoadable;
var Recoil_Loadable$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    loadableWithValue: Recoil_Loadable_1,
    loadableWithError: Recoil_Loadable_2,
    loadableWithPromise: Recoil_Loadable_3,
    loadableLoading: Recoil_Loadable_4,
    loadableAll: Recoil_Loadable_5,
    isLoadable: Recoil_Loadable_6,
    RecoilLoadable: Recoil_Loadable_7
});
const env = {
    RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED: true,
    // Note: RECOIL_GKS_ENABLED settings will only be honored in OSS builds of Recoil
    RECOIL_GKS_ENABLED: new Set([
        'recoil_hamt_2020',
        'recoil_sync_external_store',
        'recoil_suppress_rerender_in_callback',
        'recoil_memory_managament_2020'
    ])
};
function readProcessEnvBooleanFlag(name, set) {
    var _process$env$name, _process$env$name$toL;
    const sanitizedValue = (_process$env$name = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env[name]) === null || _process$env$name === void 0 ? void 0 : (_process$env$name$toL = _process$env$name.toLowerCase()) === null || _process$env$name$toL === void 0 ? void 0 : _process$env$name$toL.trim();
    if (sanitizedValue == null || sanitizedValue === '') {
        return;
    }
    const allowedValues = [
        'true',
        'false'
    ];
    if (!allowedValues.includes(sanitizedValue)) {
        throw Recoil_err(`process.env.${name} value must be 'true', 'false', or empty: ${sanitizedValue}`);
    }
    set(sanitizedValue === 'true');
}
function readProcessEnvStringArrayFlag(name, set) {
    var _process$env$name2;
    const sanitizedValue = (_process$env$name2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env[name]) === null || _process$env$name2 === void 0 ? void 0 : _process$env$name2.trim();
    if (sanitizedValue == null || sanitizedValue === '') {
        return;
    }
    set(sanitizedValue.split(/\s*,\s*|\s+/));
}
/**
 * Allow NodeJS/NextJS/etc to set the initial state through process.env variable
 * Note:  we don't assume 'process' is available in all runtime environments
 *
 * @see https://github.com/facebookexperimental/Recoil/issues/733
 */ function applyProcessEnvFlagOverrides() {
    var _process;
    // note: this check is needed in addition to the check below, runtime error will occur without it!
    // eslint-disable-next-line fb-www/typeof-undefined
    if (typeof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] === 'undefined') {
        return;
    }
    if (((_process = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]) === null || _process === void 0 ? void 0 : _process.env) == null) {
        return;
    }
    readProcessEnvBooleanFlag('RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED', (value)=>{
        env.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED = value;
    });
    readProcessEnvStringArrayFlag('RECOIL_GKS_ENABLED', (value)=>{
        value.forEach((gk)=>{
            env.RECOIL_GKS_ENABLED.add(gk);
        });
    });
}
applyProcessEnvFlagOverrides();
var Recoil_RecoilEnv = env;
function Recoil_gkx_OSS(gk) {
    return Recoil_RecoilEnv.RECOIL_GKS_ENABLED.has(gk);
}
Recoil_gkx_OSS.setPass = (gk)=>{
    Recoil_RecoilEnv.RECOIL_GKS_ENABLED.add(gk);
};
Recoil_gkx_OSS.setFail = (gk)=>{
    Recoil_RecoilEnv.RECOIL_GKS_ENABLED.delete(gk);
};
Recoil_gkx_OSS.clear = ()=>{
    Recoil_RecoilEnv.RECOIL_GKS_ENABLED.clear();
};
var Recoil_gkx = Recoil_gkx_OSS; // @oss-only
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function recoverableViolation(message, _projectName, { error } = {}) {
    if ("TURBOPACK compile-time truthy", 1) {
        console.error(message, error);
    }
    return null;
}
var recoverableViolation_1 = recoverableViolation;
// @oss-only
var Recoil_recoverableViolation = recoverableViolation_1;
var _createMutableSource, _useMutableSource, _useSyncExternalStore;
const createMutableSource = (_createMutableSource = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].unstable_createMutableSource;
const useMutableSource = (_useMutableSource = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].unstable_useMutableSource; // https://github.com/reactwg/react-18/discussions/86
const useSyncExternalStore = (_useSyncExternalStore = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useSyncExternalStore) !== null && _useSyncExternalStore !== void 0 ? _useSyncExternalStore : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].unstable_useSyncExternalStore;
let ReactRendererVersionMismatchWarnOnce = false; // Check if the current renderer supports `useSyncExternalStore()`.
// Since React goes through a proxy dispatcher and the current renderer can
// change we can't simply check if `React.useSyncExternalStore()` is defined.
function currentRendererSupportsUseSyncExternalStore() {
    var _ReactCurrentDispatch;
    // $FlowFixMe[incompatible-use]
    const { ReactCurrentDispatcher, ReactCurrentOwner } = /* $FlowFixMe[prop-missing] This workaround was approved as a safer mechanism
   * to detect if the current renderer supports useSyncExternalStore()
   * https://fb.workplace.com/groups/reactjs/posts/9558682330846963/ */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    const dispatcher = (_ReactCurrentDispatch = ReactCurrentDispatcher === null || ReactCurrentDispatcher === void 0 ? void 0 : ReactCurrentDispatcher.current) !== null && _ReactCurrentDispatch !== void 0 ? _ReactCurrentDispatch : ReactCurrentOwner.currentDispatcher;
    const isUseSyncExternalStoreSupported = dispatcher.useSyncExternalStore != null;
    if (useSyncExternalStore && !isUseSyncExternalStoreSupported && !ReactRendererVersionMismatchWarnOnce) {
        ReactRendererVersionMismatchWarnOnce = true;
        Recoil_recoverableViolation('A React renderer without React 18+ API support is being used with React 18+.');
    }
    return isUseSyncExternalStoreSupported;
}
/**
 * mode: The React API and approach to use for syncing state with React
 * early: Re-renders from Recoil updates occur:
 *    1) earlier
 *    2) in sync with React updates in the same batch
 *    3) before transaction observers instead of after.
 * concurrent: Is the current mode compatible with Concurrent Mode and useTransition()
 */ function reactMode() {
    // NOTE: This mode is currently broken with some Suspense cases
    // see Recoil_selector-test.js
    if (Recoil_gkx('recoil_transition_support')) {
        return {
            mode: 'TRANSITION_SUPPORT',
            early: true,
            concurrent: true
        };
    }
    if (Recoil_gkx('recoil_sync_external_store') && useSyncExternalStore != null) {
        return {
            mode: 'SYNC_EXTERNAL_STORE',
            early: true,
            concurrent: false
        };
    }
    if (Recoil_gkx('recoil_mutable_source') && useMutableSource != null && typeof window !== 'undefined' && !window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE) {
        return Recoil_gkx('recoil_suppress_rerender_in_callback') ? {
            mode: 'MUTABLE_SOURCE',
            early: true,
            concurrent: true
        } : {
            mode: 'MUTABLE_SOURCE',
            early: false,
            concurrent: false
        };
    }
    return Recoil_gkx('recoil_suppress_rerender_in_callback') ? {
        mode: 'LEGACY',
        early: true,
        concurrent: false
    } : {
        mode: 'LEGACY',
        early: false,
        concurrent: false
    };
} // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:
function isFastRefreshEnabled() {
    // @fb-only: const {isAcceptingUpdate} = require('__debug');
    // @fb-only: return typeof isAcceptingUpdate === 'function' && isAcceptingUpdate();
    return false; // @oss-only
}
var Recoil_ReactMode = {
    createMutableSource,
    useMutableSource,
    useSyncExternalStore,
    currentRendererSupportsUseSyncExternalStore,
    reactMode,
    isFastRefreshEnabled
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ // eslint-disable-next-line no-unused-vars
class AbstractRecoilValue {
    constructor(newKey){
        _defineProperty(this, "key", void 0);
        this.key = newKey;
    }
    toJSON() {
        return {
            key: this.key
        };
    }
}
class RecoilState extends AbstractRecoilValue {
}
class RecoilValueReadOnly extends AbstractRecoilValue {
}
function isRecoilValue(x) {
    return x instanceof RecoilState || x instanceof RecoilValueReadOnly;
}
var Recoil_RecoilValue = {
    AbstractRecoilValue,
    RecoilState,
    RecoilValueReadOnly,
    isRecoilValue
};
var Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;
var Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;
var Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;
var Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;
var Recoil_RecoilValue$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    AbstractRecoilValue: Recoil_RecoilValue_1,
    RecoilState: Recoil_RecoilValue_2,
    RecoilValueReadOnly: Recoil_RecoilValue_3,
    isRecoilValue: Recoil_RecoilValue_4
});
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function sprintf(format, ...args) {
    let index = 0;
    return format.replace(/%s/g, ()=>String(args[index++]));
}
var sprintf_1 = sprintf;
function expectationViolation(format, ...args) {
    if ("TURBOPACK compile-time truthy", 1) {
        const message = sprintf_1.call(null, format, ...args);
        const error = new Error(message);
        error.name = 'Expectation Violation';
        console.error(error);
    }
}
var expectationViolation_1 = expectationViolation;
// @oss-only
var Recoil_expectationViolation = expectationViolation_1;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Creates a new iterable whose output is generated by passing the input
 * iterable's values through the mapper function.
 */ function mapIterable(iterable, callback) {
    // Use generator to create iterable/iterator
    return function*() {
        let index = 0;
        for (const value of iterable){
            yield callback(value, index++);
        }
    }();
}
var Recoil_mapIterable = mapIterable;
const { isFastRefreshEnabled: isFastRefreshEnabled$1 } = Recoil_ReactMode;
class DefaultValue {
}
const DEFAULT_VALUE = new DefaultValue();
// flowlint-next-line unclear-type:off
const nodes = new Map(); // flowlint-next-line unclear-type:off
const recoilValues = new Map();
/* eslint-disable no-redeclare */ function recoilValuesForKeys(keys) {
    return Recoil_mapIterable(keys, (key)=>Recoil_nullthrows(recoilValues.get(key)));
}
function checkForDuplicateAtomKey(key) {
    if (nodes.has(key)) {
        const message = `Duplicate atom key "${key}". This is a FATAL ERROR in
      production. But it is safe to ignore this warning if it occurred because of
      hot module replacement.`;
        if ("TURBOPACK compile-time truthy", 1) {
            // TODO Figure this out for open-source
            if (!isFastRefreshEnabled$1()) {
                Recoil_expectationViolation(message, 'recoil');
            }
        } else {
            "TURBOPACK unreachable";
        }
    }
}
function registerNode(node) {
    if (Recoil_RecoilEnv.RECOIL_DUPLICATE_ATOM_KEY_CHECKING_ENABLED) {
        checkForDuplicateAtomKey(node.key);
    }
    nodes.set(node.key, node);
    const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);
    recoilValues.set(node.key, recoilValue);
    return recoilValue;
}
/* eslint-enable no-redeclare */ class NodeMissingError extends Error {
} // flowlint-next-line unclear-type:off
function getNode(key) {
    const node = nodes.get(key);
    if (node == null) {
        throw new NodeMissingError(`Missing definition for RecoilValue: "${key}""`);
    }
    return node;
} // flowlint-next-line unclear-type:off
function getNodeMaybe(key) {
    return nodes.get(key);
}
const configDeletionHandlers = new Map();
function deleteNodeConfigIfPossible(key) {
    var _node$shouldDeleteCon;
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    }
    const node = nodes.get(key);
    if (node !== null && node !== void 0 && (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) !== null && _node$shouldDeleteCon !== void 0 && _node$shouldDeleteCon.call(node)) {
        var _getConfigDeletionHan;
        nodes.delete(key);
        (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();
        configDeletionHandlers.delete(key);
    }
}
function setConfigDeletionHandler(key, fn) {
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    }
    if (fn === undefined) {
        configDeletionHandlers.delete(key);
    } else {
        configDeletionHandlers.set(key, fn);
    }
}
function getConfigDeletionHandler(key) {
    return configDeletionHandlers.get(key);
}
var Recoil_Node = {
    nodes,
    recoilValues,
    registerNode,
    getNode,
    getNodeMaybe,
    deleteNodeConfigIfPossible,
    setConfigDeletionHandler,
    getConfigDeletionHandler,
    recoilValuesForKeys,
    NodeMissingError,
    DefaultValue,
    DEFAULT_VALUE
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function enqueueExecution(s, f) {
    f();
}
var Recoil_Queue = {
    enqueueExecution
};
function createCommonjsModule(fn, module) {
    return module = {
        exports: {}
    }, fn(module, module.exports), module.exports;
}
var hamt_1 = createCommonjsModule(function(module) {
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    /**
    @fileOverview Hash Array Mapped Trie.

    Code based on: https://github.com/exclipy/pdata
*/ var hamt = {}; // export
    /* Configuration
 ******************************************************************************/ var SIZE = 5;
    var BUCKET_SIZE = Math.pow(2, SIZE);
    var MASK = BUCKET_SIZE - 1;
    var MAX_INDEX_NODE = BUCKET_SIZE / 2;
    var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
    /*
 ******************************************************************************/ var nothing = {};
    var constant = function constant(x) {
        return function() {
            return x;
        };
    };
    /**
    Get 32 bit hash of string.

    Based on:
    http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery
*/ var hash = hamt.hash = function(str) {
        var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);
        if (type === 'number') return str;
        if (type !== 'string') str += '';
        var hash = 0;
        for(var i = 0, len = str.length; i < len; ++i){
            var c = str.charCodeAt(i);
            hash = (hash << 5) - hash + c | 0;
        }
        return hash;
    };
    /* Bit Ops
 ******************************************************************************/ /**
    Hamming weight.

    Taken from: http://jsperf.com/hamming-weight
*/ var popcount = function popcount(x) {
        x -= x >> 1 & 0x55555555;
        x = (x & 0x33333333) + (x >> 2 & 0x33333333);
        x = x + (x >> 4) & 0x0f0f0f0f;
        x += x >> 8;
        x += x >> 16;
        return x & 0x7f;
    };
    var hashFragment = function hashFragment(shift, h) {
        return h >>> shift & MASK;
    };
    var toBitmap = function toBitmap(x) {
        return 1 << x;
    };
    var fromBitmap = function fromBitmap(bitmap, bit) {
        return popcount(bitmap & bit - 1);
    };
    /* Array Ops
 ******************************************************************************/ /**
    Set a value in an array.

    @param mutate Should the input array be mutated?
    @param at Index to change.
    @param v New value
    @param arr Array.
*/ var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {
        var out = arr;
        if (!mutate) {
            var len = arr.length;
            out = new Array(len);
            for(var i = 0; i < len; ++i){
                out[i] = arr[i];
            }
        }
        out[at] = v;
        return out;
    };
    /**
    Remove a value from an array.

    @param mutate Should the input array be mutated?
    @param at Index to remove.
    @param arr Array.
*/ var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {
        var newLen = arr.length - 1;
        var i = 0;
        var g = 0;
        var out = arr;
        if (mutate) {
            i = g = at;
        } else {
            out = new Array(newLen);
            while(i < at){
                out[g++] = arr[i++];
            }
        }
        ++i;
        while(i <= newLen){
            out[g++] = arr[i++];
        }
        if (mutate) {
            out.length = newLen;
        }
        return out;
    };
    /**
    Insert a value into an array.

    @param mutate Should the input array be mutated?
    @param at Index to insert at.
    @param v Value to insert,
    @param arr Array.
*/ var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {
        var len = arr.length;
        if (mutate) {
            var _i = len;
            while(_i >= at){
                arr[_i--] = arr[_i];
            }
            arr[at] = v;
            return arr;
        }
        var i = 0, g = 0;
        var out = new Array(len + 1);
        while(i < at){
            out[g++] = arr[i++];
        }
        out[at] = v;
        while(i < len){
            out[++g] = arr[i++];
        }
        return out;
    };
    /* Node Structures
 ******************************************************************************/ var LEAF = 1;
    var COLLISION = 2;
    var INDEX = 3;
    var ARRAY = 4;
    /**
    Empty node.
*/ var empty = {
        __hamt_isEmpty: true
    };
    var isEmptyNode = function isEmptyNode(x) {
        return x === empty || x && x.__hamt_isEmpty;
    };
    /**
    Leaf holding a value.

    @member edit Edit of the node.
    @member hash Hash of key.
    @member key Key.
    @member value Value stored.
*/ var Leaf = function Leaf(edit, hash, key, value) {
        return {
            type: LEAF,
            edit: edit,
            hash: hash,
            key: key,
            value: value,
            _modify: Leaf__modify
        };
    };
    /**
    Leaf holding multiple values with the same hash but different keys.

    @member edit Edit of the node.
    @member hash Hash of key.
    @member children Array of collision children node.
*/ var Collision = function Collision(edit, hash, children) {
        return {
            type: COLLISION,
            edit: edit,
            hash: hash,
            children: children,
            _modify: Collision__modify
        };
    };
    /**
    Internal node with a sparse set of children.

    Uses a bitmap and array to pack children.

  @member edit Edit of the node.
    @member mask Bitmap that encode the positions of children in the array.
    @member children Array of child nodes.
*/ var IndexedNode = function IndexedNode(edit, mask, children) {
        return {
            type: INDEX,
            edit: edit,
            mask: mask,
            children: children,
            _modify: IndexedNode__modify
        };
    };
    /**
    Internal node with many children.

    @member edit Edit of the node.
    @member size Number of children.
    @member children Array of child nodes.
*/ var ArrayNode = function ArrayNode(edit, size, children) {
        return {
            type: ARRAY,
            edit: edit,
            size: size,
            children: children,
            _modify: ArrayNode__modify
        };
    };
    /**
    Is `node` a leaf node?
*/ var isLeaf = function isLeaf(node) {
        return node === empty || node.type === LEAF || node.type === COLLISION;
    };
    /* Internal node operations.
 ******************************************************************************/ /**
    Expand an indexed node into an array node.

  @param edit Current edit.
    @param frag Index of added child.
    @param child Added child.
    @param mask Index node mask before child added.
    @param subNodes Index node children before child added.
*/ var expand = function expand(edit, frag, child, bitmap, subNodes) {
        var arr = [];
        var bit = bitmap;
        var count = 0;
        for(var i = 0; bit; ++i){
            if (bit & 1) arr[i] = subNodes[count++];
            bit >>>= 1;
        }
        arr[frag] = child;
        return ArrayNode(edit, count + 1, arr);
    };
    /**
    Collapse an array node into a indexed node.

  @param edit Current edit.
    @param count Number of elements in new array.
    @param removed Index of removed element.
    @param elements Array node children before remove.
*/ var pack = function pack(edit, count, removed, elements) {
        var children = new Array(count - 1);
        var g = 0;
        var bitmap = 0;
        for(var i = 0, len = elements.length; i < len; ++i){
            if (i !== removed) {
                var elem = elements[i];
                if (elem && !isEmptyNode(elem)) {
                    children[g++] = elem;
                    bitmap |= 1 << i;
                }
            }
        }
        return IndexedNode(edit, bitmap, children);
    };
    /**
    Merge two leaf nodes.

    @param shift Current shift.
    @param h1 Node 1 hash.
    @param n1 Node 1.
    @param h2 Node 2 hash.
    @param n2 Node 2.
*/ var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {
        if (h1 === h2) return Collision(edit, h1, [
            n2,
            n1
        ]);
        var subH1 = hashFragment(shift, h1);
        var subH2 = hashFragment(shift, h2);
        return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [
            mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)
        ] : subH1 < subH2 ? [
            n1,
            n2
        ] : [
            n2,
            n1
        ]);
    };
    /**
    Update an entry in a collision list.

    @param mutate Should mutation be used?
    @param edit Current edit.
    @param keyEq Key compare function.
    @param hash Hash of collision.
    @param list Collision list.
    @param f Update function.
    @param k Key to update.
    @param size Size ref.
*/ var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {
        var len = list.length;
        for(var i = 0; i < len; ++i){
            var child = list[i];
            if (keyEq(k, child.key)) {
                var value = child.value;
                var _newValue = f(value);
                if (_newValue === value) return list;
                if (_newValue === nothing) {
                    --size.value;
                    return arraySpliceOut(mutate, i, list);
                }
                return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);
            }
        }
        var newValue = f();
        if (newValue === nothing) return list;
        ++size.value;
        return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);
    };
    var canEditNode = function canEditNode(edit, node) {
        return edit === node.edit;
    };
    /* Editing
 ******************************************************************************/ var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {
        if (keyEq(k, this.key)) {
            var _v = f(this.value);
            if (_v === this.value) return this;
            else if (_v === nothing) {
                --size.value;
                return empty;
            }
            if (canEditNode(edit, this)) {
                this.value = _v;
                return this;
            }
            return Leaf(edit, h, k, _v);
        }
        var v = f();
        if (v === nothing) return this;
        ++size.value;
        return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
    };
    var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {
        if (h === this.hash) {
            var canEdit = canEditNode(edit, this);
            var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
            if (list === this.children) return this;
            return list.length > 1 ? Collision(edit, this.hash, list) : list[0]; // collapse single element collision list
        }
        var v = f();
        if (v === nothing) return this;
        ++size.value;
        return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
    };
    var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {
        var mask = this.mask;
        var children = this.children;
        var frag = hashFragment(shift, h);
        var bit = toBitmap(frag);
        var indx = fromBitmap(mask, bit);
        var exists = mask & bit;
        var current = exists ? children[indx] : empty;
        var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);
        if (current === child) return this;
        var canEdit = canEditNode(edit, this);
        var bitmap = mask;
        var newChildren = void 0;
        if (exists && isEmptyNode(child)) {
            // remove
            bitmap &= ~bit;
            if (!bitmap) return empty;
            if (children.length <= 2 && isLeaf(children[indx ^ 1])) return children[indx ^ 1]; // collapse
            newChildren = arraySpliceOut(canEdit, indx, children);
        } else if (!exists && !isEmptyNode(child)) {
            // add
            if (children.length >= MAX_INDEX_NODE) return expand(edit, frag, child, mask, children);
            bitmap |= bit;
            newChildren = arraySpliceIn(canEdit, indx, child, children);
        } else {
            // modify
            newChildren = arrayUpdate(canEdit, indx, child, children);
        }
        if (canEdit) {
            this.mask = bitmap;
            this.children = newChildren;
            return this;
        }
        return IndexedNode(edit, bitmap, newChildren);
    };
    var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {
        var count = this.size;
        var children = this.children;
        var frag = hashFragment(shift, h);
        var child = children[frag];
        var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);
        if (child === newChild) return this;
        var canEdit = canEditNode(edit, this);
        var newChildren = void 0;
        if (isEmptyNode(child) && !isEmptyNode(newChild)) {
            // add
            ++count;
            newChildren = arrayUpdate(canEdit, frag, newChild, children);
        } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
            // remove
            --count;
            if (count <= MIN_ARRAY_NODE) return pack(edit, count, frag, children);
            newChildren = arrayUpdate(canEdit, frag, empty, children);
        } else {
            // modify
            newChildren = arrayUpdate(canEdit, frag, newChild, children);
        }
        if (canEdit) {
            this.size = count;
            this.children = newChildren;
            return this;
        }
        return ArrayNode(edit, count, newChildren);
    };
    empty._modify = function(edit, keyEq, shift, f, h, k, size) {
        var v = f();
        if (v === nothing) return empty;
        ++size.value;
        return Leaf(edit, h, k, v);
    };
    /*
 ******************************************************************************/ function Map1(editable, edit, config, root, size) {
        this._editable = editable;
        this._edit = edit;
        this._config = config;
        this._root = root;
        this._size = size;
    }
    Map1.prototype.setTree = function(newRoot, newSize) {
        if (this._editable) {
            this._root = newRoot;
            this._size = newSize;
            return this;
        }
        return newRoot === this._root ? this : new Map1(this._editable, this._edit, this._config, newRoot, newSize);
    };
    /* Queries
 ******************************************************************************/ /**
    Lookup the value for `key` in `map` using a custom `hash`.

    Returns the value or `alt` if none.
*/ var tryGetHash = hamt.tryGetHash = function(alt, hash, key, map) {
        var node = map._root;
        var shift = 0;
        var keyEq = map._config.keyEq;
        while(true){
            switch(node.type){
                case LEAF:
                    {
                        return keyEq(key, node.key) ? node.value : alt;
                    }
                case COLLISION:
                    {
                        if (hash === node.hash) {
                            var children = node.children;
                            for(var i = 0, len = children.length; i < len; ++i){
                                var child = children[i];
                                if (keyEq(key, child.key)) return child.value;
                            }
                        }
                        return alt;
                    }
                case INDEX:
                    {
                        var frag = hashFragment(shift, hash);
                        var bit = toBitmap(frag);
                        if (node.mask & bit) {
                            node = node.children[fromBitmap(node.mask, bit)];
                            shift += SIZE;
                            break;
                        }
                        return alt;
                    }
                case ARRAY:
                    {
                        node = node.children[hashFragment(shift, hash)];
                        if (node) {
                            shift += SIZE;
                            break;
                        }
                        return alt;
                    }
                default:
                    return alt;
            }
        }
    };
    Map1.prototype.tryGetHash = function(alt, hash, key) {
        return tryGetHash(alt, hash, key, this);
    };
    /**
    Lookup the value for `key` in `map` using internal hash function.

    @see `tryGetHash`
*/ var tryGet = hamt.tryGet = function(alt, key, map) {
        return tryGetHash(alt, map._config.hash(key), key, map);
    };
    Map1.prototype.tryGet = function(alt, key) {
        return tryGet(alt, key, this);
    };
    /**
    Lookup the value for `key` in `map` using a custom `hash`.

    Returns the value or `undefined` if none.
*/ var getHash = hamt.getHash = function(hash, key, map) {
        return tryGetHash(undefined, hash, key, map);
    };
    Map1.prototype.getHash = function(hash, key) {
        return getHash(hash, key, this);
    };
    /**
    Lookup the value for `key` in `map` using internal hash function.

    @see `get`
*/ var get = hamt.get = function(key, map) {
        return tryGetHash(undefined, map._config.hash(key), key, map);
    };
    Map1.prototype.get = function(key, alt) {
        return tryGet(alt, key, this);
    };
    /**
    Does an entry exist for `key` in `map`? Uses custom `hash`.
*/ var hasHash = hamt.has = function(hash, key, map) {
        return tryGetHash(nothing, hash, key, map) !== nothing;
    };
    Map1.prototype.hasHash = function(hash, key) {
        return hasHash(hash, key, this);
    };
    /**
    Does an entry exist for `key` in `map`? Uses internal hash function.
*/ var has = hamt.has = function(key, map) {
        return hasHash(map._config.hash(key), key, map);
    };
    Map1.prototype.has = function(key) {
        return has(key, this);
    };
    var defKeyCompare = function defKeyCompare(x, y) {
        return x === y;
    };
    /**
    Create an empty map.

    @param config Configuration.
*/ hamt.make = function(config) {
        return new Map1(0, 0, {
            keyEq: config && config.keyEq || defKeyCompare,
            hash: config && config.hash || hash
        }, empty, 0);
    };
    /**
    Empty map.
*/ hamt.empty = hamt.make();
    /**
    Does `map` contain any elements?
*/ var isEmpty = hamt.isEmpty = function(map) {
        return map && !!isEmptyNode(map._root);
    };
    Map1.prototype.isEmpty = function() {
        return isEmpty(this);
    };
    /* Updates
 ******************************************************************************/ /**
    Alter the value stored for `key` in `map` using function `f` using
    custom hash.

    `f` is invoked with the current value for `k` if it exists,
    or no arguments if no such value exists. `modify` will always either
    update or insert a value into the map.

    Returns a map with the modified value. Does not alter `map`.
*/ var modifyHash = hamt.modifyHash = function(f, hash, key, map) {
        var size = {
            value: map._size
        };
        var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);
        return map.setTree(newRoot, size.value);
    };
    Map1.prototype.modifyHash = function(hash, key, f) {
        return modifyHash(f, hash, key, this);
    };
    /**
    Alter the value stored for `key` in `map` using function `f` using
    internal hash function.

    @see `modifyHash`
*/ var modify = hamt.modify = function(f, key, map) {
        return modifyHash(f, map._config.hash(key), key, map);
    };
    Map1.prototype.modify = function(key, f) {
        return modify(f, key, this);
    };
    /**
    Store `value` for `key` in `map` using custom `hash`.

    Returns a map with the modified value. Does not alter `map`.
*/ var setHash = hamt.setHash = function(hash, key, value, map) {
        return modifyHash(constant(value), hash, key, map);
    };
    Map1.prototype.setHash = function(hash, key, value) {
        return setHash(hash, key, value, this);
    };
    /**
    Store `value` for `key` in `map` using internal hash function.

    @see `setHash`
*/ var set = hamt.set = function(key, value, map) {
        return setHash(map._config.hash(key), key, value, map);
    };
    Map1.prototype.set = function(key, value) {
        return set(key, value, this);
    };
    /**
    Remove the entry for `key` in `map`.

    Returns a map with the value removed. Does not alter `map`.
*/ var del = constant(nothing);
    var removeHash = hamt.removeHash = function(hash, key, map) {
        return modifyHash(del, hash, key, map);
    };
    Map1.prototype.removeHash = Map1.prototype.deleteHash = function(hash, key) {
        return removeHash(hash, key, this);
    };
    /**
    Remove the entry for `key` in `map` using internal hash function.

    @see `removeHash`
*/ var remove = hamt.remove = function(key, map) {
        return removeHash(map._config.hash(key), key, map);
    };
    Map1.prototype.remove = Map1.prototype.delete = function(key) {
        return remove(key, this);
    };
    /* Mutation
 ******************************************************************************/ /**
    Mark `map` as mutable.
 */ var beginMutation = hamt.beginMutation = function(map) {
        return new Map1(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
    };
    Map1.prototype.beginMutation = function() {
        return beginMutation(this);
    };
    /**
    Mark `map` as immutable.
 */ var endMutation = hamt.endMutation = function(map) {
        map._editable = map._editable && map._editable - 1;
        return map;
    };
    Map1.prototype.endMutation = function() {
        return endMutation(this);
    };
    /**
    Mutate `map` within the context of `f`.
    @param f
    @param map HAMT
*/ var mutate = hamt.mutate = function(f, map) {
        var transient = beginMutation(map);
        f(transient);
        return endMutation(transient);
    };
    Map1.prototype.mutate = function(f) {
        return mutate(f, this);
    };
    /* Traversal
 ******************************************************************************/ /**
    Apply a continuation.
*/ var appk = function appk(k) {
        return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
    };
    /**
    Recursively visit all values stored in an array of nodes lazily.
*/ var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {
        while(i < len){
            var child = children[i++];
            if (child && !isEmptyNode(child)) return lazyVisit(child, f, [
                len,
                children,
                i,
                f,
                k
            ]);
        }
        return appk(k);
    };
    /**
    Recursively visit all values stored in `node` lazily.
*/ var lazyVisit = function lazyVisit(node, f, k) {
        switch(node.type){
            case LEAF:
                return {
                    value: f(node),
                    rest: k
                };
            case COLLISION:
            case ARRAY:
            case INDEX:
                var children = node.children;
                return lazyVisitChildren(children.length, children, 0, f, k);
            default:
                return appk(k);
        }
    };
    var DONE = {
        done: true
    };
    /**
    Javascript iterator over a map.
*/ function MapIterator(v) {
        this.v = v;
    }
    MapIterator.prototype.next = function() {
        if (!this.v) return DONE;
        var v0 = this.v;
        this.v = appk(v0.rest);
        return v0;
    };
    MapIterator.prototype[Symbol.iterator] = function() {
        return this;
    };
    /**
    Lazily visit each value in map with function `f`.
*/ var visit = function visit(map, f) {
        return new MapIterator(lazyVisit(map._root, f));
    };
    /**
    Get a Javascsript iterator of `map`.

    Iterates over `[key, value]` arrays.
*/ var buildPairs = function buildPairs(x) {
        return [
            x.key,
            x.value
        ];
    };
    var entries = hamt.entries = function(map) {
        return visit(map, buildPairs);
    };
    Map1.prototype.entries = Map1.prototype[Symbol.iterator] = function() {
        return entries(this);
    };
    /**
    Get array of all keys in `map`.

    Order is not guaranteed.
*/ var buildKeys = function buildKeys(x) {
        return x.key;
    };
    var keys = hamt.keys = function(map) {
        return visit(map, buildKeys);
    };
    Map1.prototype.keys = function() {
        return keys(this);
    };
    /**
    Get array of all values in `map`.

    Order is not guaranteed, duplicates are preserved.
*/ var buildValues = function buildValues(x) {
        return x.value;
    };
    var values = hamt.values = Map1.prototype.values = function(map) {
        return visit(map, buildValues);
    };
    Map1.prototype.values = function() {
        return values(this);
    };
    /* Fold
 ******************************************************************************/ /**
    Visit every entry in the map, aggregating data.

    Order of nodes is not guaranteed.

    @param f Function mapping accumulated value, value, and key to new value.
    @param z Starting value.
    @param m HAMT
*/ var fold = hamt.fold = function(f, z, m) {
        var root = m._root;
        if (root.type === LEAF) return f(z, root.value, root.key);
        var toVisit = [
            root.children
        ];
        var children = void 0;
        while(children = toVisit.pop()){
            for(var i = 0, len = children.length; i < len;){
                var child = children[i++];
                if (child && child.type) {
                    if (child.type === LEAF) z = f(z, child.value, child.key);
                    else toVisit.push(child.children);
                }
            }
        }
        return z;
    };
    Map1.prototype.fold = function(f, z) {
        return fold(f, z, this);
    };
    /**
    Visit every entry in the map, aggregating data.

    Order of nodes is not guaranteed.

    @param f Function invoked with value and key
    @param map HAMT
*/ var forEach = hamt.forEach = function(f, map) {
        return fold(function(_, value, key) {
            return f(value, key, map);
        }, null, map);
    };
    Map1.prototype.forEach = function(f) {
        return forEach(f, this);
    };
    /* Aggregate
 ******************************************************************************/ /**
    Get the number of entries in `map`.
*/ var count = hamt.count = function(map) {
        return map._size;
    };
    Map1.prototype.count = function() {
        return count(this);
    };
    Object.defineProperty(Map1.prototype, 'size', {
        get: Map1.prototype.count
    });
    /* Export
 ******************************************************************************/ if (module.exports) {
        module.exports = hamt;
    } else {
        undefined.hamt = hamt;
    }
});
class BuiltInMap {
    constructor(existing){
        _defineProperty(this, "_map", void 0);
        this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());
    }
    keys() {
        return this._map.keys();
    }
    entries() {
        return this._map.entries();
    }
    get(k) {
        return this._map.get(k);
    }
    has(k) {
        return this._map.has(k);
    }
    set(k, v) {
        this._map.set(k, v);
        return this;
    }
    delete(k) {
        this._map.delete(k);
        return this;
    }
    clone() {
        return persistentMap(this);
    }
    toMap() {
        return new Map(this._map);
    }
}
class HashArrayMappedTrieMap {
    // Because hamt.empty is not a function there is no way to introduce type
    // parameters on it, so empty is typed as HAMTPlusMap<string, mixed>.
    // $FlowIssue
    constructor(existing){
        _defineProperty(this, "_hamt", hamt_1.empty.beginMutation());
        if (existing instanceof HashArrayMappedTrieMap) {
            const h = existing._hamt.endMutation();
            existing._hamt = h.beginMutation();
            this._hamt = h.beginMutation();
        } else if (existing) {
            for (const [k, v] of existing.entries()){
                this._hamt.set(k, v);
            }
        }
    }
    keys() {
        return this._hamt.keys();
    }
    entries() {
        return this._hamt.entries();
    }
    get(k) {
        return this._hamt.get(k);
    }
    has(k) {
        return this._hamt.has(k);
    }
    set(k, v) {
        this._hamt.set(k, v);
        return this;
    }
    delete(k) {
        this._hamt.delete(k);
        return this;
    }
    clone() {
        return persistentMap(this);
    }
    toMap() {
        return new Map(this._hamt);
    }
}
function persistentMap(existing) {
    if (Recoil_gkx('recoil_hamt_2020')) {
        return new HashArrayMappedTrieMap(existing);
    } else {
        return new BuiltInMap(existing);
    }
}
var Recoil_PersistentMap = {
    persistentMap
};
var Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;
var Recoil_PersistentMap$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    persistentMap: Recoil_PersistentMap_1
});
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Returns a set containing all of the values from the first set that are not
 * present in any of the subsequent sets.
 *
 * Note: this is written procedurally (i.e., without filterSet) for performant
 * use in tight loops.
 */ function differenceSets(set, ...setsWithValuesToRemove) {
    const ret = new Set();
    FIRST: for (const value of set){
        for (const otherSet of setsWithValuesToRemove){
            if (otherSet.has(value)) {
                continue FIRST;
            }
        }
        ret.add(value);
    }
    return ret;
}
var Recoil_differenceSets = differenceSets;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Returns a new Map object with the same keys as the original, but with the
 * values replaced with the output of the given callback function.
 */ function mapMap(map, callback) {
    const result = new Map();
    map.forEach((value, key)=>{
        result.set(key, callback(value, key));
    });
    return result;
}
var Recoil_mapMap = mapMap;
function makeGraph() {
    return {
        nodeDeps: new Map(),
        nodeToNodeSubscriptions: new Map()
    };
}
function cloneGraph(graph) {
    return {
        nodeDeps: Recoil_mapMap(graph.nodeDeps, (s)=>new Set(s)),
        nodeToNodeSubscriptions: Recoil_mapMap(graph.nodeToNodeSubscriptions, (s)=>new Set(s))
    };
} // Note that this overwrites the deps of existing nodes, rather than unioning
// the new deps with the old deps.
function mergeDepsIntoGraph(key, newDeps, graph, // graph compared with olderGraph:
olderGraph) {
    const { nodeDeps, nodeToNodeSubscriptions } = graph;
    const oldDeps = nodeDeps.get(key);
    if (oldDeps && olderGraph && oldDeps !== olderGraph.nodeDeps.get(key)) {
        return;
    } // Update nodeDeps:
    nodeDeps.set(key, newDeps); // Add new deps to nodeToNodeSubscriptions:
    const addedDeps = oldDeps == null ? newDeps : Recoil_differenceSets(newDeps, oldDeps);
    for (const dep of addedDeps){
        if (!nodeToNodeSubscriptions.has(dep)) {
            nodeToNodeSubscriptions.set(dep, new Set());
        }
        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));
        existing.add(key);
    } // Remove removed deps from nodeToNodeSubscriptions:
    if (oldDeps) {
        const removedDeps = Recoil_differenceSets(oldDeps, newDeps);
        for (const dep of removedDeps){
            if (!nodeToNodeSubscriptions.has(dep)) {
                return;
            }
            const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(dep));
            existing.delete(key);
            if (existing.size === 0) {
                nodeToNodeSubscriptions.delete(dep);
            }
        }
    }
}
function saveDepsToStore(key, deps, store, version) {
    var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;
    const storeState = store.getState();
    if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
        Recoil_recoverableViolation('Tried to save dependencies to a discarded tree');
    } // Merge the dependencies discovered into the store's dependency map
    // for the version that was read:
    const graph = store.getGraph(version);
    mergeDepsIntoGraph(key, deps, graph); // If this version is not the latest version, also write these dependencies
    // into later versions if they don't already have their own:
    if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {
        const currentGraph = store.getGraph(storeState.currentTree.version);
        mergeDepsIntoGraph(key, deps, currentGraph, graph);
    }
    if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {
        var _storeState$nextTree2;
        const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;
        if (nextVersion !== undefined) {
            const nextGraph = store.getGraph(nextVersion);
            mergeDepsIntoGraph(key, deps, nextGraph, graph);
        }
    }
}
var Recoil_Graph = {
    cloneGraph,
    graph: makeGraph,
    saveDepsToStore
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ let nextTreeStateVersion = 0;
const getNextTreeStateVersion = ()=>nextTreeStateVersion++;
let nextStoreID = 0;
const getNextStoreID = ()=>nextStoreID++;
let nextComponentID = 0;
const getNextComponentID = ()=>nextComponentID++;
var Recoil_Keys = {
    getNextTreeStateVersion,
    getNextStoreID,
    getNextComponentID
};
const { persistentMap: persistentMap$1 } = Recoil_PersistentMap$1;
const { graph } = Recoil_Graph;
const { getNextTreeStateVersion: getNextTreeStateVersion$1 } = Recoil_Keys;
function makeEmptyTreeState() {
    const version = getNextTreeStateVersion$1();
    return {
        version,
        stateID: version,
        transactionMetadata: {},
        dirtyAtoms: new Set(),
        atomValues: persistentMap$1(),
        nonvalidatedAtoms: persistentMap$1()
    };
}
function makeEmptyStoreState() {
    const currentTree = makeEmptyTreeState();
    return {
        currentTree,
        nextTree: null,
        previousTree: null,
        commitDepth: 0,
        knownAtoms: new Set(),
        knownSelectors: new Set(),
        transactionSubscriptions: new Map(),
        nodeTransactionSubscriptions: new Map(),
        nodeToComponentSubscriptions: new Map(),
        queuedComponentCallbacks_DEPRECATED: [],
        suspendedComponentResolvers: new Set(),
        graphsByVersion: new Map().set(currentTree.version, graph()),
        retention: {
            referenceCounts: new Map(),
            nodesRetainedByZone: new Map(),
            retainablesToCheckForRelease: new Set()
        },
        nodeCleanupFunctions: new Map()
    };
}
var Recoil_State = {
    makeEmptyTreeState,
    makeEmptyStoreState,
    getNextTreeStateVersion: getNextTreeStateVersion$1
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ class RetentionZone {
}
function retentionZone() {
    return new RetentionZone();
}
var Recoil_RetentionZone = {
    RetentionZone,
    retentionZone
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Utilities for working with built-in Maps and Sets without mutating them.
 *
 * 
 * @format
 * @oncall recoil
 */ function setByAddingToSet(set, v) {
    const next = new Set(set);
    next.add(v);
    return next;
}
function setByDeletingFromSet(set, v) {
    const next = new Set(set);
    next.delete(v);
    return next;
}
function mapBySettingInMap(map, k, v) {
    const next = new Map(map);
    next.set(k, v);
    return next;
}
function mapByUpdatingInMap(map, k, updater) {
    const next = new Map(map);
    next.set(k, updater(next.get(k)));
    return next;
}
function mapByDeletingFromMap(map, k) {
    const next = new Map(map);
    next.delete(k);
    return next;
}
function mapByDeletingMultipleFromMap(map, ks) {
    const next = new Map(map);
    ks.forEach((k)=>next.delete(k));
    return next;
}
var Recoil_CopyOnWrite = {
    setByAddingToSet,
    setByDeletingFromSet,
    mapBySettingInMap,
    mapByUpdatingInMap,
    mapByDeletingFromMap,
    mapByDeletingMultipleFromMap
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Creates a new iterable whose output is generated by passing the input
 * iterable's values through the filter function.
 */ function* filterIterable(iterable, predicate) {
    // Use generator to create iterable/iterator
    let index = 0;
    for (const value of iterable){
        if (predicate(value, index++)) {
            yield value;
        }
    }
}
var Recoil_filterIterable = filterIterable;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Return a proxy object based on the provided base and factories objects.
 * The proxy will include all properties of the base object as-is.
 * The factories object contains callbacks to obtain the values of the properies
 * for its keys.
 *
 * This is useful for providing users an object where some properties may be
 * lazily computed only on first access.
 */ // $FlowIssue[unclear-type]
function lazyProxy(base, factories) {
    const proxy = new Proxy(base, {
        // Compute and cache lazy property if not already done.
        get: (target, prop)=>{
            if (!(prop in target) && prop in factories) {
                target[prop] = factories[prop]();
            }
            return target[prop];
        },
        // This method allows user to iterate keys as normal
        ownKeys: (target)=>{
            return Object.keys(target);
        }
    }); // $FlowIssue[incompatible-return]
    return proxy;
}
var Recoil_lazyProxy = lazyProxy;
const { getNode: getNode$1, getNodeMaybe: getNodeMaybe$1, recoilValuesForKeys: recoilValuesForKeys$1 } = Recoil_Node;
const { RetentionZone: RetentionZone$1 } = Recoil_RetentionZone;
const { setByAddingToSet: setByAddingToSet$1 } = Recoil_CopyOnWrite;
// flowlint-next-line unclear-type:off
const emptySet = Object.freeze(new Set());
class ReadOnlyRecoilValueError extends Error {
}
function initializeRetentionForNode(store, nodeKey, retainedBy) {
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return ()=>undefined;
    }
    const { nodesRetainedByZone } = store.getState().retention;
    function addToZone(zone) {
        let set = nodesRetainedByZone.get(zone);
        if (!set) {
            nodesRetainedByZone.set(zone, set = new Set());
        }
        set.add(nodeKey);
    }
    if (retainedBy instanceof RetentionZone$1) {
        addToZone(retainedBy);
    } else if (Array.isArray(retainedBy)) {
        for (const zone of retainedBy){
            addToZone(zone);
        }
    }
    return ()=>{
        if (!Recoil_gkx('recoil_memory_managament_2020')) {
            return;
        }
        const { retention } = store.getState();
        function deleteFromZone(zone) {
            const set = retention.nodesRetainedByZone.get(zone);
            set === null || set === void 0 ? void 0 : set.delete(nodeKey);
            if (set && set.size === 0) {
                retention.nodesRetainedByZone.delete(zone);
            }
        }
        if (retainedBy instanceof RetentionZone$1) {
            deleteFromZone(retainedBy);
        } else if (Array.isArray(retainedBy)) {
            for (const zone of retainedBy){
                deleteFromZone(zone);
            }
        }
    };
}
function initializeNodeIfNewToStore(store, treeState, key, trigger) {
    const storeState = store.getState();
    if (storeState.nodeCleanupFunctions.has(key)) {
        return;
    }
    const node = getNode$1(key);
    const retentionCleanup = initializeRetentionForNode(store, key, node.retainedBy);
    const nodeCleanup = node.init(store, treeState, trigger);
    storeState.nodeCleanupFunctions.set(key, ()=>{
        nodeCleanup();
        retentionCleanup();
    });
}
function initializeNode(store, key, trigger) {
    initializeNodeIfNewToStore(store, store.getState().currentTree, key, trigger);
}
function cleanUpNode(store, key) {
    var _state$nodeCleanupFun;
    const state = store.getState();
    (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();
    state.nodeCleanupFunctions.delete(key);
} // Get the current value loadable of a node and update the state.
// Update dependencies and subscriptions for selectors.
// Update saved value validation for atoms.
function getNodeLoadable(store, state, key) {
    initializeNodeIfNewToStore(store, state, key, 'get');
    return getNode$1(key).get(store, state);
} // Peek at the current value loadable for a node without any evaluation or state change
function peekNodeLoadable(store, state, key) {
    return getNode$1(key).peek(store, state);
} // Write value directly to state bypassing the Node interface as the node
// definitions may not have been loaded yet when processing the initial snapshot.
function setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {
    var _node$invalidate;
    const node = getNodeMaybe$1(key);
    node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
    return {
        ...state,
        atomValues: state.atomValues.clone().delete(key),
        nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),
        dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)
    };
} // Return the discovered dependencies and values to be written by setting
// a node value. (Multiple values may be written due to selectors getting to
// set upstreams; deps may be discovered because of reads in updater functions.)
function setNodeValue(store, state, key, newValue) {
    const node = getNode$1(key);
    if (node.set == null) {
        throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);
    }
    const set = node.set; // so flow doesn't lose the above refinement.
    initializeNodeIfNewToStore(store, state, key, 'set');
    return set(store, state, newValue);
}
function peekNodeInfo(store, state, key) {
    const storeState = store.getState();
    const graph = store.getGraph(state.version);
    const type = getNode$1(key).nodeType;
    return Recoil_lazyProxy({
        type
    }, {
        // $FlowFixMe[underconstrained-implicit-instantiation]
        loadable: ()=>peekNodeLoadable(store, state, key),
        isActive: ()=>storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),
        isSet: ()=>type === 'selector' ? false : state.atomValues.has(key),
        isModified: ()=>state.dirtyAtoms.has(key),
        // Report current dependencies.  If the node hasn't been evaluated, then
        // dependencies may be missing based on the current state.
        deps: ()=>{
            var _graph$nodeDeps$get;
            return recoilValuesForKeys$1((_graph$nodeDeps$get = graph.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []);
        },
        // Reports all "current" subscribers.  Evaluating other nodes or
        // previous in-progress async evaluations may introduce new subscribers.
        subscribers: ()=>{
            var _storeState$nodeToCom, _storeState$nodeToCom2;
            return {
                nodes: recoilValuesForKeys$1(Recoil_filterIterable(getDownstreamNodes(store, state, new Set([
                    key
                ])), (nodeKey)=>nodeKey !== key)),
                components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name])=>({
                        name
                    }))
            };
        }
    });
} // Find all of the recursively dependent nodes
function getDownstreamNodes(store, state, keys) {
    const visitedNodes = new Set();
    const visitingNodes = Array.from(keys);
    const graph = store.getGraph(state.version);
    for(let key = visitingNodes.pop(); key; key = visitingNodes.pop()){
        var _graph$nodeToNodeSubs;
        visitedNodes.add(key);
        const subscribedNodes = (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;
        for (const downstreamNode of subscribedNodes){
            if (!visitedNodes.has(downstreamNode)) {
                visitingNodes.push(downstreamNode);
            }
        }
    }
    return visitedNodes;
}
var Recoil_FunctionalCore = {
    getNodeLoadable,
    peekNodeLoadable,
    setNodeValue,
    initializeNode,
    cleanUpNode,
    setUnvalidatedAtomValue_DEPRECATED,
    peekNodeInfo,
    getDownstreamNodes
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ let _invalidateMemoizedSnapshot = null;
function setInvalidateMemoizedSnapshot(invalidate) {
    _invalidateMemoizedSnapshot = invalidate;
}
function invalidateMemoizedSnapshot() {
    var _invalidateMemoizedSn;
    (_invalidateMemoizedSn = _invalidateMemoizedSnapshot) === null || _invalidateMemoizedSn === void 0 ? void 0 : _invalidateMemoizedSn();
}
var Recoil_SnapshotCache = {
    setInvalidateMemoizedSnapshot,
    invalidateMemoizedSnapshot
};
const { getDownstreamNodes: getDownstreamNodes$1, getNodeLoadable: getNodeLoadable$1, setNodeValue: setNodeValue$1 } = Recoil_FunctionalCore;
const { getNextComponentID: getNextComponentID$1 } = Recoil_Keys;
const { getNode: getNode$2, getNodeMaybe: getNodeMaybe$2 } = Recoil_Node;
const { DefaultValue: DefaultValue$1 } = Recoil_Node;
const { reactMode: reactMode$1 } = Recoil_ReactMode;
const { AbstractRecoilValue: AbstractRecoilValue$1, RecoilState: RecoilState$1, RecoilValueReadOnly: RecoilValueReadOnly$1, isRecoilValue: isRecoilValue$1 } = Recoil_RecoilValue$1;
const { invalidateMemoizedSnapshot: invalidateMemoizedSnapshot$1 } = Recoil_SnapshotCache;
function getRecoilValueAsLoadable(store, { key }, treeState = store.getState().currentTree) {
    var _storeState$nextTree, _storeState$previousT;
    // Reading from an older tree can cause bugs because the dependencies that we
    // discover during the read are lost.
    const storeState = store.getState();
    if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {
        Recoil_recoverableViolation('Tried to read from a discarded tree');
    }
    const loadable = getNodeLoadable$1(store, treeState, key);
    if (loadable.state === 'loading') {
        loadable.contents.catch(()=>{
            /**
       * HACK: intercept thrown error here to prevent an uncaught promise exception. Ideally this would happen closer to selector
       * execution (perhaps introducing a new ERROR class to be resolved by async selectors that are in an error state)
       */ return;
        });
    }
    return loadable;
}
function applyAtomValueWrites(atomValues, writes) {
    const result = atomValues.clone();
    writes.forEach((v, k)=>{
        if (v.state === 'hasValue' && v.contents instanceof DefaultValue$1) {
            result.delete(k);
        } else {
            result.set(k, v);
        }
    });
    return result;
}
function valueFromValueOrUpdater(store, state, { key }, valueOrUpdater) {
    if (typeof valueOrUpdater === 'function') {
        // Updater form: pass in the current value. Throw if the current value
        // is unavailable (namely when updating an async selector that's
        // pending or errored):
        const current = getNodeLoadable$1(store, state, key);
        if (current.state === 'loading') {
            const msg = `Tried to set atom or selector "${key}" using an updater function while the current state is pending, this is not currently supported.`;
            Recoil_recoverableViolation(msg);
            throw Recoil_err(msg);
        } else if (current.state === 'hasError') {
            throw current.contents;
        } // T itself may be a function, so our refinement is not sufficient:
        return valueOrUpdater(current.contents); // flowlint-line unclear-type:off
    } else {
        return valueOrUpdater;
    }
}
function applyAction(store, state, action) {
    if (action.type === 'set') {
        const { recoilValue, valueOrUpdater } = action;
        const newValue = valueFromValueOrUpdater(store, state, recoilValue, valueOrUpdater);
        const writes = setNodeValue$1(store, state, recoilValue.key, newValue);
        for (const [key, loadable] of writes.entries()){
            writeLoadableToTreeState(state, key, loadable);
        }
    } else if (action.type === 'setLoadable') {
        const { recoilValue: { key }, loadable } = action;
        writeLoadableToTreeState(state, key, loadable);
    } else if (action.type === 'markModified') {
        const { recoilValue: { key } } = action;
        state.dirtyAtoms.add(key);
    } else if (action.type === 'setUnvalidated') {
        var _node$invalidate;
        // Write value directly to state bypassing the Node interface as the node
        // definitions may not have been loaded yet when processing the initial snapshot.
        const { recoilValue: { key }, unvalidatedValue } = action;
        const node = getNodeMaybe$2(key);
        node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
        state.atomValues.delete(key);
        state.nonvalidatedAtoms.set(key, unvalidatedValue);
        state.dirtyAtoms.add(key);
    } else {
        Recoil_recoverableViolation(`Unknown action ${action.type}`);
    }
}
function writeLoadableToTreeState(state, key, loadable) {
    if (loadable.state === 'hasValue' && loadable.contents instanceof DefaultValue$1) {
        state.atomValues.delete(key);
    } else {
        state.atomValues.set(key, loadable);
    }
    state.dirtyAtoms.add(key);
    state.nonvalidatedAtoms.delete(key);
}
function applyActionsToStore(store, actions) {
    store.replaceState((state)=>{
        const newState = copyTreeState(state);
        for (const action of actions){
            applyAction(store, newState, action);
        }
        invalidateDownstreams(store, newState);
        invalidateMemoizedSnapshot$1();
        return newState;
    });
}
function queueOrPerformStateUpdate(store, action) {
    if (batchStack.length) {
        const actionsByStore = batchStack[batchStack.length - 1];
        let actions = actionsByStore.get(store);
        if (!actions) {
            actionsByStore.set(store, actions = []);
        }
        actions.push(action);
    } else {
        applyActionsToStore(store, [
            action
        ]);
    }
}
const batchStack = [];
function batchStart() {
    const actionsByStore = new Map();
    batchStack.push(actionsByStore);
    return ()=>{
        for (const [store, actions] of actionsByStore){
            applyActionsToStore(store, actions);
        }
        const popped = batchStack.pop();
        if (popped !== actionsByStore) {
            Recoil_recoverableViolation('Incorrect order of batch popping');
        }
    };
}
function copyTreeState(state) {
    return {
        ...state,
        atomValues: state.atomValues.clone(),
        nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),
        dirtyAtoms: new Set(state.dirtyAtoms)
    };
}
function invalidateDownstreams(store, state) {
    // Inform any nodes that were changed or downstream of changes so that they
    // can clear out any caches as needed due to the update:
    const downstreams = getDownstreamNodes$1(store, state, state.dirtyAtoms);
    for (const key of downstreams){
        var _getNodeMaybe, _getNodeMaybe$invalid;
        (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);
    }
}
function setRecoilValue(store, recoilValue, valueOrUpdater) {
    queueOrPerformStateUpdate(store, {
        type: 'set',
        recoilValue,
        valueOrUpdater
    });
}
function setRecoilValueLoadable(store, recoilValue, loadable) {
    if (loadable instanceof DefaultValue$1) {
        return setRecoilValue(store, recoilValue, loadable);
    }
    queueOrPerformStateUpdate(store, {
        type: 'setLoadable',
        recoilValue,
        loadable: loadable
    });
}
function markRecoilValueModified(store, recoilValue) {
    queueOrPerformStateUpdate(store, {
        type: 'markModified',
        recoilValue
    });
}
function setUnvalidatedRecoilValue(store, recoilValue, unvalidatedValue) {
    queueOrPerformStateUpdate(store, {
        type: 'setUnvalidated',
        recoilValue,
        unvalidatedValue
    });
}
function subscribeToRecoilValue(store, { key }, callback, componentDebugName = null) {
    const subID = getNextComponentID$1();
    const storeState = store.getState();
    if (!storeState.nodeToComponentSubscriptions.has(key)) {
        storeState.nodeToComponentSubscriptions.set(key, new Map());
    }
    Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [
        componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : '<not captured>',
        callback
    ]); // Handle the case that, during the same tick that we are subscribing, an atom
    // has been updated by some effect handler. Otherwise we will miss the update.
    const mode = reactMode$1();
    if (mode.early && (mode.mode === 'LEGACY' || mode.mode === 'MUTABLE_SOURCE')) {
        const nextTree = store.getState().nextTree;
        if (nextTree && nextTree.dirtyAtoms.has(key)) {
            callback(nextTree);
        }
    }
    return {
        release: ()=>{
            const releaseStoreState = store.getState();
            const subs = releaseStoreState.nodeToComponentSubscriptions.get(key);
            if (subs === undefined || !subs.has(subID)) {
                Recoil_recoverableViolation(`Subscription missing at release time for atom ${key}. This is a bug in Recoil.`);
                return;
            }
            subs.delete(subID);
            if (subs.size === 0) {
                releaseStoreState.nodeToComponentSubscriptions.delete(key);
            }
        }
    };
}
function refreshRecoilValue(store, recoilValue) {
    var _node$clearCache;
    const { currentTree } = store.getState();
    const node = getNode$2(recoilValue.key);
    (_node$clearCache = node.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node, store, currentTree);
}
var Recoil_RecoilValueInterface = {
    RecoilValueReadOnly: RecoilValueReadOnly$1,
    AbstractRecoilValue: AbstractRecoilValue$1,
    RecoilState: RecoilState$1,
    getRecoilValueAsLoadable,
    setRecoilValue,
    setRecoilValueLoadable,
    markRecoilValueModified,
    setUnvalidatedRecoilValue,
    subscribeToRecoilValue,
    isRecoilValue: isRecoilValue$1,
    applyAtomValueWrites,
    // TODO Remove export when deprecating initialStoreState_DEPRECATED in RecoilRoot
    batchStart,
    writeLoadableToTreeState,
    invalidateDownstreams,
    copyTreeState,
    refreshRecoilValue
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * The someSet() method tests whether some elements in the given Set pass the
 * test implemented by the provided function.
 */ function someSet(set, callback, context) {
    const iterator = set.entries();
    let current = iterator.next();
    while(!current.done){
        const entry = current.value;
        if (callback.call(context, entry[1], entry[0], set)) {
            return true;
        }
        current = iterator.next();
    }
    return false;
}
var Recoil_someSet = someSet;
const { cleanUpNode: cleanUpNode$1 } = Recoil_FunctionalCore;
const { deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1, getNode: getNode$3 } = Recoil_Node;
const { RetentionZone: RetentionZone$2 } = Recoil_RetentionZone;
// Components that aren't mounted after suspending for this long will be assumed
// to be discarded and their resources released.
const SUSPENSE_TIMEOUT_MS = 120000;
const emptySet$1 = new Set();
function releaseRetainablesNowOnCurrentTree(store, retainables) {
    const storeState = store.getState();
    const treeState = storeState.currentTree;
    if (storeState.nextTree) {
        Recoil_recoverableViolation('releaseNodesNowOnCurrentTree should only be called at the end of a batch');
        return; // leak memory rather than erase something that's about to be used.
    }
    const nodes = new Set();
    for (const r of retainables){
        if (r instanceof RetentionZone$2) {
            for (const n of nodesRetainedByZone(storeState, r)){
                nodes.add(n);
            }
        } else {
            nodes.add(r);
        }
    }
    const releasableNodes = findReleasableNodes(store, nodes);
    for (const node of releasableNodes){
        releaseNode(store, treeState, node);
    }
}
function findReleasableNodes(store, searchFromNodes) {
    const storeState = store.getState();
    const treeState = storeState.currentTree;
    const graph = store.getGraph(treeState.version);
    const releasableNodes = new Set(); // mutated to collect answer
    const nonReleasableNodes = new Set();
    findReleasableNodesInner(searchFromNodes);
    return releasableNodes;
    "TURBOPACK unreachable";
    function findReleasableNodesInner(searchFromNodes) {
        const releasableNodesFoundThisIteration = new Set();
        const downstreams = getDownstreamNodesInTopologicalOrder(store, treeState, searchFromNodes, releasableNodes, nonReleasableNodes // don't descend into these
        ); // Find which of the downstream nodes are releasable and which are not:
        for (const node of downstreams){
            var _storeState$retention;
            // Not releasable if configured to be retained forever:
            if (getNode$3(node).retainedBy === 'recoilRoot') {
                nonReleasableNodes.add(node);
                continue;
            } // Not releasable if retained directly by a component:
            if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {
                nonReleasableNodes.add(node);
                continue;
            } // Not releasable if retained by a zone:
            if (zonesThatCouldRetainNode(node).some((z)=>storeState.retention.referenceCounts.get(z))) {
                nonReleasableNodes.add(node);
                continue;
            } // Not releasable if it has a non-releasable child (which will already be in
            // nonReleasableNodes because we are going in topological order):
            const nodeChildren = graph.nodeToNodeSubscriptions.get(node);
            if (nodeChildren && Recoil_someSet(nodeChildren, (child)=>nonReleasableNodes.has(child))) {
                nonReleasableNodes.add(node);
                continue;
            }
            releasableNodes.add(node);
            releasableNodesFoundThisIteration.add(node);
        } // If we found any releasable nodes, we need to walk UP from those nodes to
        // find whether their parents can now be released as well:
        const parents = new Set();
        for (const node of releasableNodesFoundThisIteration){
            for (const parent of (_graph$nodeDeps$get = graph.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1){
                var _graph$nodeDeps$get;
                if (!releasableNodes.has(parent)) {
                    parents.add(parent);
                }
            }
        }
        if (parents.size) {
            findReleasableNodesInner(parents);
        }
    }
} // Children before parents
function getDownstreamNodesInTopologicalOrder(store, treeState, nodes, doNotDescendInto1, doNotDescendInto2) {
    const graph = store.getGraph(treeState.version);
    const answer = [];
    const visited = new Set();
    while(nodes.size > 0){
        visit(Recoil_nullthrows(nodes.values().next().value));
    }
    return answer;
    "TURBOPACK unreachable";
    function visit(node) {
        if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {
            nodes.delete(node);
            return;
        }
        if (visited.has(node)) {
            return;
        }
        const children = graph.nodeToNodeSubscriptions.get(node);
        if (children) {
            for (const child of children){
                visit(child);
            }
        }
        visited.add(node);
        nodes.delete(node);
        answer.push(node);
    }
}
function releaseNode(store, treeState, node) {
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    } // Atom effects, in-closure caches, etc.:
    cleanUpNode$1(store, node); // Delete from store state:
    const storeState = store.getState();
    storeState.knownAtoms.delete(node);
    storeState.knownSelectors.delete(node);
    storeState.nodeTransactionSubscriptions.delete(node);
    storeState.retention.referenceCounts.delete(node);
    const zones = zonesThatCouldRetainNode(node);
    for (const zone of zones){
        var _storeState$retention2;
        (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);
    } // Note that we DO NOT delete from nodeToComponentSubscriptions because this
    // already happens when the last component that was retaining the node unmounts,
    // and this could happen either before or after that.
    // Delete from TreeState and dep graph:
    treeState.atomValues.delete(node);
    treeState.dirtyAtoms.delete(node);
    treeState.nonvalidatedAtoms.delete(node);
    const graph = storeState.graphsByVersion.get(treeState.version);
    if (graph) {
        const deps = graph.nodeDeps.get(node);
        if (deps !== undefined) {
            graph.nodeDeps.delete(node);
            for (const dep of deps){
                var _graph$nodeToNodeSubs;
                (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);
            }
        } // No need to delete sub's deps as there should be no subs at this point.
        // But an invariant would require deleting nodes in topological order.
        graph.nodeToNodeSubscriptions.delete(node);
    } // Node config (for family members only as their configs can be recreated, and
    // only if they are not retained within any other Stores):
    deleteNodeConfigIfPossible$1(node);
}
function nodesRetainedByZone(storeState, zone) {
    var _storeState$retention3;
    return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;
}
function zonesThatCouldRetainNode(node) {
    const retainedBy = getNode$3(node).retainedBy;
    if (retainedBy === undefined || retainedBy === 'components' || retainedBy === 'recoilRoot') {
        return [];
    } else if (retainedBy instanceof RetentionZone$2) {
        return [
            retainedBy
        ];
    } else {
        return retainedBy; // it's an array of zones
    }
}
function scheduleOrPerformPossibleReleaseOfRetainable(store, retainable) {
    const state = store.getState();
    if (state.nextTree) {
        state.retention.retainablesToCheckForRelease.add(retainable);
    } else {
        releaseRetainablesNowOnCurrentTree(store, new Set([
            retainable
        ]));
    }
}
function updateRetainCount(store, retainable, delta) {
    var _map$get;
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    }
    const map = store.getState().retention.referenceCounts;
    const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;
    if (newCount === 0) {
        updateRetainCountToZero(store, retainable);
    } else {
        map.set(retainable, newCount);
    }
}
function updateRetainCountToZero(store, retainable) {
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    }
    const map = store.getState().retention.referenceCounts;
    map.delete(retainable);
    scheduleOrPerformPossibleReleaseOfRetainable(store, retainable);
}
function releaseScheduledRetainablesNow(store) {
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    }
    const state = store.getState();
    releaseRetainablesNowOnCurrentTree(store, state.retention.retainablesToCheckForRelease);
    state.retention.retainablesToCheckForRelease.clear();
}
function retainedByOptionWithDefault(r) {
    // The default will change from 'recoilRoot' to 'components' in the future.
    return r === undefined ? 'recoilRoot' : r;
}
var Recoil_Retention = {
    SUSPENSE_TIMEOUT_MS,
    updateRetainCount,
    updateRetainCountToZero,
    releaseScheduledRetainablesNow,
    retainedByOptionWithDefault
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * This is to export esstiential functions from react-dom
 * for our web build
 *
 * 
 * @format
 * @oncall recoil
 */ const { unstable_batchedUpdates } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2d$dom$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
var ReactBatchedUpdates = {
    unstable_batchedUpdates
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * This is to export esstiential functions from react-dom
 * for our web build
 *
 * 
 * @format
 * @oncall recoil
 */ // @fb-only: const {unstable_batchedUpdates} = require('ReactDOMComet');
// prettier-ignore
const { unstable_batchedUpdates: unstable_batchedUpdates$1 } = ReactBatchedUpdates; // @oss-only
var Recoil_ReactBatchedUpdates = {
    unstable_batchedUpdates: unstable_batchedUpdates$1
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ const { batchStart: batchStart$1 } = Recoil_RecoilValueInterface;
const { unstable_batchedUpdates: unstable_batchedUpdates$2 } = Recoil_ReactBatchedUpdates; // flowlint-next-line unclear-type:off
/*
 * During SSR, unstable_batchedUpdates may be undefined so this
 * falls back to a basic function that executes the batch
 */ let batcher = unstable_batchedUpdates$2 || ((batchFn)=>batchFn());
/**
 * Sets the provided batcher function as the batcher function used by Recoil.
 *
 * Set the batcher to a custom batcher for your renderer,
 * if you use a renderer other than React DOM or React Native.
 */ const setBatcher = (newBatcher)=>{
    batcher = newBatcher;
};
/**
 * Returns the current batcher function.
 */ const getBatcher = ()=>batcher;
/**
 * Calls the current batcher function and passes the
 * provided callback function.
 */ const batchUpdates = (callback)=>{
    batcher(()=>{
        let batchEnd = ()=>undefined;
        try {
            batchEnd = batchStart$1();
            callback();
        } finally{
            batchEnd();
        }
    });
};
var Recoil_Batching = {
    getBatcher,
    setBatcher,
    batchUpdates
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Combines multiple Iterables into a single Iterable.
 * Traverses the input Iterables in the order provided and maintains the order
 * of their elements.
 *
 * Example:
 * ```
 * const r = Array.from(concatIterables(['a', 'b'], ['c'], ['d', 'e', 'f']));
 * r == ['a', 'b', 'c', 'd', 'e', 'f'];
 * ```
 */ function* concatIterables(iters) {
    for (const iter of iters){
        for (const val of iter){
            yield val;
        }
    }
}
var Recoil_concatIterables = concatIterables;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /* eslint-disable fb-www/typeof-undefined */ const isSSR = typeof Window === 'undefined' || typeof window === 'undefined';
/* eslint-enable fb-www/typeof-undefined */ const isWindow = (value)=>!isSSR && (value === window || value instanceof Window);
const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'; // eslint-disable-line fb-www/typeof-undefined
var Recoil_Environment = {
    isSSR,
    isReactNative,
    isWindow
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Caches a function's results based on the key returned by the passed
 * hashFunction.
 */ function memoizeWithArgsHash(fn, hashFunction) {
    let cache;
    return (...args)=>{
        if (!cache) {
            cache = {};
        }
        const key = hashFunction(...args);
        if (!Object.hasOwnProperty.call(cache, key)) {
            cache[key] = fn(...args);
        }
        return cache[key];
    };
}
/**
 * Caches a function's results based on a comparison of the arguments.
 * Only caches the last return of the function.
 * Defaults to reference equality
 */ function memoizeOneWithArgsHash(fn, hashFunction) {
    let lastKey;
    let lastResult; // breaking cache when arguments change
    return (...args)=>{
        const key = hashFunction(...args);
        if (lastKey === key) {
            return lastResult;
        }
        lastKey = key;
        lastResult = fn(...args);
        return lastResult;
    };
}
/**
 * Caches a function's results based on a comparison of the arguments.
 * Only caches the last return of the function.
 * Defaults to reference equality
 */ function memoizeOneWithArgsHashAndInvalidation(fn, hashFunction) {
    let lastKey;
    let lastResult; // breaking cache when arguments change
    const memoizedFn = (...args)=>{
        const key = hashFunction(...args);
        if (lastKey === key) {
            return lastResult;
        }
        lastKey = key;
        lastResult = fn(...args);
        return lastResult;
    };
    const invalidate = ()=>{
        lastKey = null;
    };
    return [
        memoizedFn,
        invalidate
    ];
}
var Recoil_Memoize = {
    memoizeWithArgsHash,
    memoizeOneWithArgsHash,
    memoizeOneWithArgsHashAndInvalidation
};
const { batchUpdates: batchUpdates$1 } = Recoil_Batching;
const { initializeNode: initializeNode$1, peekNodeInfo: peekNodeInfo$1 } = Recoil_FunctionalCore;
const { graph: graph$1 } = Recoil_Graph;
const { getNextStoreID: getNextStoreID$1 } = Recoil_Keys;
const { DEFAULT_VALUE: DEFAULT_VALUE$1, recoilValues: recoilValues$1, recoilValuesForKeys: recoilValuesForKeys$2 } = Recoil_Node;
const { AbstractRecoilValue: AbstractRecoilValue$2, getRecoilValueAsLoadable: getRecoilValueAsLoadable$1, setRecoilValue: setRecoilValue$1, setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1 } = Recoil_RecoilValueInterface;
const { updateRetainCount: updateRetainCount$1 } = Recoil_Retention;
const { setInvalidateMemoizedSnapshot: setInvalidateMemoizedSnapshot$1 } = Recoil_SnapshotCache;
const { getNextTreeStateVersion: getNextTreeStateVersion$2, makeEmptyStoreState: makeEmptyStoreState$1 } = Recoil_State;
const { isSSR: isSSR$1 } = Recoil_Environment;
const { memoizeOneWithArgsHashAndInvalidation: memoizeOneWithArgsHashAndInvalidation$1 } = Recoil_Memoize;
// Opaque at this surface because it's part of the public API from here.
const retainWarning = `
Recoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:

  const release = snapshot.retain();
  try {
    await doSomethingWithSnapshot(snapshot);
  } finally {
    release();
  }

This is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.
`; // A "Snapshot" is "read-only" and captures a specific set of values of atoms.
// However, the data-flow-graph and selector values may evolve as selector
// evaluation functions are executed and async selectors resolve.
class Snapshot {
    // eslint-disable-next-line fb-www/no-uninitialized-properties
    constructor(storeState, parentStoreID){
        _defineProperty(this, "_store", void 0);
        _defineProperty(this, "_refCount", 1);
        _defineProperty(this, "getLoadable", (recoilValue)=>{
            this.checkRefCount_INTERNAL();
            return getRecoilValueAsLoadable$1(this._store, recoilValue);
        });
        _defineProperty(this, "getPromise", (recoilValue)=>{
            this.checkRefCount_INTERNAL();
            return this.getLoadable(recoilValue).toPromise();
        });
        _defineProperty(this, "getNodes_UNSTABLE", (opt)=>{
            this.checkRefCount_INTERNAL(); // TODO Deal with modified selectors
            if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {
                if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {
                    return [];
                }
                const state = this._store.getState().currentTree;
                return recoilValuesForKeys$2(state.dirtyAtoms);
            }
            const knownAtoms = this._store.getState().knownAtoms;
            const knownSelectors = this._store.getState().knownSelectors;
            return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([
                knownAtoms,
                knownSelectors
            ])) : Recoil_filterIterable(recoilValues$1.values(), ({ key })=>!knownAtoms.has(key) && !knownSelectors.has(key));
        });
        _defineProperty(this, "getInfo_UNSTABLE", ({ key })=>{
            this.checkRefCount_INTERNAL();
            return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);
        });
        _defineProperty(this, "map", (mapper)=>{
            this.checkRefCount_INTERNAL();
            const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
            mapper(mutableSnapshot); // if removing batchUpdates from `set` add it here
            return mutableSnapshot;
        });
        _defineProperty(this, "asyncMap", async (mapper)=>{
            this.checkRefCount_INTERNAL();
            const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
            mutableSnapshot.retain(); // Retain new snapshot during async mapper
            await mapper(mutableSnapshot); // Continue to retain the new snapshot for the user, but auto-release it
            // after the next tick, the same as a new synchronous snapshot.
            mutableSnapshot.autoRelease_INTERNAL();
            return mutableSnapshot;
        });
        this._store = {
            storeID: getNextStoreID$1(),
            parentStoreID,
            getState: ()=>storeState,
            replaceState: (replacer)=>{
                // no batching, so nextTree is never active
                storeState.currentTree = replacer(storeState.currentTree);
            },
            getGraph: (version)=>{
                const graphs = storeState.graphsByVersion;
                if (graphs.has(version)) {
                    return Recoil_nullthrows(graphs.get(version));
                }
                const newGraph = graph$1();
                graphs.set(version, newGraph);
                return newGraph;
            },
            subscribeToTransactions: ()=>({
                    release: ()=>{}
                }),
            addTransactionMetadata: ()=>{
                throw Recoil_err('Cannot subscribe to Snapshots');
            }
        }; // Initialize any nodes that are live in the parent store (primarily so that
        // this snapshot gets counted towards the node's live stores count).
        // TODO Optimize this when cloning snapshots for callbacks
        for (const nodeKey of this._store.getState().knownAtoms){
            initializeNode$1(this._store, nodeKey, 'get');
            updateRetainCount$1(this._store, nodeKey, 1);
        }
        this.autoRelease_INTERNAL();
    }
    retain() {
        if (this._refCount <= 0) {
            if ("TURBOPACK compile-time truthy", 1) {
                throw Recoil_err('Snapshot has already been released.');
            } else {
                "TURBOPACK unreachable";
            }
        }
        this._refCount++;
        let released = false;
        return ()=>{
            if (!released) {
                released = true;
                this._release();
            }
        };
    }
    /**
   * Release the snapshot on the next tick.  This means the snapshot is retained
   * during the execution of the current function using it.
   */ autoRelease_INTERNAL() {
        if (!isSSR$1) {
            // Use timeout of 10 to workaround Firefox issue: https://github.com/facebookexperimental/Recoil/issues/1936
            window.setTimeout(()=>this._release(), 10);
        }
    }
    _release() {
        this._refCount--;
        if (this._refCount === 0) {
            this._store.getState().nodeCleanupFunctions.forEach((cleanup)=>cleanup());
            this._store.getState().nodeCleanupFunctions.clear();
            if (!Recoil_gkx('recoil_memory_managament_2020')) {
                return;
            } // Temporarily nerfing this to allow us to find broken call sites without
        // actually breaking anybody yet.
        // for (const k of this._store.getState().knownAtoms) {
        //   updateRetainCountToZero(this._store, k);
        // }
        } else if (this._refCount < 0) {
            if ("TURBOPACK compile-time truthy", 1) {
                Recoil_recoverableViolation('Snapshot released an extra time.');
            }
        }
    }
    isRetained() {
        return this._refCount > 0;
    }
    checkRefCount_INTERNAL() {
        if (Recoil_gkx('recoil_memory_managament_2020') && this._refCount <= 0) {
            if ("TURBOPACK compile-time truthy", 1) {
                Recoil_recoverableViolation(retainWarning);
            } // What we will ship later:
        // throw err(retainWarning);
        }
    }
    getStore_INTERNAL() {
        this.checkRefCount_INTERNAL();
        return this._store;
    }
    getID() {
        this.checkRefCount_INTERNAL();
        return this._store.getState().currentTree.stateID;
    }
    getStoreID() {
        this.checkRefCount_INTERNAL();
        return this._store.storeID;
    }
}
function cloneStoreState(store, treeState, bumpVersion = false) {
    const storeState = store.getState();
    const version = bumpVersion ? getNextTreeStateVersion$2() : treeState.version;
    return {
        // Always clone the TreeState to isolate stores from accidental mutations.
        // For example, reading a selector from a cloned snapshot shouldn't cache
        // in the original treestate which may cause the original to skip
        // initialization of upstream atoms.
        currentTree: {
            // TODO snapshots shouldn't really have versions because a new version number
            // is always assigned when the snapshot is gone to.
            version: bumpVersion ? version : treeState.version,
            stateID: bumpVersion ? version : treeState.stateID,
            transactionMetadata: {
                ...treeState.transactionMetadata
            },
            dirtyAtoms: new Set(treeState.dirtyAtoms),
            atomValues: treeState.atomValues.clone(),
            nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()
        },
        commitDepth: 0,
        nextTree: null,
        previousTree: null,
        knownAtoms: new Set(storeState.knownAtoms),
        // FIXME here's a copy
        knownSelectors: new Set(storeState.knownSelectors),
        // FIXME here's a copy
        transactionSubscriptions: new Map(),
        nodeTransactionSubscriptions: new Map(),
        nodeToComponentSubscriptions: new Map(),
        queuedComponentCallbacks_DEPRECATED: [],
        suspendedComponentResolvers: new Set(),
        graphsByVersion: new Map().set(version, store.getGraph(treeState.version)),
        retention: {
            referenceCounts: new Map(),
            nodesRetainedByZone: new Map(),
            retainablesToCheckForRelease: new Set()
        },
        // FIXME here's a copy
        // Create blank cleanup handlers for atoms so snapshots don't re-run
        // atom effects.
        nodeCleanupFunctions: new Map(Recoil_mapIterable(storeState.nodeCleanupFunctions.entries(), ([key])=>[
                key,
                ()=>{}
            ]))
    };
} // Factory to build a fresh snapshot
function freshSnapshot(initializeState) {
    const snapshot = new Snapshot(makeEmptyStoreState$1());
    return initializeState != null ? snapshot.map(initializeState) : snapshot;
} // Factory to clone a snapshot state
const [memoizedCloneSnapshot, invalidateMemoizedSnapshot$2] = memoizeOneWithArgsHashAndInvalidation$1((store, version)=>{
    var _storeState$nextTree;
    const storeState = store.getState();
    const treeState = version === 'latest' ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : Recoil_nullthrows(storeState.previousTree);
    return new Snapshot(cloneStoreState(store, treeState), store.storeID);
}, (store, version)=>{
    var _store$getState$nextT, _store$getState$previ;
    return String(version) + String(store.storeID) + String((_store$getState$nextT = store.getState().nextTree) === null || _store$getState$nextT === void 0 ? void 0 : _store$getState$nextT.version) + String(store.getState().currentTree.version) + String((_store$getState$previ = store.getState().previousTree) === null || _store$getState$previ === void 0 ? void 0 : _store$getState$previ.version);
}); // Avoid circular dependencies
setInvalidateMemoizedSnapshot$1(invalidateMemoizedSnapshot$2);
function cloneSnapshot(store, version = 'latest') {
    const snapshot = memoizedCloneSnapshot(store, version);
    if (!snapshot.isRetained()) {
        invalidateMemoizedSnapshot$2();
        return memoizedCloneSnapshot(store, version);
    }
    return snapshot;
}
class MutableSnapshot extends Snapshot {
    constructor(snapshot, batch){
        super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true), snapshot.getStoreID());
        _defineProperty(this, "_batch", void 0);
        _defineProperty(this, "set", (recoilState, newValueOrUpdater)=>{
            this.checkRefCount_INTERNAL();
            const store = this.getStore_INTERNAL(); // This batchUpdates ensures this `set` is applied immediately and you can
            // read the written value after calling `set`. I would like to remove this
            // behavior and only batch in `Snapshot.map`, but this would be a breaking
            // change potentially.
            this._batch(()=>{
                updateRetainCount$1(store, recoilState.key, 1);
                setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);
            });
        });
        _defineProperty(this, "reset", (recoilState)=>{
            this.checkRefCount_INTERNAL();
            const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.
            this._batch(()=>{
                updateRetainCount$1(store, recoilState.key, 1);
                setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);
            });
        });
        _defineProperty(this, "setUnvalidatedAtomValues_DEPRECATED", (values)=>{
            this.checkRefCount_INTERNAL();
            const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.
            batchUpdates$1(()=>{
                for (const [k, v] of values.entries()){
                    updateRetainCount$1(store, k, 1);
                    setUnvalidatedRecoilValue$1(store, new AbstractRecoilValue$2(k), v);
                }
            });
        });
        this._batch = batch;
    }
}
var Recoil_Snapshot = {
    Snapshot,
    MutableSnapshot,
    freshSnapshot,
    cloneSnapshot
};
var Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;
var Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;
var Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;
var Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;
var Recoil_Snapshot$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Snapshot: Recoil_Snapshot_1,
    MutableSnapshot: Recoil_Snapshot_2,
    freshSnapshot: Recoil_Snapshot_3,
    cloneSnapshot: Recoil_Snapshot_4
});
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function unionSets(...sets) {
    const result = new Set();
    for (const set of sets){
        for (const value of set){
            result.add(value);
        }
    }
    return result;
}
var Recoil_unionSets = unionSets;
const { useRef } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
/**
 * The same as `useRef()` except that if a function is specified then it will
 * call that function to get the value to initialize the reference with.
 * This is similar to how `useState()` behaves when given a function.  It allows
 * the user to avoid generating the initial value for subsequent renders.
 * The tradeoff is that to set the reference to a function itself you need to
 * nest it: useRefInitOnce(() => () => {...});
 */ function useRefInitOnce(initialValue) {
    // $FlowExpectedError[incompatible-call]
    const ref = useRef(initialValue);
    if (ref.current === initialValue && typeof initialValue === 'function') {
        // $FlowExpectedError[incompatible-use]
        ref.current = initialValue();
    }
    return ref;
}
var Recoil_useRefInitOnce = useRefInitOnce;
// @fb-only: const RecoilusagelogEvent = require('RecoilusagelogEvent');
// @fb-only: const RecoilUsageLogFalcoEvent = require('RecoilUsageLogFalcoEvent');
// @fb-only: const URI = require('URI');
const { getNextTreeStateVersion: getNextTreeStateVersion$3, makeEmptyStoreState: makeEmptyStoreState$2 } = Recoil_State;
const { cleanUpNode: cleanUpNode$2, getDownstreamNodes: getDownstreamNodes$2, initializeNode: initializeNode$2, setNodeValue: setNodeValue$2, setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1 } = Recoil_FunctionalCore;
const { graph: graph$2 } = Recoil_Graph;
const { cloneGraph: cloneGraph$1 } = Recoil_Graph;
const { getNextStoreID: getNextStoreID$2 } = Recoil_Keys;
const { createMutableSource: createMutableSource$1, reactMode: reactMode$2 } = Recoil_ReactMode;
const { applyAtomValueWrites: applyAtomValueWrites$1 } = Recoil_RecoilValueInterface;
const { releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1 } = Recoil_Retention;
const { freshSnapshot: freshSnapshot$1 } = Recoil_Snapshot$1;
const { useCallback, useContext, useEffect, useMemo, useRef: useRef$1, useState } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
function notInAContext() {
    throw Recoil_err('This component must be used inside a <RecoilRoot> component.');
}
const defaultStore = Object.freeze({
    storeID: getNextStoreID$2(),
    getState: notInAContext,
    replaceState: notInAContext,
    getGraph: notInAContext,
    subscribeToTransactions: notInAContext,
    addTransactionMetadata: notInAContext
});
let stateReplacerIsBeingExecuted = false;
function startNextTreeIfNeeded(store) {
    if (stateReplacerIsBeingExecuted) {
        throw Recoil_err('An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.');
    }
    const storeState = store.getState();
    if (storeState.nextTree === null) {
        if (Recoil_gkx('recoil_memory_managament_2020') && Recoil_gkx('recoil_release_on_cascading_update_killswitch_2021')) {
            // If this is a cascading update (that is, rendering due to one state change
            // invokes a second state change), we won't have cleaned up retainables yet
            // because this normally happens after notifying components. Do it before
            // proceeding with the cascading update so that it remains predictable:
            if (storeState.commitDepth > 0) {
                releaseScheduledRetainablesNow$1(store);
            }
        }
        const version = storeState.currentTree.version;
        const nextVersion = getNextTreeStateVersion$3();
        storeState.nextTree = {
            ...storeState.currentTree,
            version: nextVersion,
            stateID: nextVersion,
            dirtyAtoms: new Set(),
            transactionMetadata: {}
        };
        storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));
    }
}
const AppContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createContext({
    current: defaultStore
});
const useStoreRef = ()=>useContext(AppContext); // $FlowExpectedError[incompatible-call]
const MutableSourceContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createContext(null);
function useRecoilMutableSource() {
    const mutableSource = useContext(MutableSourceContext);
    if (mutableSource == null) {
        Recoil_expectationViolation('Attempted to use a Recoil hook outside of a <RecoilRoot>. ' + '<RecoilRoot> must be an ancestor of any component that uses ' + 'Recoil hooks.');
    }
    return mutableSource;
}
function notifyComponents(store, storeState, treeState) {
    const dependentNodes = getDownstreamNodes$2(store, treeState, treeState.dirtyAtoms);
    for (const key of dependentNodes){
        const comps = storeState.nodeToComponentSubscriptions.get(key);
        if (comps) {
            for (const [_subID, [_debugName, callback]] of comps){
                callback(treeState);
            }
        }
    }
}
function sendEndOfBatchNotifications(store) {
    const storeState = store.getState();
    const treeState = storeState.currentTree; // Inform transaction subscribers of the transaction:
    const dirtyAtoms = treeState.dirtyAtoms;
    if (dirtyAtoms.size) {
        // Execute Node-specific subscribers before global subscribers
        for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions){
            if (dirtyAtoms.has(key)) {
                for (const [_, subscription] of subscriptions){
                    subscription(store);
                }
            }
        }
        for (const [_, subscription] of storeState.transactionSubscriptions){
            subscription(store);
        }
        if (!reactMode$2().early || storeState.suspendedComponentResolvers.size > 0) {
            // Notifying components is needed to wake from suspense, even when using
            // early rendering.
            notifyComponents(store, storeState, treeState); // Wake all suspended components so the right one(s) can try to re-render.
            // We need to wake up components not just when some asynchronous selector
            // resolved, but also when changing synchronous values because this may cause
            // a selector to change from asynchronous to synchronous, in which case there
            // would be no follow-up asynchronous resolution to wake us up.
            // TODO OPTIMIZATION Only wake up related downstream components
            storeState.suspendedComponentResolvers.forEach((cb)=>cb());
            storeState.suspendedComponentResolvers.clear();
        }
    } // Special behavior ONLY invoked by useInterface.
    // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.
    storeState.queuedComponentCallbacks_DEPRECATED.forEach((cb)=>cb(treeState));
    storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);
}
function endBatch(store) {
    const storeState = store.getState();
    storeState.commitDepth++;
    try {
        const { nextTree } = storeState; // Ignore commits that are not because of Recoil transactions -- namely,
        // because something above RecoilRoot re-rendered:
        if (nextTree == null) {
            return;
        } // nextTree is now committed -- note that copying and reset occurs when
        // a transaction begins, in startNextTreeIfNeeded:
        storeState.previousTree = storeState.currentTree;
        storeState.currentTree = nextTree;
        storeState.nextTree = null;
        sendEndOfBatchNotifications(store);
        if (storeState.previousTree != null) {
            storeState.graphsByVersion.delete(storeState.previousTree.version);
        } else {
            Recoil_recoverableViolation('Ended batch with no previous state, which is unexpected', 'recoil');
        }
        storeState.previousTree = null;
        if (Recoil_gkx('recoil_memory_managament_2020')) {
            // Only release retainables if there were no writes during the end of the
            // batch.  This avoids releasing something we might be about to use.
            if (nextTree == null) {
                releaseScheduledRetainablesNow$1(store);
            }
        }
    } finally{
        storeState.commitDepth--;
    }
}
/*
 * The purpose of the Batcher is to observe when React batches end so that
 * Recoil state changes can be batched. Whenever Recoil state changes, we call
 * setState on the batcher. Then we wait for that change to be committed, which
 * signifies the end of the batch. That's when we respond to the Recoil change.
 */ function Batcher({ setNotifyBatcherOfChange }) {
    const storeRef = useStoreRef();
    const [, setState] = useState([]); // $FlowFixMe[incompatible-call]
    setNotifyBatcherOfChange(()=>setState({}));
    useEffect({
        "Batcher.useEffect": ()=>{
            // $FlowFixMe[incompatible-call]
            setNotifyBatcherOfChange({
                "Batcher.useEffect": ()=>setState({})
            }["Batcher.useEffect"]); // If an asynchronous selector resolves after the Batcher is unmounted,
            // notifyBatcherOfChange will still be called. An error gets thrown whenever
            // setState is called after a component is already unmounted, so this sets
            // notifyBatcherOfChange to be a no-op.
            return ({
                "Batcher.useEffect": ()=>{
                    setNotifyBatcherOfChange({
                        "Batcher.useEffect": ()=>{}
                    }["Batcher.useEffect"]);
                }
            })["Batcher.useEffect"];
        }
    }["Batcher.useEffect"], [
        setNotifyBatcherOfChange
    ]);
    useEffect({
        "Batcher.useEffect": ()=>{
            // enqueueExecution runs this function immediately; it is only used to
            // manipulate the order of useEffects during tests, since React seems to
            // call useEffect in an unpredictable order sometimes.
            Recoil_Queue.enqueueExecution('Batcher', {
                "Batcher.useEffect": ()=>{
                    endBatch(storeRef.current);
                }
            }["Batcher.useEffect"]);
        }
    }["Batcher.useEffect"]);
    return null;
}
if ("TURBOPACK compile-time truthy", 1) {
    if (typeof window !== 'undefined' && !window.$recoilDebugStates) {
        window.$recoilDebugStates = [];
    }
} // When removing this deprecated function, remove stateBySettingRecoilValue
// which will no longer be needed.
function initialStoreState_DEPRECATED(store, initializeState) {
    const initial = makeEmptyStoreState$2();
    initializeState({
        set: (atom, value)=>{
            const state = initial.currentTree;
            const writes = setNodeValue$2(store, state, atom.key, value);
            const writtenNodes = new Set(writes.keys());
            const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();
            for (const n of writtenNodes){
                nonvalidatedAtoms.delete(n);
            }
            initial.currentTree = {
                ...state,
                dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),
                atomValues: applyAtomValueWrites$1(state.atomValues, writes),
                // NB: PLEASE un-export applyAtomValueWrites when deleting this code
                nonvalidatedAtoms
            };
        },
        setUnvalidatedAtomValues: (atomValues)=>{
            // FIXME replace this with a mutative loop
            atomValues.forEach((v, k)=>{
                initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);
            });
        }
    });
    return initial;
} // Initialize state snapshot for <RecoilRoot> for the initializeState prop.
// Atom effect initialization takes precedence over this prop.
// Any atom effects will be run before initialization, but then cleaned up,
// they are then re-run when used as part of rendering.  These semantics are
// compatible with React StrictMode where effects may be re-run multiple times
// but state initialization only happens once the first time.
function initialStoreState(initializeState) {
    // Initialize a snapshot and get its store
    const snapshot = freshSnapshot$1(initializeState);
    const storeState = snapshot.getStore_INTERNAL().getState(); // Counteract the snapshot auto-release
    snapshot.retain(); // Cleanup any effects run during initialization and clear the handlers so
    // they will re-initialize if used during rendering.  This allows atom effect
    // initialization to take precedence over initializeState and be compatible
    // with StrictMode semantics.
    storeState.nodeCleanupFunctions.forEach((cleanup)=>cleanup());
    storeState.nodeCleanupFunctions.clear();
    return storeState;
}
let nextID = 0;
function RecoilRoot_INTERNAL({ initializeState_DEPRECATED, initializeState, store_INTERNAL: storeProp, // For use with React "context bridging"
children }) {
    // prettier-ignore
    // @fb-only: useEffect(() => {
    // @fb-only: if (gkx('recoil_usage_logging')) {
    // @fb-only: try {
    // @fb-only: RecoilUsageLogFalcoEvent.log(() => ({
    // @fb-only: type: RecoilusagelogEvent.RECOIL_ROOT_MOUNTED,
    // @fb-only: path: URI.getRequestURI().getPath(),
    // @fb-only: }));
    // @fb-only: } catch {
    // @fb-only: recoverableViolation(
    // @fb-only: 'Error when logging Recoil Usage event',
    // @fb-only: 'recoil',
    // @fb-only: );
    // @fb-only: }
    // @fb-only: }
    // @fb-only: }, []);
    let storeStateRef; // eslint-disable-line prefer-const
    const getGraph = (version)=>{
        const graphs = storeStateRef.current.graphsByVersion;
        if (graphs.has(version)) {
            return Recoil_nullthrows(graphs.get(version));
        }
        const newGraph = graph$2();
        graphs.set(version, newGraph);
        return newGraph;
    };
    const subscribeToTransactions = (callback, key)=>{
        if (key == null) {
            // Global transaction subscriptions
            const { transactionSubscriptions } = storeRef.current.getState();
            const id = nextID++;
            transactionSubscriptions.set(id, callback);
            return {
                release: ()=>{
                    transactionSubscriptions.delete(id);
                }
            };
        } else {
            // Node-specific transaction subscriptions:
            const { nodeTransactionSubscriptions } = storeRef.current.getState();
            if (!nodeTransactionSubscriptions.has(key)) {
                nodeTransactionSubscriptions.set(key, new Map());
            }
            const id = nextID++;
            Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);
            return {
                release: ()=>{
                    const subs = nodeTransactionSubscriptions.get(key);
                    if (subs) {
                        subs.delete(id);
                        if (subs.size === 0) {
                            nodeTransactionSubscriptions.delete(key);
                        }
                    }
                }
            };
        }
    };
    const addTransactionMetadata = (metadata)=>{
        startNextTreeIfNeeded(storeRef.current);
        for (const k of Object.keys(metadata)){
            Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];
        }
    };
    const replaceState = (replacer)=>{
        startNextTreeIfNeeded(storeRef.current); // Use replacer to get the next state:
        const nextTree = Recoil_nullthrows(storeStateRef.current.nextTree);
        let replaced;
        try {
            stateReplacerIsBeingExecuted = true;
            replaced = replacer(nextTree);
        } finally{
            stateReplacerIsBeingExecuted = false;
        }
        if (replaced === nextTree) {
            return;
        }
        if ("TURBOPACK compile-time truthy", 1) {
            if (typeof window !== 'undefined') {
                window.$recoilDebugStates.push(replaced); // TODO this shouldn't happen here because it's not batched
            }
        } // Save changes to nextTree and schedule a React update:
        storeStateRef.current.nextTree = replaced;
        if (reactMode$2().early) {
            notifyComponents(storeRef.current, storeStateRef.current, replaced);
        }
        Recoil_nullthrows(notifyBatcherOfChange.current)();
    };
    const notifyBatcherOfChange = useRef$1(null);
    const setNotifyBatcherOfChange = useCallback({
        "RecoilRoot_INTERNAL.useCallback[setNotifyBatcherOfChange]": (x)=>{
            notifyBatcherOfChange.current = x;
        }
    }["RecoilRoot_INTERNAL.useCallback[setNotifyBatcherOfChange]"], [
        notifyBatcherOfChange
    ]);
    const storeRef = Recoil_useRefInitOnce(()=>storeProp !== null && storeProp !== void 0 ? storeProp : {
            storeID: getNextStoreID$2(),
            getState: ()=>storeStateRef.current,
            replaceState,
            getGraph,
            subscribeToTransactions,
            addTransactionMetadata
        });
    if (storeProp != null) {
        storeRef.current = storeProp;
    }
    storeStateRef = Recoil_useRefInitOnce(()=>initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(storeRef.current, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());
    const mutableSource = useMemo({
        "RecoilRoot_INTERNAL.useMemo[mutableSource]": ()=>createMutableSource$1 === null || createMutableSource$1 === void 0 ? void 0 : createMutableSource$1(storeStateRef, {
                "RecoilRoot_INTERNAL.useMemo[mutableSource]": ()=>storeStateRef.current.currentTree.version
            }["RecoilRoot_INTERNAL.useMemo[mutableSource]"])
    }["RecoilRoot_INTERNAL.useMemo[mutableSource]"], [
        storeStateRef
    ]); // Cleanup when the <RecoilRoot> is unmounted
    useEffect({
        "RecoilRoot_INTERNAL.useEffect": ()=>{
            // React is free to call effect cleanup handlers and effects at will, the
            // deps array is only an optimization.  For example, React strict mode
            // will execute each effect twice for testing.  Therefore, we need symmetry
            // to re-initialize all known atoms after they were cleaned up.
            const store = storeRef.current;
            for (const atomKey of new Set(store.getState().knownAtoms)){
                initializeNode$2(store, atomKey, 'get');
            }
            return ({
                "RecoilRoot_INTERNAL.useEffect": ()=>{
                    for (const atomKey of store.getState().knownAtoms){
                        cleanUpNode$2(store, atomKey);
                    }
                }
            })["RecoilRoot_INTERNAL.useEffect"];
        }
    }["RecoilRoot_INTERNAL.useEffect"], [
        storeRef
    ]);
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(AppContext.Provider, {
        value: storeRef
    }, /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(MutableSourceContext.Provider, {
        value: mutableSource
    }, /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(Batcher, {
        setNotifyBatcherOfChange: setNotifyBatcherOfChange
    }), children));
}
function RecoilRoot(props) {
    const { override, ...propsExceptOverride } = props;
    const ancestorStoreRef = useStoreRef();
    if (override === false && ancestorStoreRef.current !== defaultStore) {
        // If ancestorStoreRef.current !== defaultStore, it means that this
        // RecoilRoot is not nested within another.
        return props.children;
    }
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(RecoilRoot_INTERNAL, propsExceptOverride);
}
function useRecoilStoreID() {
    return useStoreRef().current.storeID;
}
var Recoil_RecoilRoot = {
    RecoilRoot,
    useStoreRef,
    useRecoilMutableSource,
    useRecoilStoreID,
    notifyComponents_FOR_TESTING: notifyComponents,
    sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function shallowArrayEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (a.length !== b.length) {
        return false;
    }
    for(let i = 0, l = a.length; i < l; i++){
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
var Recoil_shallowArrayEqual = shallowArrayEqual;
const { useEffect: useEffect$1, useRef: useRef$2 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
function usePrevious(value) {
    const ref = useRef$2();
    useEffect$1({
        "usePrevious.useEffect$1": ()=>{
            // $FlowFixMe[incompatible-type]
            ref.current = value;
        }
    }["usePrevious.useEffect$1"]);
    return ref.current;
}
var Recoil_usePrevious = usePrevious;
const { useStoreRef: useStoreRef$1 } = Recoil_RecoilRoot;
const { SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$1 } = Recoil_Retention;
const { updateRetainCount: updateRetainCount$2 } = Recoil_Retention;
const { RetentionZone: RetentionZone$3 } = Recoil_RetentionZone;
const { useEffect: useEffect$2, useRef: useRef$3 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
const { isSSR: isSSR$2 } = Recoil_Environment;
// I don't see a way to avoid the any type here because we want to accept readable
// and writable values with any type parameter, but normally with writable ones
// RecoilState<SomeT> is not a subtype of RecoilState<mixed>.
// flowlint-line unclear-type:off
function useRetain(toRetain) {
    if (!Recoil_gkx('recoil_memory_managament_2020')) {
        return;
    } // eslint-disable-next-line fb-www/react-hooks
    return useRetain_ACTUAL(toRetain);
}
function useRetain_ACTUAL(toRetain) {
    const array = Array.isArray(toRetain) ? toRetain : [
        toRetain
    ];
    const retainables = array.map((a)=>a instanceof RetentionZone$3 ? a : a.key);
    const storeRef = useStoreRef$1();
    useEffect$2({
        "useRetain_ACTUAL.useEffect$2": ()=>{
            if (!Recoil_gkx('recoil_memory_managament_2020')) {
                return;
            }
            const store = storeRef.current;
            if (timeoutID.current && !isSSR$2) {
                // Already performed a temporary retain on render, simply cancel the release
                // of that temporary retain.
                window.clearTimeout(timeoutID.current);
                timeoutID.current = null;
            } else {
                for (const r of retainables){
                    updateRetainCount$2(store, r, 1);
                }
            }
            return ({
                "useRetain_ACTUAL.useEffect$2": ()=>{
                    for (const r of retainables){
                        updateRetainCount$2(store, r, -1);
                    }
                }
            })["useRetain_ACTUAL.useEffect$2"]; // eslint-disable-next-line fb-www/react-hooks-deps
        }
    }["useRetain_ACTUAL.useEffect$2"], [
        storeRef,
        ...retainables
    ]); // We want to retain if the component suspends. This is terrible but the Suspense
    // API affords us no better option. If we suspend and never commit after some
    // seconds, then release. The 'actual' retain/release in the effect above
    // cancels this.
    const timeoutID = useRef$3();
    const previousRetainables = Recoil_usePrevious(retainables);
    if (!isSSR$2 && (previousRetainables === undefined || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {
        const store = storeRef.current;
        for (const r of retainables){
            updateRetainCount$2(store, r, 1);
        }
        if (previousRetainables) {
            for (const r of previousRetainables){
                updateRetainCount$2(store, r, -1);
            }
        }
        if (timeoutID.current) {
            window.clearTimeout(timeoutID.current);
        }
        timeoutID.current = window.setTimeout(()=>{
            timeoutID.current = null;
            for (const r of retainables){
                updateRetainCount$2(store, r, -1);
            }
        }, SUSPENSE_TIMEOUT_MS$1);
    }
}
var Recoil_useRetain = useRetain;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * THIS CODE HAS BEEN COMMENTED OUT INTENTIONALLY
 *
 * This technique of getting the component name is imperfect, since it both only
 * works in a non-minified code base, and more importantly introduces performance
 * problems since it relies in throwing errors which is an expensive operation.
 *
 * At some point we may want to reevaluate this technique hence why we have commented
 * this code out, rather than delete it all together.
 */ // const {useRef} = require('react');
// const gkx = require('recoil-shared/util/Recoil_gkx');
// const stackTraceParser = require('recoil-shared/util/Recoil_stackTraceParser');
function useComponentName() {
    // const nameRef = useRef();
    // if (__DEV__) {
    //   if (gkx('recoil_infer_component_names')) {
    //     if (nameRef.current === undefined) {
    //       // There is no blessed way to determine the calling React component from
    //       // within a hook. This hack uses the fact that hooks must start with 'use'
    //       // and that hooks are either called by React Components or other hooks. It
    //       // follows therefore, that to find the calling component, you simply need
    //       // to look down the stack and find the first function which doesn't start
    //       // with 'use'. We are only enabling this in dev for now, since once the
    //       // codebase is minified, the naming assumptions no longer hold true.
    //       // eslint-disable-next-line fb-www/no-new-error
    //       const frames = stackTraceParser(new Error().stack);
    //       for (const {methodName} of frames) {
    //         // I observed cases where the frame was of the form 'Object.useXXX'
    //         // hence why I'm searching for hooks following a word boundary
    //         if (!methodName.match(/\buse[^\b]+$/)) {
    //           return (nameRef.current = methodName);
    //         }
    //       }
    //       nameRef.current = null;
    //     }
    //     return nameRef.current ?? '<unable to determine component name>';
    //   }
    // }
    // @fb-only: return "<component name only available when both in dev mode and when passing GK 'recoil_infer_component_names'>";
    return '<component name not available>'; // @oss-only
}
var Recoil_useComponentName = useComponentName;
const { batchUpdates: batchUpdates$2 } = Recoil_Batching;
const { DEFAULT_VALUE: DEFAULT_VALUE$2 } = Recoil_Node;
const { currentRendererSupportsUseSyncExternalStore: currentRendererSupportsUseSyncExternalStore$1, reactMode: reactMode$3, useMutableSource: useMutableSource$1, useSyncExternalStore: useSyncExternalStore$1 } = Recoil_ReactMode;
const { useRecoilMutableSource: useRecoilMutableSource$1, useStoreRef: useStoreRef$2 } = Recoil_RecoilRoot;
const { isRecoilValue: isRecoilValue$2 } = Recoil_RecoilValue$1;
const { AbstractRecoilValue: AbstractRecoilValue$3, getRecoilValueAsLoadable: getRecoilValueAsLoadable$2, setRecoilValue: setRecoilValue$2, setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2, subscribeToRecoilValue: subscribeToRecoilValue$1 } = Recoil_RecoilValueInterface;
const { useCallback: useCallback$1, useEffect: useEffect$3, useMemo: useMemo$1, useRef: useRef$4, useState: useState$1 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
const { setByAddingToSet: setByAddingToSet$2 } = Recoil_CopyOnWrite;
const { isSSR: isSSR$3 } = Recoil_Environment;
function handleLoadable(loadable, recoilValue, storeRef) {
    // We can't just throw the promise we are waiting on to Suspense.  If the
    // upstream dependencies change it may produce a state in which the component
    // can render, but it would still be suspended on a Promise that may never resolve.
    if (loadable.state === 'hasValue') {
        return loadable.contents;
    } else if (loadable.state === 'loading') {
        const promise = new Promise((resolve)=>{
            const suspendedComponentResolvers = storeRef.current.getState().suspendedComponentResolvers;
            suspendedComponentResolvers.add(resolve); // SSR should clear out the wake-up resolver if the Promise is resolved
            // to avoid infinite loops.  (See https://github.com/facebookexperimental/Recoil/pull/2073)
            if (isSSR$3 && Recoil_isPromise(loadable.contents)) {
                loadable.contents.finally(()=>{
                    suspendedComponentResolvers.delete(resolve);
                });
            }
        }); // $FlowExpectedError Flow(prop-missing) for integrating with tools that inspect thrown promises @fb-only
        // @fb-only: promise.displayName = `Recoil State: ${recoilValue.key}`;
        throw promise;
    } else if (loadable.state === 'hasError') {
        throw loadable.contents;
    } else {
        throw Recoil_err(`Invalid value of loadable atom "${recoilValue.key}"`);
    }
}
function validateRecoilValue(recoilValue, hookName // $FlowFixMe[missing-local-annot]
) {
    if (!isRecoilValue$2(recoilValue)) {
        throw Recoil_err(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);
    }
}
/**
 * Various things are broken with useRecoilInterface, particularly concurrent
 * mode, React strict mode, and memory management. They will not be fixed.
 * */ function useRecoilInterface_DEPRECATED() {
    const componentName = Recoil_useComponentName();
    const storeRef = useStoreRef$2(); // eslint-disable-next-line fb-www/react-no-unused-state-hook
    const [, forceUpdate] = useState$1([]);
    const recoilValuesUsed = useRef$4(new Set());
    recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render
    const previousSubscriptions = useRef$4(new Set());
    const subscriptions = useRef$4(new Map());
    const unsubscribeFrom = useCallback$1({
        "useRecoilInterface_DEPRECATED.useCallback$1[unsubscribeFrom]": (key)=>{
            const sub = subscriptions.current.get(key);
            if (sub) {
                sub.release();
                subscriptions.current.delete(key);
            }
        }
    }["useRecoilInterface_DEPRECATED.useCallback$1[unsubscribeFrom]"], [
        subscriptions
    ]);
    const updateState = useCallback$1({
        "useRecoilInterface_DEPRECATED.useCallback$1[updateState]": (_state, key)=>{
            if (subscriptions.current.has(key)) {
                forceUpdate([]);
            }
        }
    }["useRecoilInterface_DEPRECATED.useCallback$1[updateState]"], []); // Effect to add/remove subscriptions as nodes are used
    useEffect$3({
        "useRecoilInterface_DEPRECATED.useEffect$3": ()=>{
            const store = storeRef.current;
            Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach({
                "useRecoilInterface_DEPRECATED.useEffect$3": (key)=>{
                    if (subscriptions.current.has(key)) {
                        Recoil_expectationViolation(`Double subscription to RecoilValue "${key}"`);
                        return;
                    }
                    const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$3(key), {
                        "useRecoilInterface_DEPRECATED.useEffect$3.sub": (state)=>updateState(state, key)
                    }["useRecoilInterface_DEPRECATED.useEffect$3.sub"], componentName);
                    subscriptions.current.set(key, sub);
                    /**
       * Since we're subscribing in an effect we need to update to the latest
       * value of the atom since it may have changed since we rendered. We can
       * go ahead and do that now, unless we're in the middle of a batch --
       * in which case we should do it at the end of the batch, due to the
       * following edge case: Suppose an atom is updated in another useEffect
       * of this same component. Then the following sequence of events occur:
       * 1. Atom is updated and subs fired (but we may not be subscribed
       *    yet depending on order of effects, so we miss this) Updated value
       *    is now in nextTree, but not currentTree.
       * 2. This effect happens. We subscribe and update.
       * 3. From the update we re-render and read currentTree, with old value.
       * 4. Batcher's effect sets currentTree to nextTree.
       * In this sequence we miss the update. To avoid that, add the update
       * to queuedComponentCallback if a batch is in progress.
       */ // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.
                    const state = store.getState();
                    if (state.nextTree) {
                        store.getState().queuedComponentCallbacks_DEPRECATED.push({
                            "useRecoilInterface_DEPRECATED.useEffect$3": ()=>{
                                updateState(store.getState(), key);
                            }
                        }["useRecoilInterface_DEPRECATED.useEffect$3"]);
                    } else {
                        updateState(store.getState(), key);
                    }
                }
            }["useRecoilInterface_DEPRECATED.useEffect$3"]);
            Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach({
                "useRecoilInterface_DEPRECATED.useEffect$3": (key)=>{
                    unsubscribeFrom(key);
                }
            }["useRecoilInterface_DEPRECATED.useEffect$3"]);
            previousSubscriptions.current = recoilValuesUsed.current;
        }
    }["useRecoilInterface_DEPRECATED.useEffect$3"]); // Effect to unsubscribe from all when unmounting
    useEffect$3({
        "useRecoilInterface_DEPRECATED.useEffect$3": ()=>{
            const currentSubscriptions = subscriptions.current; // Restore subscriptions that were cleared due to StrictMode running this effect twice
            Recoil_differenceSets(recoilValuesUsed.current, new Set(currentSubscriptions.keys())).forEach({
                "useRecoilInterface_DEPRECATED.useEffect$3": (key)=>{
                    const sub = subscribeToRecoilValue$1(storeRef.current, new AbstractRecoilValue$3(key), {
                        "useRecoilInterface_DEPRECATED.useEffect$3.sub": (state)=>updateState(state, key)
                    }["useRecoilInterface_DEPRECATED.useEffect$3.sub"], componentName);
                    currentSubscriptions.set(key, sub);
                }
            }["useRecoilInterface_DEPRECATED.useEffect$3"]);
            return ({
                "useRecoilInterface_DEPRECATED.useEffect$3": ()=>currentSubscriptions.forEach({
                        "useRecoilInterface_DEPRECATED.useEffect$3": (_, key)=>unsubscribeFrom(key)
                    }["useRecoilInterface_DEPRECATED.useEffect$3"])
            })["useRecoilInterface_DEPRECATED.useEffect$3"];
        }
    }["useRecoilInterface_DEPRECATED.useEffect$3"], [
        componentName,
        storeRef,
        unsubscribeFrom,
        updateState
    ]);
    return useMemo$1({
        "useRecoilInterface_DEPRECATED.useMemo$1": ()=>{
            // eslint-disable-next-line no-shadow
            function useSetRecoilState(recoilState) {
                if ("TURBOPACK compile-time truthy", 1) {
                    validateRecoilValue(recoilState, 'useSetRecoilState');
                }
                return ({
                    "useRecoilInterface_DEPRECATED.useMemo$1.useSetRecoilState": (newValueOrUpdater)=>{
                        setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
                    }
                })["useRecoilInterface_DEPRECATED.useMemo$1.useSetRecoilState"];
            } // eslint-disable-next-line no-shadow
            function useResetRecoilState(recoilState) {
                if ("TURBOPACK compile-time truthy", 1) {
                    validateRecoilValue(recoilState, 'useResetRecoilState');
                }
                return ({
                    "useRecoilInterface_DEPRECATED.useMemo$1.useResetRecoilState": ()=>setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2)
                })["useRecoilInterface_DEPRECATED.useMemo$1.useResetRecoilState"];
            } // eslint-disable-next-line no-shadow
            function useRecoilValueLoadable(recoilValue) {
                var _storeState$nextTree;
                if ("TURBOPACK compile-time truthy", 1) {
                    validateRecoilValue(recoilValue, 'useRecoilValueLoadable');
                }
                if (!recoilValuesUsed.current.has(recoilValue.key)) {
                    recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);
                } // TODO Restore optimization to memoize lookup
                const storeState = storeRef.current.getState();
                return getRecoilValueAsLoadable$2(storeRef.current, recoilValue, reactMode$3().early ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);
            } // eslint-disable-next-line no-shadow
            function useRecoilValue(recoilValue) {
                if ("TURBOPACK compile-time truthy", 1) {
                    validateRecoilValue(recoilValue, 'useRecoilValue');
                }
                const loadable = useRecoilValueLoadable(recoilValue);
                return handleLoadable(loadable, recoilValue, storeRef);
            } // eslint-disable-next-line no-shadow
            function useRecoilState(recoilState) {
                if ("TURBOPACK compile-time truthy", 1) {
                    validateRecoilValue(recoilState, 'useRecoilState');
                }
                return [
                    useRecoilValue(recoilState),
                    useSetRecoilState(recoilState)
                ];
            } // eslint-disable-next-line no-shadow
            function useRecoilStateLoadable(recoilState) {
                if ("TURBOPACK compile-time truthy", 1) {
                    validateRecoilValue(recoilState, 'useRecoilStateLoadable');
                }
                return [
                    useRecoilValueLoadable(recoilState),
                    useSetRecoilState(recoilState)
                ];
            }
            return {
                getRecoilValue: useRecoilValue,
                getRecoilValueLoadable: useRecoilValueLoadable,
                getRecoilState: useRecoilState,
                getRecoilStateLoadable: useRecoilStateLoadable,
                getSetRecoilState: useSetRecoilState,
                getResetRecoilState: useResetRecoilState
            };
        }
    }["useRecoilInterface_DEPRECATED.useMemo$1"], [
        recoilValuesUsed,
        storeRef
    ]);
}
const recoilComponentGetRecoilValueCount_FOR_TESTING = {
    current: 0
};
function useRecoilValueLoadable_SYNC_EXTERNAL_STORE(recoilValue) {
    const storeRef = useStoreRef$2();
    const componentName = Recoil_useComponentName();
    const getSnapshot = useCallback$1({
        "useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[getSnapshot]": ()=>{
            var _storeState$nextTree2;
            if ("TURBOPACK compile-time truthy", 1) {
                recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
            }
            const store = storeRef.current;
            const storeState = store.getState();
            const treeState = reactMode$3().early ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;
            const loadable = getRecoilValueAsLoadable$2(store, recoilValue, treeState);
            return {
                loadable,
                key: recoilValue.key
            };
        }
    }["useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[getSnapshot]"], [
        storeRef,
        recoilValue
    ]); // Memoize the state to avoid unnecessary rerenders
    const memoizePreviousSnapshot = useCallback$1({
        "useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[memoizePreviousSnapshot]": (getState)=>{
            let prevState;
            return ({
                "useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[memoizePreviousSnapshot]": ()=>{
                    var _prevState, _prevState2;
                    const nextState = getState();
                    if ((_prevState = prevState) !== null && _prevState !== void 0 && _prevState.loadable.is(nextState.loadable) && ((_prevState2 = prevState) === null || _prevState2 === void 0 ? void 0 : _prevState2.key) === nextState.key) {
                        return prevState;
                    }
                    prevState = nextState;
                    return nextState;
                }
            })["useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[memoizePreviousSnapshot]"];
        }
    }["useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[memoizePreviousSnapshot]"], []);
    const getMemoizedSnapshot = useMemo$1({
        "useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useMemo$1[getMemoizedSnapshot]": ()=>memoizePreviousSnapshot(getSnapshot)
    }["useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useMemo$1[getMemoizedSnapshot]"], [
        getSnapshot,
        memoizePreviousSnapshot
    ]);
    const subscribe = useCallback$1({
        "useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[subscribe]": (notify)=>{
            const store = storeRef.current;
            const subscription = subscribeToRecoilValue$1(store, recoilValue, notify, componentName);
            return subscription.release;
        }
    }["useRecoilValueLoadable_SYNC_EXTERNAL_STORE.useCallback$1[subscribe]"], [
        storeRef,
        recoilValue,
        componentName
    ]);
    return useSyncExternalStore$1(subscribe, getMemoizedSnapshot, getMemoizedSnapshot // getServerSnapshot() for SSR support
    ).loadable;
}
function useRecoilValueLoadable_MUTABLE_SOURCE(recoilValue) {
    const storeRef = useStoreRef$2();
    const getLoadable = useCallback$1({
        "useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[getLoadable]": ()=>{
            var _storeState$nextTree3;
            const store = storeRef.current;
            const storeState = store.getState();
            const treeState = reactMode$3().early ? (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree : storeState.currentTree;
            return getRecoilValueAsLoadable$2(store, recoilValue, treeState);
        }
    }["useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[getLoadable]"], [
        storeRef,
        recoilValue
    ]);
    const getLoadableWithTesting = useCallback$1({
        "useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[getLoadableWithTesting]": ()=>{
            if ("TURBOPACK compile-time truthy", 1) {
                recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
            }
            return getLoadable();
        }
    }["useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[getLoadableWithTesting]"], [
        getLoadable
    ]);
    const componentName = Recoil_useComponentName();
    const subscribe = useCallback$1({
        "useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[subscribe]": (_storeState, notify)=>{
            const store = storeRef.current;
            const subscription = subscribeToRecoilValue$1(store, recoilValue, {
                "useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[subscribe].subscription": ()=>{
                    if (!Recoil_gkx('recoil_suppress_rerender_in_callback')) {
                        return notify();
                    } // Only re-render if the value has changed.
                    // This will evaluate the atom/selector now as well as when the
                    // component renders, but that may help with prefetching.
                    const newLoadable = getLoadable();
                    if (!prevLoadableRef.current.is(newLoadable)) {
                        notify();
                    } // If the component is suspended then the effect setting prevLoadableRef
                    // will not run.  So, set the previous value here when its subscription
                    // is fired to wake it up.  We can't just rely on this, though, because
                    // this only executes when an atom/selector is dirty and the atom/selector
                    // passed to the hook can dynamically change.
                    prevLoadableRef.current = newLoadable;
                }
            }["useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[subscribe].subscription"], componentName);
            return subscription.release;
        }
    }["useRecoilValueLoadable_MUTABLE_SOURCE.useCallback$1[subscribe]"], [
        storeRef,
        recoilValue,
        componentName,
        getLoadable
    ]);
    const source = useRecoilMutableSource$1();
    if (source == null) {
        throw Recoil_err('Recoil hooks must be used in components contained within a <RecoilRoot> component.');
    }
    const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);
    const prevLoadableRef = useRef$4(loadable);
    useEffect$3({
        "useRecoilValueLoadable_MUTABLE_SOURCE.useEffect$3": ()=>{
            prevLoadableRef.current = loadable;
        }
    }["useRecoilValueLoadable_MUTABLE_SOURCE.useEffect$3"]);
    return loadable;
}
function useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue) {
    const storeRef = useStoreRef$2();
    const componentName = Recoil_useComponentName(); // Accessors to get the current state
    const getLoadable = useCallback$1({
        "useRecoilValueLoadable_TRANSITION_SUPPORT.useCallback$1[getLoadable]": ()=>{
            var _storeState$nextTree4;
            if ("TURBOPACK compile-time truthy", 1) {
                recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
            }
            const store = storeRef.current;
            const storeState = store.getState();
            const treeState = reactMode$3().early ? (_storeState$nextTree4 = storeState.nextTree) !== null && _storeState$nextTree4 !== void 0 ? _storeState$nextTree4 : storeState.currentTree : storeState.currentTree;
            return getRecoilValueAsLoadable$2(store, recoilValue, treeState);
        }
    }["useRecoilValueLoadable_TRANSITION_SUPPORT.useCallback$1[getLoadable]"], [
        storeRef,
        recoilValue
    ]);
    const getState = useCallback$1({
        "useRecoilValueLoadable_TRANSITION_SUPPORT.useCallback$1[getState]": ()=>({
                loadable: getLoadable(),
                key: recoilValue.key
            })
    }["useRecoilValueLoadable_TRANSITION_SUPPORT.useCallback$1[getState]"], [
        getLoadable,
        recoilValue.key
    ]); // Memoize state snapshots
    const updateState = useCallback$1({
        "useRecoilValueLoadable_TRANSITION_SUPPORT.useCallback$1[updateState]": (prevState)=>{
            const nextState = getState();
            return prevState.loadable.is(nextState.loadable) && prevState.key === nextState.key ? prevState : nextState;
        }
    }["useRecoilValueLoadable_TRANSITION_SUPPORT.useCallback$1[updateState]"], [
        getState
    ]); // Subscribe to Recoil state changes
    useEffect$3({
        "useRecoilValueLoadable_TRANSITION_SUPPORT.useEffect$3": ()=>{
            const subscription = subscribeToRecoilValue$1(storeRef.current, recoilValue, {
                "useRecoilValueLoadable_TRANSITION_SUPPORT.useEffect$3.subscription": (_state)=>{
                    setState(updateState);
                }
            }["useRecoilValueLoadable_TRANSITION_SUPPORT.useEffect$3.subscription"], componentName); // Update state in case we are using a different key
            setState(updateState);
            return subscription.release;
        }
    }["useRecoilValueLoadable_TRANSITION_SUPPORT.useEffect$3"], [
        componentName,
        recoilValue,
        storeRef,
        updateState
    ]); // Get the current state
    const [state, setState] = useState$1(getState); // If we changed keys, then return the state for the new key.
    // This is important in case the old key would cause the component to suspend.
    // We don't have to set the new state here since the subscribing effect above
    // will do that.
    return state.key !== recoilValue.key ? getState().loadable : state.loadable;
}
function useRecoilValueLoadable_LEGACY(recoilValue) {
    const storeRef = useStoreRef$2(); // eslint-disable-next-line fb-www/react-no-unused-state-hook
    const [, forceUpdate] = useState$1([]);
    const componentName = Recoil_useComponentName();
    const getLoadable = useCallback$1({
        "useRecoilValueLoadable_LEGACY.useCallback$1[getLoadable]": ()=>{
            var _storeState$nextTree5;
            if ("TURBOPACK compile-time truthy", 1) {
                recoilComponentGetRecoilValueCount_FOR_TESTING.current++;
            }
            const store = storeRef.current;
            const storeState = store.getState();
            const treeState = reactMode$3().early ? (_storeState$nextTree5 = storeState.nextTree) !== null && _storeState$nextTree5 !== void 0 ? _storeState$nextTree5 : storeState.currentTree : storeState.currentTree;
            return getRecoilValueAsLoadable$2(store, recoilValue, treeState);
        }
    }["useRecoilValueLoadable_LEGACY.useCallback$1[getLoadable]"], [
        storeRef,
        recoilValue
    ]);
    const loadable = getLoadable();
    const prevLoadableRef = useRef$4(loadable);
    useEffect$3({
        "useRecoilValueLoadable_LEGACY.useEffect$3": ()=>{
            prevLoadableRef.current = loadable;
        }
    }["useRecoilValueLoadable_LEGACY.useEffect$3"]);
    useEffect$3({
        "useRecoilValueLoadable_LEGACY.useEffect$3": ()=>{
            const store = storeRef.current;
            const storeState = store.getState();
            const subscription = subscribeToRecoilValue$1(store, recoilValue, {
                "useRecoilValueLoadable_LEGACY.useEffect$3.subscription": (_state)=>{
                    var _prevLoadableRef$curr;
                    if (!Recoil_gkx('recoil_suppress_rerender_in_callback')) {
                        return forceUpdate([]);
                    }
                    const newLoadable = getLoadable();
                    if (!((_prevLoadableRef$curr = prevLoadableRef.current) !== null && _prevLoadableRef$curr !== void 0 && _prevLoadableRef$curr.is(newLoadable))) {
                        // $FlowFixMe[incompatible-call]
                        forceUpdate(newLoadable);
                    }
                    prevLoadableRef.current = newLoadable;
                }
            }["useRecoilValueLoadable_LEGACY.useEffect$3.subscription"], componentName);
            /**
     * Since we're subscribing in an effect we need to update to the latest
     * value of the atom since it may have changed since we rendered. We can
     * go ahead and do that now, unless we're in the middle of a batch --
     * in which case we should do it at the end of the batch, due to the
     * following edge case: Suppose an atom is updated in another useEffect
     * of this same component. Then the following sequence of events occur:
     * 1. Atom is updated and subs fired (but we may not be subscribed
     *    yet depending on order of effects, so we miss this) Updated value
     *    is now in nextTree, but not currentTree.
     * 2. This effect happens. We subscribe and update.
     * 3. From the update we re-render and read currentTree, with old value.
     * 4. Batcher's effect sets currentTree to nextTree.
     * In this sequence we miss the update. To avoid that, add the update
     * to queuedComponentCallback if a batch is in progress.
     */ if (storeState.nextTree) {
                store.getState().queuedComponentCallbacks_DEPRECATED.push({
                    "useRecoilValueLoadable_LEGACY.useEffect$3": ()=>{
                        // $FlowFixMe[incompatible-type]
                        prevLoadableRef.current = null;
                        forceUpdate([]);
                    }
                }["useRecoilValueLoadable_LEGACY.useEffect$3"]);
            } else {
                var _prevLoadableRef$curr2;
                if (!Recoil_gkx('recoil_suppress_rerender_in_callback')) {
                    return forceUpdate([]);
                }
                const newLoadable = getLoadable();
                if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) !== null && _prevLoadableRef$curr2 !== void 0 && _prevLoadableRef$curr2.is(newLoadable))) {
                    // $FlowFixMe[incompatible-call]
                    forceUpdate(newLoadable);
                }
                prevLoadableRef.current = newLoadable;
            }
            return subscription.release;
        }
    }["useRecoilValueLoadable_LEGACY.useEffect$3"], [
        componentName,
        getLoadable,
        recoilValue,
        storeRef
    ]);
    return loadable;
}
/**
  Like useRecoilValue(), but either returns the value if available or
  just undefined if not available for any reason, such as pending or error.
*/ function useRecoilValueLoadable(recoilValue) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilValue, 'useRecoilValueLoadable');
    }
    if (Recoil_gkx('recoil_memory_managament_2020')) {
        // eslint-disable-next-line fb-www/react-hooks
        Recoil_useRetain(recoilValue);
    }
    return ({
        TRANSITION_SUPPORT: useRecoilValueLoadable_TRANSITION_SUPPORT,
        // Recoil will attemp to detect if `useSyncExternalStore()` is supported with
        // `reactMode()` before calling it.  However, sometimes the host React
        // environment supports it but uses additional React renderers (such as with
        // `react-three-fiber`) which do not.  While this is technically a user issue
        // by using a renderer with React 18+ that doesn't fully support React 18 we
        // don't want to break users if it can be avoided. As the current renderer can
        // change at runtime, we need to dynamically check and fallback if necessary.
        SYNC_EXTERNAL_STORE: currentRendererSupportsUseSyncExternalStore$1() ? useRecoilValueLoadable_SYNC_EXTERNAL_STORE : useRecoilValueLoadable_TRANSITION_SUPPORT,
        MUTABLE_SOURCE: useRecoilValueLoadable_MUTABLE_SOURCE,
        LEGACY: useRecoilValueLoadable_LEGACY
    })[reactMode$3().mode](recoilValue);
}
/**
  Returns the value represented by the RecoilValue.
  If the value is pending, it will throw a Promise to suspend the component,
  if the value is an error it will throw it for the nearest React error boundary.
  This will also subscribe the component for any updates in the value.
  */ function useRecoilValue(recoilValue) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilValue, 'useRecoilValue');
    }
    const storeRef = useStoreRef$2();
    const loadable = useRecoilValueLoadable(recoilValue);
    return handleLoadable(loadable, recoilValue, storeRef);
}
/**
  Returns a function that allows the value of a RecoilState to be updated, but does
  not subscribe the component to changes to that RecoilState.
*/ function useSetRecoilState(recoilState) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilState, 'useSetRecoilState');
    }
    const storeRef = useStoreRef$2();
    return useCallback$1({
        "useSetRecoilState.useCallback$1": (newValueOrUpdater)=>{
            setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
        }
    }["useSetRecoilState.useCallback$1"], [
        storeRef,
        recoilState
    ]);
}
/**
  Returns a function that will reset the value of a RecoilState to its default
*/ function useResetRecoilState(recoilState) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilState, 'useResetRecoilState');
    }
    const storeRef = useStoreRef$2();
    return useCallback$1({
        "useResetRecoilState.useCallback$1": ()=>{
            setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$2);
        }
    }["useResetRecoilState.useCallback$1"], [
        storeRef,
        recoilState
    ]);
}
/**
  Equivalent to useState(). Allows the value of the RecoilState to be read and written.
  Subsequent updates to the RecoilState will cause the component to re-render. If the
  RecoilState is pending, this will suspend the component and initiate the
  retrieval of the value. If evaluating the RecoilState resulted in an error, this will
  throw the error so that the nearest React error boundary can catch it.
*/ function useRecoilState(recoilState) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilState, 'useRecoilState');
    }
    return [
        useRecoilValue(recoilState),
        useSetRecoilState(recoilState)
    ];
}
/**
  Like useRecoilState(), but does not cause Suspense or React error handling. Returns
  an object that indicates whether the RecoilState is available, pending, or
  unavailable due to an error.
*/ function useRecoilStateLoadable(recoilState) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilState, 'useRecoilStateLoadable');
    }
    return [
        useRecoilValueLoadable(recoilState),
        useSetRecoilState(recoilState)
    ];
}
function useSetUnvalidatedAtomValues() {
    const storeRef = useStoreRef$2();
    return (values, transactionMetadata = {})=>{
        batchUpdates$2(()=>{
            storeRef.current.addTransactionMetadata(transactionMetadata);
            values.forEach((value, key)=>setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));
        });
    };
}
/**
 * Experimental variants of hooks with support for useTransition()
 */ function useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilValue, 'useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE');
        if (!reactMode$3().early) {
            Recoil_recoverableViolation('Attepmt to use a hook with UNSTABLE_TRANSITION_SUPPORT in a rendering mode incompatible with concurrent rendering.  Try enabling the recoil_sync_external_store or recoil_transition_support GKs.');
        }
    }
    if (Recoil_gkx('recoil_memory_managament_2020')) {
        // eslint-disable-next-line fb-www/react-hooks
        Recoil_useRetain(recoilValue);
    }
    return useRecoilValueLoadable_TRANSITION_SUPPORT(recoilValue);
}
function useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilValue) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilValue, 'useRecoilValue_TRANSITION_SUPPORT_UNSTABLE');
    }
    const storeRef = useStoreRef$2();
    const loadable = useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE(recoilValue);
    return handleLoadable(loadable, recoilValue, storeRef);
}
function useRecoilState_TRANSITION_SUPPORT_UNSTABLE(recoilState) {
    if ("TURBOPACK compile-time truthy", 1) {
        validateRecoilValue(recoilState, 'useRecoilState_TRANSITION_SUPPORT_UNSTABLE');
    }
    return [
        useRecoilValue_TRANSITION_SUPPORT_UNSTABLE(recoilState),
        useSetRecoilState(recoilState)
    ];
}
var Recoil_Hooks = {
    recoilComponentGetRecoilValueCount_FOR_TESTING,
    useRecoilInterface: useRecoilInterface_DEPRECATED,
    useRecoilState,
    useRecoilStateLoadable,
    useRecoilValue,
    useRecoilValueLoadable,
    useResetRecoilState,
    useSetRecoilState,
    useSetUnvalidatedAtomValues,
    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE,
    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE,
    useRecoilState_TRANSITION_SUPPORT_UNSTABLE
};
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Returns a map containing all of the keys + values from the original map where
 * the given callback returned true.
 */ function filterMap(map, callback) {
    const result = new Map();
    for (const [key, value] of map){
        if (callback(value, key)) {
            result.set(key, value);
        }
    }
    return result;
}
var Recoil_filterMap = filterMap;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ /**
 * Returns a set containing all of the values from the original set where
 * the given callback returned true.
 */ function filterSet(set, callback) {
    const result = new Set();
    for (const value of set){
        if (callback(value)) {
            result.add(value);
        }
    }
    return result;
}
var Recoil_filterSet = filterSet;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function mergeMaps(...maps) {
    const result = new Map();
    for(let i = 0; i < maps.length; i++){
        const iterator = maps[i].keys();
        let nextKey;
        while(!(nextKey = iterator.next()).done){
            // $FlowIssue[incompatible-call] - map/iterator knows nothing about flow types
            result.set(nextKey.value, maps[i].get(nextKey.value));
        }
    }
    return result;
}
var Recoil_mergeMaps = mergeMaps;
const { batchUpdates: batchUpdates$3 } = Recoil_Batching;
const { DEFAULT_VALUE: DEFAULT_VALUE$3, getNode: getNode$4, nodes: nodes$1 } = Recoil_Node;
const { useStoreRef: useStoreRef$3 } = Recoil_RecoilRoot;
const { AbstractRecoilValue: AbstractRecoilValue$4, setRecoilValueLoadable: setRecoilValueLoadable$1 } = Recoil_RecoilValueInterface;
const { SUSPENSE_TIMEOUT_MS: SUSPENSE_TIMEOUT_MS$2 } = Recoil_Retention;
const { cloneSnapshot: cloneSnapshot$1 } = Recoil_Snapshot$1;
const { useCallback: useCallback$2, useEffect: useEffect$4, useRef: useRef$5, useState: useState$2 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
const { isSSR: isSSR$4 } = Recoil_Environment;
function useTransactionSubscription(callback) {
    const storeRef = useStoreRef$3();
    useEffect$4({
        "useTransactionSubscription.useEffect$4": ()=>{
            const sub = storeRef.current.subscribeToTransactions(callback);
            return sub.release;
        }
    }["useTransactionSubscription.useEffect$4"], [
        callback,
        storeRef
    ]);
}
function externallyVisibleAtomValuesInState(state) {
    const atomValues = state.atomValues.toMap();
    const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k)=>{
        const node = getNode$4(k);
        const persistence = node.persistence_UNSTABLE;
        return persistence != null && persistence.type !== 'none' && v.state === 'hasValue';
    }), (v)=>v.contents); // Merge in nonvalidated atoms; we may not have defs for them but they will
    // all have persistence on or they wouldn't be there in the first place.
    return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);
}
/**
  Calls the given callback after any atoms have been modified and the consequent
  component re-renders have been committed. This is intended for persisting
  the values of the atoms to storage. The stored values can then be restored
  using the useSetUnvalidatedAtomValues hook.

  The callback receives the following info:

  atomValues: The current value of every atom that is both persistable (persistence
              type not set to 'none') and whose value is available (not in an
              error or loading state).

  previousAtomValues: The value of every persistable and available atom before
               the transaction began.

  atomInfo: A map containing the persistence settings for each atom. Every key
            that exists in atomValues will also exist in atomInfo.

  modifiedAtoms: The set of atoms that were written to during the transaction.

  transactionMetadata: Arbitrary information that was added via the
          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues
          transaction, to avoid loops.
*/ function useTransactionObservation_DEPRECATED(callback) {
    useTransactionSubscription(useCallback$2({
        "useTransactionObservation_DEPRECATED.useTransactionSubscription.useCallback$2": (store)=>{
            let previousTree = store.getState().previousTree;
            const currentTree = store.getState().currentTree;
            if (!previousTree) {
                Recoil_recoverableViolation('Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil');
                previousTree = store.getState().currentTree; // attempt to trundle on
            }
            const atomValues = externallyVisibleAtomValuesInState(currentTree);
            const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);
            const atomInfo = Recoil_mapMap(nodes$1, {
                "useTransactionObservation_DEPRECATED.useTransactionSubscription.useCallback$2.atomInfo": (node)=>{
                    var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;
                    return {
                        persistence_UNSTABLE: {
                            type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : 'none',
                            backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false
                        }
                    };
                }
            }["useTransactionObservation_DEPRECATED.useTransactionSubscription.useCallback$2.atomInfo"]); // Filter on existance in atomValues so that externally-visible rules
            // are also applied to modified atoms (specifically exclude selectors):
            const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, {
                "useTransactionObservation_DEPRECATED.useTransactionSubscription.useCallback$2.modifiedAtoms": (k)=>atomValues.has(k) || previousAtomValues.has(k)
            }["useTransactionObservation_DEPRECATED.useTransactionSubscription.useCallback$2.modifiedAtoms"]);
            callback({
                atomValues,
                previousAtomValues,
                atomInfo,
                modifiedAtoms,
                transactionMetadata: {
                    ...currentTree.transactionMetadata
                }
            });
        }
    }["useTransactionObservation_DEPRECATED.useTransactionSubscription.useCallback$2"], [
        callback
    ]));
}
function useRecoilTransactionObserver(callback) {
    useTransactionSubscription(useCallback$2({
        "useRecoilTransactionObserver.useTransactionSubscription.useCallback$2": (store)=>{
            const snapshot = cloneSnapshot$1(store, 'latest');
            const previousSnapshot = cloneSnapshot$1(store, 'previous');
            callback({
                snapshot,
                previousSnapshot
            });
        }
    }["useRecoilTransactionObserver.useTransactionSubscription.useCallback$2"], [
        callback
    ]));
} // Return a snapshot of the current state and subscribe to all state changes
function useRecoilSnapshot() {
    const storeRef = useStoreRef$3();
    const [snapshot, setSnapshot] = useState$2({
        "useRecoilSnapshot.useState$2": ()=>cloneSnapshot$1(storeRef.current)
    }["useRecoilSnapshot.useState$2"]);
    const previousSnapshot = Recoil_usePrevious(snapshot);
    const timeoutID = useRef$5();
    const releaseRef = useRef$5();
    useTransactionSubscription(useCallback$2({
        "useRecoilSnapshot.useTransactionSubscription.useCallback$2": (store)=>setSnapshot(cloneSnapshot$1(store))
    }["useRecoilSnapshot.useTransactionSubscription.useCallback$2"], [])); // Retain snapshot for duration component is mounted
    useEffect$4({
        "useRecoilSnapshot.useEffect$4": ()=>{
            const release = snapshot.retain(); // Release the retain from the rendering call
            if (timeoutID.current && !isSSR$4) {
                var _releaseRef$current;
                window.clearTimeout(timeoutID.current);
                timeoutID.current = null;
                (_releaseRef$current = releaseRef.current) === null || _releaseRef$current === void 0 ? void 0 : _releaseRef$current.call(releaseRef);
                releaseRef.current = null;
            }
            return ({
                "useRecoilSnapshot.useEffect$4": ()=>{
                    // Defer the release.  If "Fast Refresh"" is used then the component may
                    // re-render with the same state.  The previous cleanup will then run and
                    // then the new effect will run. We don't want the snapshot to be released
                    // by that cleanup before the new effect has a chance to retain it again.
                    // Use timeout of 10 to workaround Firefox issue: https://github.com/facebookexperimental/Recoil/issues/1936
                    window.setTimeout(release, 10);
                }
            })["useRecoilSnapshot.useEffect$4"];
        }
    }["useRecoilSnapshot.useEffect$4"], [
        snapshot
    ]); // Retain snapshot until above effect is run.
    // Release after a threshold in case component is suspended.
    if (previousSnapshot !== snapshot && !isSSR$4) {
        // Release the previous snapshot
        if (timeoutID.current) {
            var _releaseRef$current2;
            window.clearTimeout(timeoutID.current);
            timeoutID.current = null;
            (_releaseRef$current2 = releaseRef.current) === null || _releaseRef$current2 === void 0 ? void 0 : _releaseRef$current2.call(releaseRef);
            releaseRef.current = null;
        }
        releaseRef.current = snapshot.retain();
        timeoutID.current = window.setTimeout(()=>{
            var _releaseRef$current3;
            timeoutID.current = null;
            (_releaseRef$current3 = releaseRef.current) === null || _releaseRef$current3 === void 0 ? void 0 : _releaseRef$current3.call(releaseRef);
            releaseRef.current = null;
        }, SUSPENSE_TIMEOUT_MS$2);
    }
    return snapshot;
}
function gotoSnapshot(store, snapshot) {
    var _storeState$nextTree;
    const storeState = store.getState();
    const prev = (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree;
    const next = snapshot.getStore_INTERNAL().getState().currentTree;
    batchUpdates$3(()=>{
        const keysToUpdate = new Set();
        for (const keys of [
            prev.atomValues.keys(),
            next.atomValues.keys()
        ]){
            for (const key of keys){
                var _prev$atomValues$get, _next$atomValues$get;
                if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {
                    keysToUpdate.add(key);
                }
            }
        }
        keysToUpdate.forEach((key)=>{
            setRecoilValueLoadable$1(store, new AbstractRecoilValue$4(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);
        });
        store.replaceState((state)=>({
                ...state,
                stateID: snapshot.getID()
            }));
    });
}
function useGotoRecoilSnapshot() {
    const storeRef = useStoreRef$3();
    return useCallback$2({
        "useGotoRecoilSnapshot.useCallback$2": (snapshot)=>gotoSnapshot(storeRef.current, snapshot)
    }["useGotoRecoilSnapshot.useCallback$2"], [
        storeRef
    ]);
}
var Recoil_SnapshotHooks = {
    useRecoilSnapshot,
    gotoSnapshot,
    useGotoRecoilSnapshot,
    useRecoilTransactionObserver,
    useTransactionObservation_DEPRECATED,
    useTransactionSubscription_DEPRECATED: useTransactionSubscription
};
const { peekNodeInfo: peekNodeInfo$2 } = Recoil_FunctionalCore;
const { useStoreRef: useStoreRef$4 } = Recoil_RecoilRoot;
function useGetRecoilValueInfo() {
    const storeRef = useStoreRef$4(); // $FlowFixMe[incompatible-return]
    return ({ key })=>peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
}
var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
const { reactMode: reactMode$4 } = Recoil_ReactMode;
const { RecoilRoot: RecoilRoot$1, useStoreRef: useStoreRef$5 } = Recoil_RecoilRoot;
const { useMemo: useMemo$2 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
function useRecoilBridgeAcrossReactRoots() {
    // The test fails when using useMutableSource(), but only if act() is used
    // for the nested root.  So, this may only be a testing environment issue.
    if (reactMode$4().mode === 'MUTABLE_SOURCE') {
        // eslint-disable-next-line fb-www/no-console
        console.warn('Warning: There are known issues using useRecoilBridgeAcrossReactRoots() in recoil_mutable_source rendering mode.  Please consider upgrading to recoil_sync_external_store mode.');
    }
    const store = useStoreRef$5().current;
    return useMemo$2({
        "useRecoilBridgeAcrossReactRoots.useMemo$2": ()=>{
            // eslint-disable-next-line no-shadow
            function RecoilBridge({ children }) {
                return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(RecoilRoot$1, {
                    store_INTERNAL: store
                }, children);
            }
            return RecoilBridge;
        }
    }["useRecoilBridgeAcrossReactRoots.useMemo$2"], [
        store
    ]);
}
var Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;
const { loadableWithValue: loadableWithValue$1 } = Recoil_Loadable$1;
const { initializeNode: initializeNode$3 } = Recoil_FunctionalCore;
const { DEFAULT_VALUE: DEFAULT_VALUE$4, getNode: getNode$5 } = Recoil_Node;
const { copyTreeState: copyTreeState$1, getRecoilValueAsLoadable: getRecoilValueAsLoadable$3, invalidateDownstreams: invalidateDownstreams$1, writeLoadableToTreeState: writeLoadableToTreeState$1 } = Recoil_RecoilValueInterface;
function isAtom(recoilValue) {
    return getNode$5(recoilValue.key).nodeType === 'atom';
}
class TransactionInterfaceImpl {
    constructor(store, treeState){
        _defineProperty(this, "_store", void 0);
        _defineProperty(this, "_treeState", void 0);
        _defineProperty(this, "_changes", void 0);
        _defineProperty(this, "get", (recoilValue)=>{
            if (this._changes.has(recoilValue.key)) {
                // $FlowIssue[incompatible-return]
                return this._changes.get(recoilValue.key);
            }
            if (!isAtom(recoilValue)) {
                throw Recoil_err('Reading selectors within atomicUpdate is not supported');
            }
            const loadable = getRecoilValueAsLoadable$3(this._store, recoilValue, this._treeState);
            if (loadable.state === 'hasValue') {
                return loadable.contents;
            } else if (loadable.state === 'hasError') {
                throw loadable.contents;
            } else {
                throw Recoil_err(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);
            }
        });
        _defineProperty(this, "set", (recoilState, valueOrUpdater)=>{
            if (!isAtom(recoilState)) {
                throw Recoil_err('Setting selectors within atomicUpdate is not supported');
            }
            if (typeof valueOrUpdater === 'function') {
                const current = this.get(recoilState);
                this._changes.set(recoilState.key, valueOrUpdater(current)); // flowlint-line unclear-type:off
            } else {
                // Initialize atom and run effects if not initialized yet
                initializeNode$3(this._store, recoilState.key, 'set');
                this._changes.set(recoilState.key, valueOrUpdater);
            }
        });
        _defineProperty(this, "reset", (recoilState)=>{
            this.set(recoilState, DEFAULT_VALUE$4);
        });
        this._store = store;
        this._treeState = treeState;
        this._changes = new Map();
    }
    // eslint-disable-next-line fb-www/extra-arrow-initializer
    newTreeState_INTERNAL() {
        if (this._changes.size === 0) {
            return this._treeState;
        }
        const newState = copyTreeState$1(this._treeState);
        for (const [k, v] of this._changes){
            writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));
        }
        invalidateDownstreams$1(this._store, newState);
        return newState;
    }
}
function atomicUpdater(store) {
    return (fn)=>{
        store.replaceState((treeState)=>{
            const changeset = new TransactionInterfaceImpl(store, treeState);
            fn(changeset);
            return changeset.newTreeState_INTERNAL();
        });
    };
}
var Recoil_AtomicUpdates = {
    atomicUpdater
};
var Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;
var Recoil_AtomicUpdates$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    atomicUpdater: Recoil_AtomicUpdates_1
});
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function invariant(condition, message) {
    if (!condition) {
        throw new Error(message);
    }
}
var invariant_1 = invariant;
// @oss-only
var Recoil_invariant = invariant_1;
const { atomicUpdater: atomicUpdater$1 } = Recoil_AtomicUpdates$1;
const { batchUpdates: batchUpdates$4 } = Recoil_Batching;
const { DEFAULT_VALUE: DEFAULT_VALUE$5 } = Recoil_Node;
const { useStoreRef: useStoreRef$6 } = Recoil_RecoilRoot;
const { refreshRecoilValue: refreshRecoilValue$1, setRecoilValue: setRecoilValue$3 } = Recoil_RecoilValueInterface;
const { cloneSnapshot: cloneSnapshot$2 } = Recoil_Snapshot$1;
const { gotoSnapshot: gotoSnapshot$1 } = Recoil_SnapshotHooks;
const { useCallback: useCallback$3 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
class Sentinel {
}
const SENTINEL = new Sentinel();
function recoilCallback(store, fn, args, extraInterface) {
    let ret = SENTINEL;
    let releaseSnapshot;
    batchUpdates$4(()=>{
        const errMsg = 'useRecoilCallback() expects a function that returns a function: ' + 'it accepts a function of the type (RecoilInterface) => (Args) => ReturnType ' + 'and returns a callback function (Args) => ReturnType, where RecoilInterface is ' + 'an object {snapshot, set, ...} and Args and ReturnType are the argument and return ' + 'types of the callback you want to create.  Please see the docs ' + 'at recoiljs.org for details.';
        if (typeof fn !== 'function') {
            throw Recoil_err(errMsg);
        } // Clone the snapshot lazily to avoid overhead if the callback does not use it.
        // Note that this means the snapshot may represent later state from when
        // the callback was called if it first accesses the snapshot asynchronously.
        const callbackInterface = Recoil_lazyProxy({
            ...extraInterface !== null && extraInterface !== void 0 ? extraInterface : {},
            // flowlint-line unclear-type:off
            // $FlowFixMe[missing-local-annot]
            set: (node, newValue)=>setRecoilValue$3(store, node, newValue),
            // $FlowFixMe[missing-local-annot]
            reset: (node)=>setRecoilValue$3(store, node, DEFAULT_VALUE$5),
            // $FlowFixMe[missing-local-annot]
            refresh: (node)=>refreshRecoilValue$1(store, node),
            gotoSnapshot: (snapshot)=>gotoSnapshot$1(store, snapshot),
            transact_UNSTABLE: (transaction)=>atomicUpdater$1(store)(transaction)
        }, {
            snapshot: ()=>{
                const snapshot = cloneSnapshot$2(store);
                releaseSnapshot = snapshot.retain();
                return snapshot;
            }
        });
        const callback = fn(callbackInterface);
        if (typeof callback !== 'function') {
            throw Recoil_err(errMsg);
        }
        ret = callback(...args);
    });
    !!(ret instanceof Sentinel) ? ("TURBOPACK compile-time truthy", 1) ? Recoil_invariant(false, 'batchUpdates should return immediately') : ("TURBOPACK unreachable", undefined) : void 0;
    if (Recoil_isPromise(ret)) {
        ret = ret.finally(()=>{
            var _releaseSnapshot;
            (_releaseSnapshot = releaseSnapshot) === null || _releaseSnapshot === void 0 ? void 0 : _releaseSnapshot();
        });
    } else {
        var _releaseSnapshot2;
        (_releaseSnapshot2 = releaseSnapshot) === null || _releaseSnapshot2 === void 0 ? void 0 : _releaseSnapshot2();
    }
    return ret;
}
function useRecoilCallback(fn, deps) {
    const storeRef = useStoreRef$6();
    return useCallback$3({
        "useRecoilCallback.useCallback$3": (...args)=>{
            return recoilCallback(storeRef.current, fn, args);
        }
    }["useRecoilCallback.useCallback$3"], deps != null ? [
        ...deps,
        storeRef
    ] : undefined // eslint-disable-line fb-www/react-hooks-deps
    );
}
var Recoil_useRecoilCallback = {
    recoilCallback,
    useRecoilCallback
};
const { useStoreRef: useStoreRef$7 } = Recoil_RecoilRoot;
const { refreshRecoilValue: refreshRecoilValue$2 } = Recoil_RecoilValueInterface;
const { useCallback: useCallback$4 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
function useRecoilRefresher(recoilValue) {
    const storeRef = useStoreRef$7();
    return useCallback$4({
        "useRecoilRefresher.useCallback$4": ()=>{
            const store = storeRef.current;
            refreshRecoilValue$2(store, recoilValue);
        }
    }["useRecoilRefresher.useCallback$4"], [
        recoilValue,
        storeRef
    ]);
}
var Recoil_useRecoilRefresher = useRecoilRefresher;
const { atomicUpdater: atomicUpdater$2 } = Recoil_AtomicUpdates$1;
const { useStoreRef: useStoreRef$8 } = Recoil_RecoilRoot;
const { useMemo: useMemo$3 } = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f2e$pnpm$2f$next$40$15$2e$2$2e$1_react$2d$dom$40$19$2e$0$2e$0_react$40$19$2e$0$2e$0_$5f$react$40$19$2e$0$2e$0$2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
function useRecoilTransaction(fn, deps) {
    const storeRef = useStoreRef$8();
    return useMemo$3({
        "useRecoilTransaction.useMemo$3": ()=>({
                "useRecoilTransaction.useMemo$3": (...args)=>{
                    const atomicUpdate = atomicUpdater$2(storeRef.current);
                    atomicUpdate({
                        "useRecoilTransaction.useMemo$3": (transactionInterface)=>{
                            fn(transactionInterface)(...args);
                        }
                    }["useRecoilTransaction.useMemo$3"]);
                }
            })["useRecoilTransaction.useMemo$3"]
    }["useRecoilTransaction.useMemo$3"], deps != null ? [
        ...deps,
        storeRef
    ] : undefined // eslint-disable-line fb-www/react-hooks-deps
    );
}
var Recoil_useRecoilTransaction = useRecoilTransaction;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ class WrappedValue {
    constructor(value){
        _defineProperty(this, "value", void 0);
        this.value = value;
    }
}
var Recoil_Wrapper = {
    WrappedValue
};
var Recoil_Wrapper_1 = Recoil_Wrapper.WrappedValue;
var Recoil_Wrapper$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    WrappedValue: Recoil_Wrapper_1
});
const { isFastRefreshEnabled: isFastRefreshEnabled$2 } = Recoil_ReactMode;
class ChangedPathError extends Error {
}
class TreeCache {
    // $FlowIssue[unclear-type]
    constructor(options){
        var _options$onHit, _options$onSet, _options$mapNodeValue;
        _defineProperty(this, "_name", void 0);
        _defineProperty(this, "_numLeafs", void 0);
        _defineProperty(this, "_root", void 0);
        _defineProperty(this, "_onHit", void 0);
        _defineProperty(this, "_onSet", void 0);
        _defineProperty(this, "_mapNodeValue", void 0);
        this._name = options === null || options === void 0 ? void 0 : options.name;
        this._numLeafs = 0;
        this._root = null;
        this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : ()=>{};
        this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : ()=>{};
        this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : (val)=>val;
    }
    size() {
        return this._numLeafs;
    }
    root() {
        return this._root;
    }
    get(getNodeValue, handlers) {
        var _this$getLeafNode;
        return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;
    }
    getLeafNode(getNodeValue, handlers) {
        if (this._root == null) {
            return undefined;
        } // Iterate down the tree based on the current node values until we hit a leaf
        // $FlowIssue[unclear-type]
        let node = this._root;
        while(node){
            handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);
            if (node.type === 'leaf') {
                this._onHit(node);
                return node;
            }
            const nodeValue = this._mapNodeValue(getNodeValue(node.nodeKey));
            node = node.branches.get(nodeValue);
        }
        return undefined;
    }
    set(route, value, handlers) {
        const addLeaf = ()=>{
            var _node2, _node3, _this$_root2, _handlers$onNodeVisit2;
            // First, setup the branch nodes for the route:
            // Iterate down the tree to find or add branch nodes following the route
            let node;
            let branchKey;
            for (const [nodeKey, nodeValue] of route){
                var _node, _handlers$onNodeVisit, _this$_root;
                // If the previous root was a leaf, while we not have a get(), it means
                // the selector has inconsistent values or implementation changed.
                const root = this._root;
                if ((root === null || root === void 0 ? void 0 : root.type) === 'leaf') {
                    throw this.invalidCacheError();
                } // node now refers to the next node down in the tree
                const parent = node; // $FlowFixMe[prop-missing]
                // $FlowFixMe[incompatible-type]
                node = parent ? parent.branches.get(branchKey) : root; // $FlowFixMe[prop-missing]
                // $FlowFixMe[incompatible-type]
                node = (_node = node) !== null && _node !== void 0 ? _node : {
                    type: 'branch',
                    nodeKey,
                    parent,
                    branches: new Map(),
                    branchKey
                }; // If we found an existing node, confirm it has a consistent value
                if (node.type !== 'branch' || node.nodeKey !== nodeKey) {
                    throw this.invalidCacheError();
                } // Add the branch node to the tree
                parent === null || parent === void 0 ? void 0 : parent.branches.set(branchKey, node);
                handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, node); // Prepare for next iteration and install root if it is new.
                branchKey = this._mapNodeValue(nodeValue);
                this._root = (_this$_root = this._root) !== null && _this$_root !== void 0 ? _this$_root : node;
            } // Second, setup the leaf node:
            // If there is an existing leaf for this route confirm it is consistent
            const oldLeaf = node ? (_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.branches.get(branchKey) : this._root;
            if (oldLeaf != null && (oldLeaf.type !== 'leaf' || oldLeaf.branchKey !== branchKey)) {
                throw this.invalidCacheError();
            } // Create a new or replacement leaf.
            const leafNode = {
                type: 'leaf',
                value,
                parent: node,
                branchKey
            }; // Install the leaf and call handlers
            (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.branches.set(branchKey, leafNode);
            this._root = (_this$_root2 = this._root) !== null && _this$_root2 !== void 0 ? _this$_root2 : leafNode;
            this._numLeafs++;
            this._onSet(leafNode);
            handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, leafNode);
        };
        try {
            addLeaf();
        } catch (error) {
            // If the cache was stale or observed inconsistent values, such as with
            // Fast Refresh, then clear it and rebuild with the new values.
            if (error instanceof ChangedPathError) {
                this.clear();
                addLeaf();
            } else {
                throw error;
            }
        }
    }
    delete(leaf) {
        const root = this.root();
        if (!root) {
            return false;
        }
        if (leaf === root) {
            this._root = null;
            this._numLeafs = 0;
            return true;
        } // Iterate up from the leaf deleteing it from it's parent's branches.
        let node = leaf.parent;
        let branchKey = leaf.branchKey;
        while(node){
            var _node4;
            node.branches.delete(branchKey); // Stop iterating if we hit the root.
            if (node === root) {
                if (node.branches.size === 0) {
                    this._root = null;
                    this._numLeafs = 0;
                } else {
                    this._numLeafs--;
                }
                return true;
            } // Stop iterating if there are other branches since we don't need to
            // remove any more nodes.
            if (node.branches.size > 0) {
                break;
            } // Iterate up to our parent
            branchKey = (_node4 = node) === null || _node4 === void 0 ? void 0 : _node4.branchKey;
            node = node.parent;
        } // Confirm that the leaf we are deleting is actually attached to our tree
        for(; node !== root; node = node.parent){
            if (node == null) {
                return false;
            }
        }
        this._numLeafs--;
        return true;
    }
    clear() {
        this._numLeafs = 0;
        this._root = null;
    }
    invalidCacheError() {
        const CHANGED_PATH_ERROR_MESSAGE = isFastRefreshEnabled$2() ? 'Possible Fast Refresh module reload detected.  ' + 'This may also be caused by an selector returning inconsistent values. ' + 'Resetting cache.' : 'Invalid cache values.  This happens when selectors do not return ' + 'consistent values for the same input dependency values.  That may also ' + 'be caused when using Fast Refresh to change a selector implementation.  ' + 'Resetting cache.';
        Recoil_recoverableViolation(CHANGED_PATH_ERROR_MESSAGE + (this._name != null ? ` - ${this._name}` : ''));
        throw new ChangedPathError();
    }
}
var Recoil_TreeCache = {
    TreeCache
};
var Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;
var Recoil_TreeCache$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    TreeCache: Recoil_TreeCache_1
});
class LRUCache {
    constructor(options){
        var _options$mapKey;
        _defineProperty(this, "_maxSize", void 0);
        _defineProperty(this, "_size", void 0);
        _defineProperty(this, "_head", void 0);
        _defineProperty(this, "_tail", void 0);
        _defineProperty(this, "_map", void 0);
        _defineProperty(this, "_keyMapper", void 0);
        this._maxSize = options.maxSize;
        this._size = 0;
        this._head = null;
        this._tail = null;
        this._map = new Map();
        this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v)=>v;
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    size() {
        return this._size;
    }
    maxSize() {
        return this._maxSize;
    }
    has(key) {
        return this._map.has(this._keyMapper(key));
    }
    get(key) {
        const mappedKey = this._keyMapper(key);
        const node = this._map.get(mappedKey);
        if (!node) {
            return undefined;
        }
        this.set(key, node.value);
        return node.value;
    }
    set(key, val) {
        const mappedKey = this._keyMapper(key);
        const existingNode = this._map.get(mappedKey);
        if (existingNode) {
            this.delete(key);
        }
        const head = this.head();
        const node = {
            key,
            right: head,
            left: null,
            value: val
        };
        if (head) {
            head.left = node;
        } else {
            this._tail = node;
        }
        this._map.set(mappedKey, node);
        this._head = node;
        this._size++;
        this._maybeDeleteLRU();
    }
    _maybeDeleteLRU() {
        if (this.size() > this.maxSize()) {
            this.deleteLru();
        }
    }
    deleteLru() {
        const tail = this.tail();
        if (tail) {
            this.delete(tail.key);
        }
    }
    delete(key) {
        const mappedKey = this._keyMapper(key);
        if (!this._size || !this._map.has(mappedKey)) {
            return;
        }
        const node = Recoil_nullthrows(this._map.get(mappedKey));
        const right = node.right;
        const left = node.left;
        if (right) {
            right.left = node.left;
        }
        if (left) {
            left.right = node.right;
        }
        if (node === this.head()) {
            this._head = right;
        }
        if (node === this.tail()) {
            this._tail = left;
        }
        this._map.delete(mappedKey);
        this._size--;
    }
    clear() {
        this._size = 0;
        this._head = null;
        this._tail = null;
        this._map = new Map();
    }
}
var Recoil_LRUCache = {
    LRUCache
};
var Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;
var Recoil_LRUCache$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    LRUCache: Recoil_LRUCache_1
});
const { LRUCache: LRUCache$1 } = Recoil_LRUCache$1;
const { TreeCache: TreeCache$1 } = Recoil_TreeCache$1;
function treeCacheLRU({ name, maxSize, mapNodeValue = (v)=>v }) {
    const lruCache = new LRUCache$1({
        maxSize
    });
    const cache = new TreeCache$1({
        name,
        mapNodeValue,
        onHit: (node)=>{
            lruCache.set(node, true);
        },
        onSet: (node)=>{
            const lruNode = lruCache.tail();
            lruCache.set(node, true);
            if (lruNode && cache.size() > maxSize) {
                // $FlowFixMe[incompatible-call]
                cache.delete(lruNode.key);
            }
        }
    });
    return cache;
}
var Recoil_treeCacheLRU = treeCacheLRU;
const TIME_WARNING_THRESHOLD_MS = 15;
function stringify(x, opt, key) {
    // A optimization to avoid the more expensive JSON.stringify() for simple strings
    // This may lose protection for u2028 and u2029, though.
    if (typeof x === 'string' && !x.includes('"') && !x.includes('\\')) {
        return `"${x}"`;
    } // Handle primitive types
    switch(typeof x){
        case 'undefined':
            return '';
        // JSON.stringify(undefined) returns undefined, but we always want to return a string
        case 'boolean':
            return x ? 'true' : 'false';
        case 'number':
        case 'symbol':
            // case 'bigint': // BigInt is not supported in www
            return String(x);
        case 'string':
            // Add surrounding quotes and escape internal quotes
            return JSON.stringify(x);
        case 'function':
            if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {
                throw Recoil_err('Attempt to serialize function in a Recoil cache key');
            }
            return `__FUNCTION(${x.name})__`;
    }
    if (x === null) {
        return 'null';
    } // Fallback case for unknown types
    if (typeof x !== 'object') {
        var _JSON$stringify;
        return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';
    } // Deal with all promises as equivalent for now.
    if (Recoil_isPromise(x)) {
        return '__PROMISE__';
    } // Arrays handle recursive stringification
    if (Array.isArray(x)) {
        // $FlowFixMe[missing-local-annot]
        return `[${x.map((v, i)=>stringify(v, opt, i.toString()))}]`;
    } // If an object defines a toJSON() method, then use that to override the
    // serialization.  This matches the behavior of JSON.stringify().
    // Pass the key for compatibility.
    // Immutable.js collections define this method to allow us to serialize them.
    if (typeof x.toJSON === 'function') {
        // flowlint-next-line unclear-type: off
        return stringify(x.toJSON(key), opt, key);
    } // For built-in Maps, sort the keys in a stable order instead of the
    // default insertion order.  Support non-string keys.
    if (x instanceof Map) {
        const obj = {};
        for (const [k, v] of x){
            // Stringify will escape any nested quotes
            obj[typeof k === 'string' ? k : stringify(k, opt)] = v;
        }
        return stringify(obj, opt, key);
    } // For built-in Sets, sort the keys in a stable order instead of the
    // default insertion order.
    if (x instanceof Set) {
        return stringify(Array.from(x).sort((a, b)=>stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);
    } // Anything else that is iterable serialize as an Array.
    if (Symbol !== undefined && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === 'function') {
        // flowlint-next-line unclear-type: off
        return stringify(Array.from(x), opt, key);
    } // For all other Objects, sort the keys in a stable order.
    return `{${Object.keys(x).filter((k)=>x[k] !== undefined).sort() // stringify the key to add quotes and escape any nested slashes or quotes.
    .map((k)=>`${stringify(k, opt)}:${stringify(x[k], opt, k)}`).join(',')}}`;
} // Utility similar to JSON.stringify() except:
// * Serialize built-in Sets as an Array
// * Serialize built-in Maps as an Object.  Supports non-string keys.
// * Serialize other iterables as arrays
// * Sort the keys of Objects and Maps to have a stable order based on string conversion.
//    This overrides their default insertion order.
// * Still uses toJSON() of any object to override serialization
// * Support Symbols (though don't guarantee uniqueness)
// * We could support BigInt, but Flow doesn't seem to like it.
// See Recoil_stableStringify-test.js for examples
function stableStringify(x, opt = {
    allowFunctions: false
}) {
    if ("TURBOPACK compile-time truthy", 1) {
        if (typeof window !== 'undefined') {
            const startTime = window.performance ? window.performance.now() : 0;
            const str = stringify(x, opt);
            const endTime = window.performance ? window.performance.now() : 0;
            if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {
                /* eslint-disable fb-www/no-console */ console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);
                console.warn(x, str);
                console.groupEnd();
            /* eslint-enable fb-www/no-console */ }
            return str;
        }
    }
    return stringify(x, opt);
}
var Recoil_stableStringify = stableStringify;
const { TreeCache: TreeCache$2 } = Recoil_TreeCache$1;
const defaultPolicy = {
    equality: 'reference',
    eviction: 'keep-all',
    maxSize: Infinity
};
function treeCacheFromPolicy({ equality = defaultPolicy.equality, eviction = defaultPolicy.eviction, maxSize = defaultPolicy.maxSize } = defaultPolicy, name) {
    const valueMapper = getValueMapper(equality);
    return getTreeCache(eviction, maxSize, valueMapper, name);
}
function getValueMapper(equality) {
    switch(equality){
        case 'reference':
            return (val)=>val;
        case 'value':
            return (val)=>Recoil_stableStringify(val);
    }
    throw Recoil_err(`Unrecognized equality policy ${equality}`);
}
function getTreeCache(eviction, maxSize, mapNodeValue, name) {
    switch(eviction){
        case 'keep-all':
            return new TreeCache$2({
                name,
                mapNodeValue
            });
        case 'lru':
            return Recoil_treeCacheLRU({
                name,
                maxSize: Recoil_nullthrows(maxSize),
                mapNodeValue
            });
        case 'most-recent':
            return Recoil_treeCacheLRU({
                name,
                maxSize: 1,
                mapNodeValue
            });
    }
    throw Recoil_err(`Unrecognized eviction policy ${eviction}`);
}
var Recoil_treeCacheFromPolicy = treeCacheFromPolicy;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ function isNode(object) {
    var _ownerDocument, _doc$defaultView;
    if (typeof window === 'undefined') {
        return false;
    }
    const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;
    const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;
    return !!(object != null && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}
var Recoil_isNode = isNode;
const { isReactNative: isReactNative$1, isWindow: isWindow$1 } = Recoil_Environment;
function shouldNotBeFrozen(value) {
    // Primitives and functions:
    if (value === null || typeof value !== 'object') {
        return true;
    } // React elements:
    switch(typeof value.$$typeof){
        case 'symbol':
            return true;
        case 'number':
            return true;
    } // Immutable structures:
    if (value['@@__IMMUTABLE_ITERABLE__@@'] != null || value['@@__IMMUTABLE_KEYED__@@'] != null || value['@@__IMMUTABLE_INDEXED__@@'] != null || value['@@__IMMUTABLE_ORDERED__@@'] != null || value['@@__IMMUTABLE_RECORD__@@'] != null) {
        return true;
    } // DOM nodes:
    if (Recoil_isNode(value)) {
        return true;
    }
    if (Recoil_isPromise(value)) {
        return true;
    }
    if (value instanceof Error) {
        return true;
    }
    if (ArrayBuffer.isView(value)) {
        return true;
    } // Some environments, just as Jest, don't work with the instanceof check
    if (!isReactNative$1 && isWindow$1(value)) {
        return true;
    }
    return false;
} // Recursively freeze a value to enforce it is read-only.
// This may also have minimal performance improvements for enumerating
// objects (based on browser implementations, of course)
function deepFreezeValue(value) {
    if (typeof value !== 'object' || shouldNotBeFrozen(value)) {
        return;
    }
    Object.freeze(value); // Make all properties read-only
    for(const key in value){
        // $FlowIssue[method-unbinding] added when improving typing for this parameters
        if (Object.prototype.hasOwnProperty.call(value, key)) {
            const prop = value[key]; // Prevent infinite recurssion for circular references.
            if (typeof prop === 'object' && prop != null && !Object.isFrozen(prop)) {
                deepFreezeValue(prop);
            }
        }
    }
    Object.seal(value); // This also makes existing properties non-configurable.
}
var Recoil_deepFreezeValue = deepFreezeValue;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * This is a stub for some integration into FB internal stuff
 *
 * 
 * @format
 * @oncall recoil
 */ function startPerfBlock(_id) {
    return ()=>null;
}
var Recoil_PerformanceTimings = {
    startPerfBlock
};
const { isLoadable: isLoadable$1, loadableWithError: loadableWithError$1, loadableWithPromise: loadableWithPromise$1, loadableWithValue: loadableWithValue$2 } = Recoil_Loadable$1;
const { WrappedValue: WrappedValue$1 } = Recoil_Wrapper$1;
const { getNodeLoadable: getNodeLoadable$2, peekNodeLoadable: peekNodeLoadable$1, setNodeValue: setNodeValue$3 } = Recoil_FunctionalCore;
const { saveDepsToStore: saveDepsToStore$1 } = Recoil_Graph;
const { DEFAULT_VALUE: DEFAULT_VALUE$6, getConfigDeletionHandler: getConfigDeletionHandler$1, getNode: getNode$6, registerNode: registerNode$1 } = Recoil_Node;
const { isRecoilValue: isRecoilValue$3 } = Recoil_RecoilValue$1;
const { markRecoilValueModified: markRecoilValueModified$1 } = Recoil_RecoilValueInterface;
const { retainedByOptionWithDefault: retainedByOptionWithDefault$1 } = Recoil_Retention;
const { recoilCallback: recoilCallback$1 } = Recoil_useRecoilCallback;
const { startPerfBlock: startPerfBlock$1 } = Recoil_PerformanceTimings;
class Canceled {
}
const CANCELED = new Canceled();
/**
 * An ExecutionID is an arbitrary ID that lets us distinguish executions from
 * each other. This is necessary as we need a way of solving this problem:
 * "given 3 async executions, only update state for the 'latest' execution when
 * it finishes running regardless of when the other 2 finish". ExecutionIDs
 * provide a convenient way of identifying executions so that we can track and
 * manage them over time.
 */ const dependencyStack = []; // for detecting circular dependencies.
const waitingStores = new Map();
const getNewExecutionID = (()=>{
    let executionID = 0;
    return ()=>executionID++;
})();
/* eslint-disable no-redeclare */ function selector(options) {
    let recoilValue = null;
    const { key, get, cachePolicy_UNSTABLE: cachePolicy } = options;
    const set = options.set != null ? options.set : undefined; // flow
    if ("TURBOPACK compile-time truthy", 1) {
        if (typeof key !== 'string') {
            throw Recoil_err('A key option with a unique string value must be provided when creating a selector.');
        }
        if (typeof get !== 'function') {
            throw Recoil_err('Selectors must specify a get callback option to get the selector value.');
        }
    } // This is every discovered dependency across all executions
    const discoveredDependencyNodeKeys = new Set();
    const cache = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {
        equality: 'reference',
        eviction: 'keep-all'
    }, key);
    const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);
    const executionInfoMap = new Map();
    let liveStoresCount = 0;
    function selectorIsLive() {
        return !Recoil_gkx('recoil_memory_managament_2020') || liveStoresCount > 0;
    }
    function selectorInit(store) {
        store.getState().knownSelectors.add(key);
        liveStoresCount++;
        return ()=>{
            liveStoresCount--;
        };
    }
    function selectorShouldDeleteConfigOnRelease() {
        return getConfigDeletionHandler$1(key) !== undefined && !selectorIsLive();
    }
    function resolveAsync(store, state, executionID, loadable, depValues) {
        setCache(state, loadable, depValues);
        notifyStoresOfResolvedAsync(store, executionID);
    }
    function notifyStoresOfResolvedAsync(store, executionID) {
        if (isLatestExecution(store, executionID)) {
            clearExecutionInfo(store);
        }
        notifyWaitingStores(executionID, true);
    }
    /**
   * Notify stores to pull the selector again if a new async dep was discovered.
   * 1) Async selector adds a new dep but doesn't resolve yet.
   *    Note that deps for an async selector are based on the state when the
   *    evaluation started, in order to provide a consistent picture of state.
   * 2) But, new value of dep based on the current state might cause the selector
   *    to resolve or resolve differently.
   * 3) Therefore, this notification will pull the selector based on the current
   *    state for the components
   */ function notifyStoresOfNewAsyncDep(store, executionID) {
        if (isLatestExecution(store, executionID)) {
            const executionInfo = Recoil_nullthrows(getExecutionInfo(store));
            executionInfo.stateVersions.clear();
            notifyWaitingStores(executionID, false);
        }
    }
    function notifyWaitingStores(executionID, clearWaitlist) {
        const stores = waitingStores.get(executionID);
        if (stores != null) {
            for (const waitingStore of stores){
                markRecoilValueModified$1(waitingStore, Recoil_nullthrows(recoilValue));
            }
            if (clearWaitlist) {
                waitingStores.delete(executionID);
            }
        }
    }
    function markStoreWaitingForResolvedAsync(store, executionID) {
        let stores = waitingStores.get(executionID);
        if (stores == null) {
            waitingStores.set(executionID, stores = new Set());
        }
        stores.add(store);
    }
    /**
   * This function attaches a then() and a catch() to a promise that was
   * returned from a selector's get() (either explicitly or implicitly by
   * running a function that uses the "async" keyword). If a selector's get()
   * returns a promise, we have two possibilities:
   *
   * 1. The promise will resolve, in which case it will have completely finished
   *    executing without any remaining pending dependencies. No more retries
   *    are needed and we can proceed with updating the cache and notifying
   *    subscribers (if it is the latest execution, otherwise only the cache
   *    will be updated and subscriptions will not be fired). This is the case
   *    handled by the attached then() handler.
   *
   * 2. The promise will throw because it either has an error or it came across
   *    an async dependency that has not yet resolved, in which case we will
   *    call wrapDepdencyPromise(), whose responsibility is to handle dependency
   *    promises. This case is handled by the attached catch() handler.
   *
   * Both branches will eventually resolve to the final result of the selector
   * (or an error if a real error occurred).
   *
   * The execution will run to completion even if it is stale, and its value
   * will be cached. But stale executions will not update global state or update
   * executionInfo as that is the responsibility of the 'latest' execution.
   *
   * Note this function should not be passed a promise that was thrown--AKA a
   * dependency promise. Dependency promises should be passed to
   * wrapPendingDependencyPromise()).
   */ function wrapResultPromise(store, promise, state, depValues, executionID, loadingDepsState) {
        return promise.then((value)=>{
            if (!selectorIsLive()) {
                // The selector was released since the request began; ignore the response.
                clearExecutionInfo(store);
                throw CANCELED;
            }
            const loadable = loadableWithValue$2(value);
            resolveAsync(store, state, executionID, loadable, depValues);
            return value;
        }).catch((errorOrPromise)=>{
            if (!selectorIsLive()) {
                // The selector was released since the request began; ignore the response.
                clearExecutionInfo(store);
                throw CANCELED;
            }
            if (Recoil_isPromise(errorOrPromise)) {
                return wrapPendingDependencyPromise(store, errorOrPromise, state, depValues, executionID, loadingDepsState);
            }
            const loadable = loadableWithError$1(errorOrPromise);
            resolveAsync(store, state, executionID, loadable, depValues);
            throw errorOrPromise;
        });
    }
    /**
   * This function attaches a then() and a catch() to a promise that was
   * thrown from a selector's get(). If a selector's get() throws a promise,
   * we have two possibilities:
   *
   * 1. The promise will resolve, meaning one of our selector's dependencies is
   *    now available and we should "retry" our get() by running it again. This
   *    is the case handled by the attached then() handler.
   *
   * 2. The promise will throw because something went wrong with the dependency
   *    promise (in other words a real error occurred). This case is handled by
   *    the attached catch() handler. If the dependency promise throws, it is
   *    _always_ a real error and not another dependency promise (any dependency
   *    promises would have been handled upstream).
   *
   * The then() branch will eventually resolve to the final result of the
   * selector (or an error if a real error occurs), and the catch() will always
   * resolve to an error because the dependency promise is a promise that was
   * wrapped upstream, meaning it will only resolve to its real value or to a
   * real error.
   *
   * The execution will run to completion even if it is stale, and its value
   * will be cached. But stale executions will not update global state or update
   * executionInfo as that is the responsibility of the 'latest' execution.
   *
   * Note this function should not be passed a promise that was returned from
   * get(). The intention is that this function is only passed promises that
   * were thrown due to a pending dependency. Promises returned by get() should
   * be passed to wrapResultPromise() instead.
   */ function wrapPendingDependencyPromise(store, promise, state, existingDeps, executionID, loadingDepsState) {
        return promise.then((resolvedDep)=>{
            if (!selectorIsLive()) {
                // The selector was released since the request began; ignore the response.
                clearExecutionInfo(store);
                throw CANCELED;
            } // Check if we are handling a pending Recoil dependency or if the user
            // threw their own Promise to "suspend" a selector evaluation.  We need
            // to check that the loadingDepPromise actually matches the promise that
            // we caught in case the selector happened to catch the promise we threw
            // for a pending Recoil dependency from `getRecoilValue()` and threw
            // their own promise instead.
            if (loadingDepsState.loadingDepKey != null && loadingDepsState.loadingDepPromise === promise) {
                /**
         * Note for async atoms, this means we are changing the atom's value
         * in the store for the given version. This should be alright because
         * the version of state is now stale and a new version will have
         * already been triggered by the atom being resolved (see this logic
         * in Recoil_atom.js)
         */ state.atomValues.set(loadingDepsState.loadingDepKey, loadableWithValue$2(resolvedDep));
            } else {
                /**
         * If resolvedDepKey is not defined, the promise was a user-thrown
         * promise. User-thrown promises are an advanced feature and they
         * should be avoided in almost all cases. Using `loadable.map()` inside
         * of selectors for loading loadables and then throwing that mapped
         * loadable's promise is an example of a user-thrown promise.
         *
         * When we hit a user-thrown promise, we have to bail out of an optimization
         * where we bypass calculating selector cache keys for selectors that
         * have been previously seen for a given state (these selectors are saved in
         * state.atomValues) to avoid stale state as we have no way of knowing
         * what state changes happened (if any) in result to the promise resolving.
         *
         * Ideally we would only bail out selectors that are in the chain of
         * dependencies for this selector, but there's currently no way to get
         * a full list of a selector's downstream nodes because the state that
         * is executing may be a discarded tree (so store.getGraph(state.version)
         * will be empty), and the full dep tree may not be in the selector
         * caches in the case where the selector's cache was cleared. To solve
         * for this we would have to keep track of all running selector
         * executions and their downstream deps. Because this only covers edge
         * cases, that complexity might not be justifyable.
         */ store.getState().knownSelectors.forEach((nodeKey)=>{
                    state.atomValues.delete(nodeKey);
                });
            }
            /**
       * Optimization: Now that the dependency has resolved, let's try hitting
       * the cache in case the dep resolved to a value we have previously seen.
       *
       * TODO:
       * Note this optimization is not perfect because it only prevents re-executions
       * _after_ the point where an async dependency is found. Any code leading
       * up to the async dependency may have run unnecessarily. The ideal case
       * would be to wait for the async dependency to resolve first, check the
       * cache, and prevent _any_ execution of the selector if the resulting
       * value of the dependency leads to a path that is found in the cache.
       * The ideal case is more difficult to implement as it would require that
       * we capture and wait for the the async dependency right after checking
       * the cache. The current approach takes advantage of the fact that running
       * the selector already has a code path that lets us exit early when
       * an async dep resolves.
       */ const cachedLoadable = getLoadableFromCacheAndUpdateDeps(store, state);
            if (cachedLoadable && cachedLoadable.state !== 'loading') {
                /**
         * This has to notify stores of a resolved async, even if there is no
         * current pending execution for the following case:
         * 1) A component renders with this pending loadable.
         * 2) The upstream dependency resolves.
         * 3) While processing some other selector it reads this one, such as
         *    while traversing its dependencies.  At this point it gets the
         *    new resolved value synchronously and clears the current
         *    execution ID.  The component wasn't getting the value itself,
         *    though, so it still has the pending loadable.
         * 4) When this code executes the current execution id was cleared
         *    and it wouldn't notify the component of the new value.
         *
         * I think this is only an issue with "early" rendering since the
         * components got their value using the in-progress execution.
         * We don't have a unit test for this case yet.  I'm not sure it is
         * necessary with recoil_transition_support mode.
         */ if (isLatestExecution(store, executionID) || getExecutionInfo(store) == null) {
                    notifyStoresOfResolvedAsync(store, executionID);
                }
                if (cachedLoadable.state === 'hasValue') {
                    return cachedLoadable.contents;
                } else {
                    throw cachedLoadable.contents;
                }
            }
            /**
       * If this execution is stale, let's check to see if there is some in
       * progress execution with a matching state. If we find a match, then
       * we can take the value from that in-progress execution. Note this may
       * sound like an edge case, but may be very common in cases where a
       * loading dependency resolves from loading to having a value (thus
       * possibly triggering a re-render), and React re-renders before the
       * chained .then() functions run, thus starting a new execution as the
       * dep has changed value. Without this check we will run the selector
       * twice (once in the new execution and once again in this .then(), so
       * this check is necessary to keep unnecessary re-executions to a
       * minimum).
       *
       * Also note this code does not check across all executions that may be
       * running. It only optimizes for the _latest_ execution per store as
       * we currently do not maintain a list of all currently running executions.
       * This means in some cases we may run selectors more than strictly
       * necessary when there are multiple executions running for the same
       * selector. This may be a valid tradeoff as checking for dep changes
       * across all in-progress executions may take longer than just
       * re-running the selector. This will be app-dependent, and maybe in the
       * future we can make the behavior configurable. An ideal fix may be
       * to extend the tree cache to support caching loading states.
       */ if (!isLatestExecution(store, executionID)) {
                const executionInfo = getInProgressExecutionInfo(store, state);
                if (executionInfo != null) {
                    /**
           * Returning promise here without wrapping as the wrapper logic was
           * already done upstream when this promise was generated.
           */ return executionInfo.loadingLoadable.contents;
                }
            } // Retry the selector evaluation now that the dependency has resolved
            const [loadable, depValues] = evaluateSelectorGetter(store, state, executionID);
            if (loadable.state !== 'loading') {
                resolveAsync(store, state, executionID, loadable, depValues);
            }
            if (loadable.state === 'hasError') {
                throw loadable.contents;
            }
            return loadable.contents;
        }).catch((error)=>{
            // The selector was released since the request began; ignore the response.
            if (error instanceof Canceled) {
                throw CANCELED;
            }
            if (!selectorIsLive()) {
                clearExecutionInfo(store);
                throw CANCELED;
            }
            const loadable = loadableWithError$1(error);
            resolveAsync(store, state, executionID, loadable, existingDeps);
            throw error;
        });
    }
    function updateDeps(store, state, deps, executionID) {
        var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;
        if (isLatestExecution(store, executionID) || state.version === ((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {
            var _store$getState$nextT, _store$getState3, _store$getState3$next;
            saveDepsToStore$1(key, deps, store, (_store$getState$nextT = (_store$getState3 = store.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree.version);
        }
        for (const nodeKey of deps){
            discoveredDependencyNodeKeys.add(nodeKey);
        }
    }
    function evaluateSelectorGetter(store, state, executionID) {
        const endPerfBlock = startPerfBlock$1(key); // TODO T63965866: use execution ID here
        let duringSynchronousExecution = true;
        let duringAsynchronousExecution = true;
        const finishEvaluation = ()=>{
            endPerfBlock();
            duringAsynchronousExecution = false;
        };
        let result;
        let resultIsError = false;
        let loadable;
        const loadingDepsState = {
            loadingDepKey: null,
            loadingDepPromise: null
        };
        /**
     * Starting a fresh set of deps that we'll be using to update state. We're
     * starting a new set versus adding it in existing state deps because
     * the version of state that we update deps for may be a more recent version
     * than the version the selector was called with. This is because the latest
     * execution will update the deps of the current/latest version of state
     * (This is safe to do because the fact that the selector is the latest
     * execution means the deps we discover below are our best guess at the
     * deps for the current/latest state in the store)
     */ const depValues = new Map();
        function getRecoilValue({ key: depKey }) {
            const depLoadable = getNodeLoadable$2(store, state, depKey);
            depValues.set(depKey, depLoadable); // We need to update asynchronous dependencies as we go so the selector
            // knows if it has to restart evaluation if one of them is updated before
            // the asynchronous selector completely resolves.
            if (!duringSynchronousExecution) {
                updateDeps(store, state, new Set(depValues.keys()), executionID);
                notifyStoresOfNewAsyncDep(store, executionID);
            }
            switch(depLoadable.state){
                case 'hasValue':
                    return depLoadable.contents;
                case 'hasError':
                    throw depLoadable.contents;
                case 'loading':
                    loadingDepsState.loadingDepKey = depKey;
                    loadingDepsState.loadingDepPromise = depLoadable.contents;
                    throw depLoadable.contents;
            }
            throw Recoil_err('Invalid Loadable state');
        }
        const getCallback = (fn)=>{
            return (...args)=>{
                if (duringAsynchronousExecution) {
                    throw Recoil_err('Callbacks from getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can work with Recoil state without a subscription.');
                }
                !(recoilValue != null) ? ("TURBOPACK compile-time truthy", 1) ? Recoil_invariant(false, 'Recoil Value can never be null') : ("TURBOPACK unreachable", undefined) : void 0;
                return recoilCallback$1(store, fn, args, {
                    node: recoilValue
                } // flowlint-line unclear-type:off
                );
            };
        };
        try {
            result = get({
                get: getRecoilValue,
                getCallback
            });
            result = isRecoilValue$3(result) ? getRecoilValue(result) : result;
            if (isLoadable$1(result)) {
                if (result.state === 'hasError') {
                    resultIsError = true;
                }
                result = result.contents;
            }
            if (Recoil_isPromise(result)) {
                result = wrapResultPromise(store, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);
            } else {
                finishEvaluation();
            }
            result = result instanceof WrappedValue$1 ? result.value : result;
        } catch (errorOrDepPromise) {
            result = errorOrDepPromise;
            if (Recoil_isPromise(result)) {
                result = wrapPendingDependencyPromise(store, result, state, depValues, executionID, loadingDepsState).finally(finishEvaluation);
            } else {
                resultIsError = true;
                finishEvaluation();
            }
        }
        if (resultIsError) {
            loadable = loadableWithError$1(result);
        } else if (Recoil_isPromise(result)) {
            loadable = loadableWithPromise$1(result);
        } else {
            loadable = loadableWithValue$2(result);
        }
        duringSynchronousExecution = false;
        updateExecutionInfoDepValues(store, executionID, depValues);
        updateDeps(store, state, new Set(depValues.keys()), executionID);
        return [
            loadable,
            depValues
        ];
    }
    function getLoadableFromCacheAndUpdateDeps(store, state) {
        // First, look up in the state cache
        // If it's here, then the deps in the store should already be valid.
        let cachedLoadable = state.atomValues.get(key);
        if (cachedLoadable != null) {
            return cachedLoadable;
        } // Second, look up in the selector cache and update the deps in the store
        const depsAfterCacheLookup = new Set();
        try {
            cachedLoadable = cache.get((nodeKey)=>{
                !(typeof nodeKey === 'string') ? ("TURBOPACK compile-time truthy", 1) ? Recoil_invariant(false, 'Cache nodeKey is type string') : ("TURBOPACK unreachable", undefined) : void 0;
                return getNodeLoadable$2(store, state, nodeKey).contents;
            }, {
                onNodeVisit: (node)=>{
                    if (node.type === 'branch' && node.nodeKey !== key) {
                        depsAfterCacheLookup.add(node.nodeKey);
                    }
                }
            });
        } catch (error) {
            throw Recoil_err(`Problem with cache lookup for selector "${key}": ${error.message}`);
        }
        if (cachedLoadable) {
            var _getExecutionInfo;
            // Cache the results in the state to allow for cheaper lookup than
            // iterating the tree cache of dependencies.
            state.atomValues.set(key, cachedLoadable);
            /**
       * Ensure store contains correct dependencies if we hit the cache so that
       * the store deps and cache are in sync for a given state. This is important
       * because store deps are normally updated when new executions are created,
       * but cache hits don't trigger new executions but they still _may_ signify
       * a change in deps in the store if the store deps for this state are empty
       * or stale.
       */ updateDeps(store, state, depsAfterCacheLookup, (_getExecutionInfo = getExecutionInfo(store)) === null || _getExecutionInfo === void 0 ? void 0 : _getExecutionInfo.executionID);
        }
        return cachedLoadable;
    }
    /**
   * Given a tree state, this function returns a Loadable of the current state.
   *
   * The selector's get() function will only be re-evaluated if _both_ of the
   * following statements are true:
   *
   * 1. The current dep values from the given state produced a cache key that
   *    was not found in the cache.
   * 2. There is no currently running async execution OR there is an
   *    async execution that is running, but after comparing the dep values in
   *    the given state with the dep values that the execution has discovered so
   *    far we find that at least one dep value has changed, in which case we
   *    start a new execution (the previously running execution will continue to
   *    run to completion, but only the new execution will be deemed the
   *    'latest' execution, meaning it will be the only execution that will
   *    update global state when it is finished. Any non-latest executions will
   *    run to completion and update the selector cache but not global state).
   */ function getSelectorLoadableAndUpdateDeps(store, state) {
        // First, see if our current state is cached
        const cachedVal = getLoadableFromCacheAndUpdateDeps(store, state);
        if (cachedVal != null) {
            clearExecutionInfo(store);
            return cachedVal;
        } // Second, check if there is already an ongoing execution based on the current state
        const inProgressExecutionInfo = getInProgressExecutionInfo(store, state);
        if (inProgressExecutionInfo != null) {
            var _inProgressExecutionI;
            if (((_inProgressExecutionI = inProgressExecutionInfo.loadingLoadable) === null || _inProgressExecutionI === void 0 ? void 0 : _inProgressExecutionI.state) === 'loading') {
                markStoreWaitingForResolvedAsync(store, inProgressExecutionInfo.executionID);
            } // FIXME: check after the fact to see if we made the right choice by waiting
            return inProgressExecutionInfo.loadingLoadable;
        } // Third, start a new evaluation of the selector
        const newExecutionID = getNewExecutionID();
        const [loadable, newDepValues] = evaluateSelectorGetter(store, state, newExecutionID);
        /**
     * Conditionally updates the cache with a given loadable.
     *
     * We only cache loadables that are not loading because our cache keys are
     * based on dep values, which are in an unfinished state for loadables that
     * have a 'loading' state (new deps may be discovered while the selector
     * runs its async code). We never want to cache partial dependencies b/c it
     * could lead to errors, such as prematurely returning the result based on a
     * partial list of deps-- we need the full list of deps to ensure that we
     * are returning the correct result from cache.
     */ if (loadable.state === 'loading') {
            setExecutionInfo(store, newExecutionID, loadable, newDepValues, state);
            markStoreWaitingForResolvedAsync(store, newExecutionID);
        } else {
            clearExecutionInfo(store);
            setCache(state, loadable, newDepValues);
        }
        return loadable;
    }
    /**
   * Searches execution info across all stores to see if there is an in-progress
   * execution whose dependency values match the values of the requesting store.
   */ function getInProgressExecutionInfo(store, state) {
        // Sort the pending executions so that our current store is checked first.
        const pendingExecutions = Recoil_concatIterables([
            executionInfoMap.has(store) ? [
                Recoil_nullthrows(executionInfoMap.get(store))
            ] : [],
            Recoil_mapIterable(Recoil_filterIterable(executionInfoMap, ([s])=>s !== store), ([, execInfo])=>execInfo)
        ]);
        function anyDepChanged(execDepValues) {
            for (const [depKey, execLoadable] of execDepValues){
                if (!getNodeLoadable$2(store, state, depKey).is(execLoadable)) {
                    return true;
                }
            }
            return false;
        }
        for (const execInfo of pendingExecutions){
            if (// of state, then let's use it!
            execInfo.stateVersions.get(state.version) || // If the deps for the execution match our current state, then it's valid
            !anyDepChanged(execInfo.depValuesDiscoveredSoFarDuringAsyncWork)) {
                execInfo.stateVersions.set(state.version, true);
                return execInfo;
            } else {
                execInfo.stateVersions.set(state.version, false);
            }
        }
        return undefined;
    }
    function getExecutionInfo(store) {
        return executionInfoMap.get(store);
    }
    /**
   * This function will update the selector's execution info when the selector
   * has either finished running an execution or has started a new execution. If
   * the given loadable is in a 'loading' state, the intention is that a new
   * execution has started. Otherwise, the intention is that an execution has
   * just finished.
   */ function setExecutionInfo(store, newExecutionID, loadable, depValues, state) {
        executionInfoMap.set(store, {
            depValuesDiscoveredSoFarDuringAsyncWork: depValues,
            executionID: newExecutionID,
            loadingLoadable: loadable,
            stateVersions: new Map([
                [
                    state.version,
                    true
                ]
            ])
        });
    }
    function updateExecutionInfoDepValues(store, executionID, depValues) {
        // We only need to bother updating the deps for the latest execution because
        // that's all getInProgressExecutionInfo() will be looking for.
        if (isLatestExecution(store, executionID)) {
            const executionInfo = getExecutionInfo(store);
            if (executionInfo != null) {
                executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
            }
        }
    }
    function clearExecutionInfo(store) {
        executionInfoMap.delete(store);
    }
    function isLatestExecution(store, executionID) {
        var _getExecutionInfo2;
        return executionID === ((_getExecutionInfo2 = getExecutionInfo(store)) === null || _getExecutionInfo2 === void 0 ? void 0 : _getExecutionInfo2.executionID);
    }
    /**
   * FIXME: dep keys should take into account the state of the loadable to
   * prevent the edge case where a loadable with an error and a loadable with
   * an error as a value are treated as the same thing incorrectly. For example
   * these two should be treated differently:
   *
   * selector({key: '', get: () => new Error('hi')});
   * selector({key: '', get () => {throw new Error('hi')}});
   *
   * With current implementation they are treated the same
   */ function depValuesToDepRoute(depValues) {
        return Array.from(depValues.entries()).map(([depKey, valLoadable])=>[
                depKey,
                valLoadable.contents
            ]);
    }
    function setCache(state, loadable, depValues) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (loadable.state !== 'loading' && Boolean(options.dangerouslyAllowMutability) === false) {
                Recoil_deepFreezeValue(loadable.contents);
            }
        }
        state.atomValues.set(key, loadable);
        try {
            cache.set(depValuesToDepRoute(depValues), loadable);
        } catch (error) {
            throw Recoil_err(`Problem with setting cache for selector "${key}": ${error.message}`);
        }
    }
    function detectCircularDependencies(fn) {
        if (dependencyStack.includes(key)) {
            const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(' \u2192 ')}`;
            return loadableWithError$1(Recoil_err(message));
        }
        dependencyStack.push(key);
        try {
            return fn();
        } finally{
            dependencyStack.pop();
        }
    }
    function selectorPeek(store, state) {
        const cachedLoadable = state.atomValues.get(key);
        if (cachedLoadable != null) {
            return cachedLoadable;
        }
        return cache.get((nodeKey)=>{
            var _peekNodeLoadable;
            !(typeof nodeKey === 'string') ? ("TURBOPACK compile-time truthy", 1) ? Recoil_invariant(false, 'Cache nodeKey is type string') : ("TURBOPACK unreachable", undefined) : void 0;
            return (_peekNodeLoadable = peekNodeLoadable$1(store, state, nodeKey)) === null || _peekNodeLoadable === void 0 ? void 0 : _peekNodeLoadable.contents;
        });
    }
    function selectorGet(store, state) {
        return detectCircularDependencies(()=>getSelectorLoadableAndUpdateDeps(store, state));
    }
    function invalidateSelector(state) {
        state.atomValues.delete(key);
    }
    function clearSelectorCache(store, treeState) {
        !(recoilValue != null) ? ("TURBOPACK compile-time truthy", 1) ? Recoil_invariant(false, 'Recoil Value can never be null') : ("TURBOPACK unreachable", undefined) : void 0;
        for (const nodeKey of discoveredDependencyNodeKeys){
            var _node$clearCache;
            const node = getNode$6(nodeKey);
            (_node$clearCache = node.clearCache) === null || _node$clearCache === void 0 ? void 0 : _node$clearCache.call(node, store, treeState);
        }
        discoveredDependencyNodeKeys.clear();
        invalidateSelector(treeState);
        cache.clear();
        markRecoilValueModified$1(store, recoilValue);
    }
    if (set != null) {
        /**
     * ES5 strict mode prohibits defining non-top-level function declarations,
     * so don't use function declaration syntax here
     */ const selectorSet = (store, state, newValue)=>{
            let syncSelectorSetFinished = false;
            const writes = new Map();
            function getRecoilValue({ key: depKey }) {
                if (syncSelectorSetFinished) {
                    throw Recoil_err('Recoil: Async selector sets are not currently supported.');
                }
                const loadable = getNodeLoadable$2(store, state, depKey);
                if (loadable.state === 'hasValue') {
                    return loadable.contents;
                } else if (loadable.state === 'loading') {
                    const msg = `Getting value of asynchronous atom or selector "${depKey}" in a pending state while setting selector "${key}" is not yet supported.`;
                    Recoil_recoverableViolation(msg);
                    throw Recoil_err(msg);
                } else {
                    throw loadable.contents;
                }
            }
            function setRecoilState(recoilState, valueOrUpdater // $FlowFixMe[missing-local-annot]
            ) {
                if (syncSelectorSetFinished) {
                    const msg = 'Recoil: Async selector sets are not currently supported.';
                    Recoil_recoverableViolation(msg);
                    throw Recoil_err(msg);
                }
                const setValue = typeof valueOrUpdater === 'function' ? // flowlint-next-line unclear-type:off
                valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;
                const upstreamWrites = setNodeValue$3(store, state, recoilState.key, setValue);
                upstreamWrites.forEach((v, k)=>writes.set(k, v));
            }
            function resetRecoilState(recoilState) {
                setRecoilState(recoilState, DEFAULT_VALUE$6);
            }
            const ret = set({
                set: setRecoilState,
                get: getRecoilValue,
                reset: resetRecoilState
            }, newValue); // set should be a void method, but if the user makes it `async`, then it
            // will return a Promise, which we don't currently support.
            if (ret !== undefined) {
                throw Recoil_isPromise(ret) ? Recoil_err('Recoil: Async selector sets are not currently supported.') : Recoil_err('Recoil: selector set should be a void function.');
            }
            syncSelectorSetFinished = true;
            return writes;
        };
        return recoilValue = registerNode$1({
            key,
            nodeType: 'selector',
            peek: selectorPeek,
            get: selectorGet,
            set: selectorSet,
            init: selectorInit,
            invalidate: invalidateSelector,
            clearCache: clearSelectorCache,
            shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
            dangerouslyAllowMutability: options.dangerouslyAllowMutability,
            shouldRestoreFromSnapshots: false,
            retainedBy
        });
    } else {
        return recoilValue = registerNode$1({
            key,
            nodeType: 'selector',
            peek: selectorPeek,
            get: selectorGet,
            init: selectorInit,
            invalidate: invalidateSelector,
            clearCache: clearSelectorCache,
            shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
            dangerouslyAllowMutability: options.dangerouslyAllowMutability,
            shouldRestoreFromSnapshots: false,
            retainedBy
        });
    }
}
/* eslint-enable no-redeclare */ // $FlowIssue[incompatible-use]
// $FlowFixMe[missing-local-annot]
selector.value = (value)=>new WrappedValue$1(value);
var Recoil_selector = selector;
// @fb-only: import type {ScopeRules} from 'Recoil_ScopedAtom';
// @fb-only: const {scopedAtom} = require('Recoil_ScopedAtom');
const { isLoadable: isLoadable$2, loadableWithError: loadableWithError$2, loadableWithPromise: loadableWithPromise$2, loadableWithValue: loadableWithValue$3 } = Recoil_Loadable$1;
const { WrappedValue: WrappedValue$2 } = Recoil_Wrapper$1;
const { peekNodeInfo: peekNodeInfo$3 } = Recoil_FunctionalCore;
const { DEFAULT_VALUE: DEFAULT_VALUE$7, DefaultValue: DefaultValue$2, getConfigDeletionHandler: getConfigDeletionHandler$2, registerNode: registerNode$2, setConfigDeletionHandler: setConfigDeletionHandler$1 } = Recoil_Node;
const { isRecoilValue: isRecoilValue$4 } = Recoil_RecoilValue$1;
const { getRecoilValueAsLoadable: getRecoilValueAsLoadable$4, markRecoilValueModified: markRecoilValueModified$2, setRecoilValue: setRecoilValue$4, setRecoilValueLoadable: setRecoilValueLoadable$2 } = Recoil_RecoilValueInterface;
const { retainedByOptionWithDefault: retainedByOptionWithDefault$2 } = Recoil_Retention;
const unwrap = (x)=>x instanceof WrappedValue$2 ? x.value : x;
function baseAtom(options) {
    const { key, persistence_UNSTABLE: persistence } = options;
    const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);
    let liveStoresCount = 0;
    function unwrapPromise(promise) {
        return loadableWithPromise$2(promise.then((value)=>{
            defaultLoadable = loadableWithValue$3(value);
            return value;
        }).catch((error)=>{
            defaultLoadable = loadableWithError$2(error);
            throw error;
        }));
    }
    let defaultLoadable = Recoil_isPromise(options.default) ? unwrapPromise(options.default) : isLoadable$2(options.default) ? options.default.state === 'loading' ? unwrapPromise(options.default.contents) : options.default : loadableWithValue$3(unwrap(options.default));
    maybeFreezeValueOrPromise(defaultLoadable.contents);
    let cachedAnswerForUnvalidatedValue = undefined; // Cleanup handlers for this atom
    // Rely on stable reference equality of the store to use it as a key per <RecoilRoot>
    const cleanupEffectsByStore = new Map();
    function maybeFreezeValueOrPromise(valueOrPromise) {
        if ("TURBOPACK compile-time truthy", 1) {
            if (options.dangerouslyAllowMutability !== true) {
                if (Recoil_isPromise(valueOrPromise)) {
                    return valueOrPromise.then((value)=>{
                        Recoil_deepFreezeValue(value);
                        return value;
                    });
                } else {
                    Recoil_deepFreezeValue(valueOrPromise);
                    return valueOrPromise;
                }
            }
        }
        return valueOrPromise;
    }
    function wrapPendingPromise(store, promise) {
        const wrappedPromise = promise.then((value)=>{
            var _store$getState$nextT, _state$atomValues$get;
            const state = (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree;
            if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {
                setRecoilValue$4(store, node, value);
            }
            return value;
        }).catch((error)=>{
            var _store$getState$nextT2, _state$atomValues$get2;
            const state = (_store$getState$nextT2 = store.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store.getState().currentTree;
            if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {
                setRecoilValueLoadable$2(store, node, loadableWithError$2(error));
            }
            throw error;
        });
        return wrappedPromise;
    }
    function initAtom(store, initState, trigger) {
        var _options$effects;
        liveStoresCount++;
        const cleanupAtom = ()=>{
            var _cleanupEffectsByStor;
            liveStoresCount--;
            (_cleanupEffectsByStor = cleanupEffectsByStore.get(store)) === null || _cleanupEffectsByStor === void 0 ? void 0 : _cleanupEffectsByStor.forEach((cleanup)=>cleanup());
            cleanupEffectsByStore.delete(store);
        };
        store.getState().knownAtoms.add(key); // Setup async defaults to notify subscribers when they resolve
        if (defaultLoadable.state === 'loading') {
            const notifyDefaultSubscribers = ()=>{
                var _store$getState$nextT3;
                const state = (_store$getState$nextT3 = store.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store.getState().currentTree;
                if (!state.atomValues.has(key)) {
                    markRecoilValueModified$2(store, node);
                }
            };
            defaultLoadable.contents.finally(notifyDefaultSubscribers);
        } ///////////////////
        // Run Atom Effects
        ///////////////////
        const effects = (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE;
        if (effects != null) {
            // This state is scoped by Store, since this is in the initAtom() closure
            let initValue = DEFAULT_VALUE$7;
            let isDuringInit = true;
            let isInitError = false;
            let pendingSetSelf = null;
            function getLoadable(recoilValue) {
                // Normally we can just get the current value of another atom.
                // But for our own value we need to check if there is a pending
                // initialized value or get the fallback default value.
                if (isDuringInit && recoilValue.key === key) {
                    // Cast T to S
                    const retValue = initValue; // flowlint-line unclear-type:off
                    return retValue instanceof DefaultValue$2 ? peekAtom(store, initState) // flowlint-line unclear-type:off
                     : Recoil_isPromise(retValue) ? loadableWithPromise$2(retValue.then((v)=>v instanceof DefaultValue$2 ? defaultLoadable.toPromise() // flowlint-line unclear-type:off
                         : v)) : loadableWithValue$3(retValue);
                }
                return getRecoilValueAsLoadable$4(store, recoilValue);
            }
            function getPromise(recoilValue) {
                return getLoadable(recoilValue).toPromise();
            }
            function getInfo_UNSTABLE(recoilValue) {
                var _store$getState$nextT4;
                const info = peekNodeInfo$3(store, (_store$getState$nextT4 = store.getState().nextTree) !== null && _store$getState$nextT4 !== void 0 ? _store$getState$nextT4 : store.getState().currentTree, recoilValue.key);
                return isDuringInit && recoilValue.key === key && !(initValue instanceof DefaultValue$2) ? {
                    ...info,
                    isSet: true,
                    loadable: getLoadable(recoilValue)
                } : info;
            }
            const setSelf = (effect)=>(valueOrUpdater)=>{
                    if (isDuringInit) {
                        const currentLoadable = getLoadable(node);
                        const currentValue = currentLoadable.state === 'hasValue' ? currentLoadable.contents : DEFAULT_VALUE$7;
                        initValue = typeof valueOrUpdater === 'function' ? valueOrUpdater(currentValue) // flowlint-line unclear-type:off
                         : valueOrUpdater;
                        if (Recoil_isPromise(initValue)) {
                            initValue = initValue.then((value)=>{
                                // Avoid calling onSet() when setSelf() initializes with a Promise
                                pendingSetSelf = {
                                    effect,
                                    value
                                };
                                return value;
                            });
                        }
                    } else {
                        if (Recoil_isPromise(valueOrUpdater)) {
                            throw Recoil_err('Setting atoms to async values is not implemented.');
                        }
                        if (typeof valueOrUpdater !== 'function') {
                            pendingSetSelf = {
                                effect,
                                value: unwrap(valueOrUpdater)
                            };
                        }
                        setRecoilValue$4(store, node, typeof valueOrUpdater === 'function' ? (currentValue)=>{
                            const newValue = unwrap(valueOrUpdater(currentValue) // flowlint-line unclear-type:off
                            ); // $FlowFixMe[incompatible-type]
                            pendingSetSelf = {
                                effect,
                                value: newValue
                            };
                            return newValue;
                        } : unwrap(valueOrUpdater));
                    }
                };
            const resetSelf = (effect)=>()=>setSelf(effect)(DEFAULT_VALUE$7);
            const onSet = (effect)=>(handler)=>{
                    var _cleanupEffectsByStor2;
                    const { release } = store.subscribeToTransactions((currentStore)=>{
                        var _currentTree$atomValu;
                        // eslint-disable-next-line prefer-const
                        let { currentTree, previousTree } = currentStore.getState();
                        if (!previousTree) {
                            Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');
                            previousTree = currentTree; // attempt to trundle on
                        }
                        const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;
                        if (newLoadable.state === 'hasValue') {
                            var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;
                            const newValue = newLoadable.contents;
                            const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;
                            const oldValue = oldLoadable.state === 'hasValue' ? oldLoadable.contents : DEFAULT_VALUE$7; // TODO This isn't actually valid, use as a placeholder for now.
                            // Ignore atom value changes that were set via setSelf() in the same effect.
                            // We will still properly call the handler if there was a subsequent
                            // set from something other than an atom effect which was batched
                            // with the `setSelf()` call.  However, we may incorrectly ignore
                            // the handler if the subsequent batched call happens to set the
                            // atom to the exact same value as the `setSelf()`.   But, in that
                            // case, it was kind of a noop, so the semantics are debatable..
                            if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {
                                handler(newValue, oldValue, !currentTree.atomValues.has(key));
                            } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {
                                pendingSetSelf = null;
                            }
                        }
                    }, key);
                    cleanupEffectsByStore.set(store, [
                        ...(_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor2 !== void 0 ? _cleanupEffectsByStor2 : [],
                        release
                    ]);
                };
            for (const effect of effects){
                try {
                    const cleanup = effect({
                        node,
                        storeID: store.storeID,
                        parentStoreID_UNSTABLE: store.parentStoreID,
                        trigger,
                        setSelf: setSelf(effect),
                        resetSelf: resetSelf(effect),
                        onSet: onSet(effect),
                        getPromise,
                        getLoadable,
                        getInfo_UNSTABLE
                    });
                    if (cleanup != null) {
                        var _cleanupEffectsByStor3;
                        cleanupEffectsByStore.set(store, [
                            ...(_cleanupEffectsByStor3 = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor3 !== void 0 ? _cleanupEffectsByStor3 : [],
                            cleanup
                        ]);
                    }
                } catch (error) {
                    initValue = error;
                    isInitError = true;
                }
            }
            isDuringInit = false; // Mutate initial state in place since we know there are no other subscribers
            // since we are the ones initializing on first use.
            if (!(initValue instanceof DefaultValue$2)) {
                var _store$getState$nextT5;
                const initLoadable = isInitError ? loadableWithError$2(initValue) : Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store, initValue)) : loadableWithValue$3(unwrap(initValue));
                maybeFreezeValueOrPromise(initLoadable.contents);
                initState.atomValues.set(key, initLoadable); // If there is a pending transaction, then also mutate the next state tree.
                // This could happen if the atom was first initialized in an action that
                // also updated some other atom's state.
                (_store$getState$nextT5 = store.getState().nextTree) === null || _store$getState$nextT5 === void 0 ? void 0 : _store$getState$nextT5.atomValues.set(key, initLoadable);
            }
        }
        return cleanupAtom;
    }
    function peekAtom(_store, state) {
        var _ref, _state$atomValues$get3;
        return (_ref = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : cachedAnswerForUnvalidatedValue) !== null && _ref !== void 0 ? _ref : defaultLoadable;
    }
    function getAtom(_store, state) {
        if (state.atomValues.has(key)) {
            // Atom value is stored in state:
            return Recoil_nullthrows(state.atomValues.get(key));
        } else if (state.nonvalidatedAtoms.has(key)) {
            // Atom value is stored but needs validation before use.
            // We might have already validated it and have a cached validated value:
            if (cachedAnswerForUnvalidatedValue != null) {
                return cachedAnswerForUnvalidatedValue;
            }
            if (persistence == null) {
                Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);
                return defaultLoadable;
            }
            const nonvalidatedValue = state.nonvalidatedAtoms.get(key);
            const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$7);
            const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);
            cachedAnswerForUnvalidatedValue = validatedValueLoadable;
            return cachedAnswerForUnvalidatedValue;
        } else {
            return defaultLoadable;
        }
    }
    function invalidateAtom() {
        cachedAnswerForUnvalidatedValue = undefined;
    }
    function setAtom(_store, state, newValue) {
        // Bail out if we're being set to the existing value, or if we're being
        // reset but have no stored value (validated or unvalidated) to reset from:
        if (state.atomValues.has(key)) {
            const existing = Recoil_nullthrows(state.atomValues.get(key));
            if (existing.state === 'hasValue' && newValue === existing.contents) {
                return new Map();
            }
        } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {
            return new Map();
        }
        maybeFreezeValueOrPromise(newValue);
        cachedAnswerForUnvalidatedValue = undefined; // can be released now if it was previously in use
        return new Map().set(key, loadableWithValue$3(newValue));
    }
    function shouldDeleteConfigOnReleaseAtom() {
        return getConfigDeletionHandler$2(key) !== undefined && liveStoresCount <= 0;
    }
    const node = registerNode$2({
        key,
        nodeType: 'atom',
        peek: peekAtom,
        get: getAtom,
        set: setAtom,
        init: initAtom,
        invalidate: invalidateAtom,
        shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,
        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
        persistence_UNSTABLE: options.persistence_UNSTABLE ? {
            type: options.persistence_UNSTABLE.type,
            backButton: options.persistence_UNSTABLE.backButton
        } : undefined,
        shouldRestoreFromSnapshots: true,
        retainedBy
    });
    return node;
} // prettier-ignore
function atom(options) {
    if ("TURBOPACK compile-time truthy", 1) {
        if (typeof options.key !== 'string') {
            throw Recoil_err('A key option with a unique string value must be provided when creating an atom.');
        }
    }
    const { ...restOptions } = options;
    const optionsDefault = 'default' in options ? options.default : new Promise(()=>{});
    if (isRecoilValue$4(optionsDefault) // Continue to use atomWithFallback for promise defaults for scoped atoms
    ) {
        return atomWithFallback({
            ...restOptions,
            default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,
        }); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS
    // @fb-only: && !isPromise(optionsDefault)
    // @fb-only: && !isLoadable(optionsDefault)
    // @fb-only: ) {
    // @fb-only: return scopedAtom<T>({
    // @fb-only: ...restOptions,
    // @fb-only: default: unwrap<T>(optionsDefault),
    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,
    // @fb-only: });
    } else {
        return baseAtom({
            ...restOptions,
            default: optionsDefault
        });
    }
}
function atomWithFallback(options) {
    const base = atom({
        ...options,
        default: DEFAULT_VALUE$7,
        persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : {
            ...options.persistence_UNSTABLE,
            validator: (storedValue)=>storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$7)
        },
        // TODO Hack for now.
        effects: options.effects,
        // flowlint-line unclear-type: off
        effects_UNSTABLE: options.effects_UNSTABLE // flowlint-line unclear-type: off
    }); // $FlowFixMe[incompatible-call]
    const sel = Recoil_selector({
        key: `${options.key}__withFallback`,
        get: ({ get })=>{
            const baseValue = get(base);
            return baseValue instanceof DefaultValue$2 ? options.default : baseValue;
        },
        // $FlowFixMe[incompatible-call]
        set: ({ set }, newValue)=>set(base, newValue),
        // This selector does not need to cache as it is a wrapper selector
        // and the selector within the wrapper selector will have a cache
        // option by default
        cachePolicy_UNSTABLE: {
            eviction: 'most-recent'
        },
        dangerouslyAllowMutability: options.dangerouslyAllowMutability
    });
    setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));
    return sel;
} // $FlowFixMe[missing-local-annot]
atom.value = (value)=>new WrappedValue$2(value);
var Recoil_atom = atom;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @oncall recoil
 */ class MapCache {
    constructor(options){
        var _options$mapKey;
        _defineProperty(this, "_map", void 0);
        _defineProperty(this, "_keyMapper", void 0);
        this._map = new Map();
        this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : (v)=>v;
    }
    size() {
        return this._map.size;
    }
    has(key) {
        return this._map.has(this._keyMapper(key));
    }
    get(key) {
        return this._map.get(this._keyMapper(key));
    }
    set(key, val) {
        this._map.set(this._keyMapper(key), val);
    }
    delete(key) {
        this._map.delete(this._keyMapper(key));
    }
    clear() {
        this._map.clear();
    }
}
var Recoil_MapCache = {
    MapCache
};
var Recoil_MapCache_1 = Recoil_MapCache.MapCache;
var Recoil_MapCache$1 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    MapCache: Recoil_MapCache_1
});
const { LRUCache: LRUCache$2 } = Recoil_LRUCache$1;
const { MapCache: MapCache$1 } = Recoil_MapCache$1;
const defaultPolicy$1 = {
    equality: 'reference',
    eviction: 'none',
    maxSize: Infinity
};
function cacheFromPolicy({ equality = defaultPolicy$1.equality, eviction = defaultPolicy$1.eviction, maxSize = defaultPolicy$1.maxSize } = defaultPolicy$1) {
    const valueMapper = getValueMapper$1(equality);
    const cache = getCache(eviction, maxSize, valueMapper);
    return cache;
}
function getValueMapper$1(equality) {
    switch(equality){
        case 'reference':
            return (val)=>val;
        case 'value':
            return (val)=>Recoil_stableStringify(val);
    }
    throw Recoil_err(`Unrecognized equality policy ${equality}`);
}
function getCache(eviction, maxSize, mapKey) {
    switch(eviction){
        case 'keep-all':
            return new MapCache$1({
                mapKey
            });
        case 'lru':
            return new LRUCache$2({
                mapKey,
                maxSize: Recoil_nullthrows(maxSize)
            });
        case 'most-recent':
            return new LRUCache$2({
                mapKey,
                maxSize: 1
            });
    }
    throw Recoil_err(`Unrecognized eviction policy ${eviction}`);
}
var Recoil_cacheFromPolicy = cacheFromPolicy;
// @fb-only: import type {ScopeRules} from 'Recoil_ScopedAtom';
const { setConfigDeletionHandler: setConfigDeletionHandler$2 } = Recoil_Node;
// Process scopeRules to handle any entries which are functions taking parameters
// prettier-ignore
// @fb-only: function mapScopeRules<P>(
// @fb-only: scopeRules?: ParameterizedScopeRules<P>,
// @fb-only: param: P,
// @fb-only: ): ScopeRules | void {
// @fb-only: return scopeRules?.map(rule =>
// @fb-only: Array.isArray(rule)
// @fb-only: ? rule.map(entry => (typeof entry === 'function' ? entry(param) : entry))
// @fb-only: : rule,
// @fb-only: );
// @fb-only: }
/*
A function which returns an atom based on the input parameter.

Each unique parameter returns a unique atom. E.g.,

  const f = atomFamily(...);
  f({a: 1}) => an atom
  f({a: 2}) => a different atom

This allows components to persist local, private state using atoms.  Each
instance of the component may have a different key, which it uses as the
parameter for a family of atoms; in this way, each component will have
its own atom not shared by other instances.  These state keys may be composed
into children's state keys as well.
*/ function atomFamily(options) {
    var _options$cachePolicyF, _options$cachePolicyF2;
    const atomCache = Recoil_cacheFromPolicy({
        equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',
        eviction: 'keep-all'
    }); // Simple atomFamily implementation to cache individual atoms based
    // on the parameter value equality.
    return (params)=>{
        var _stableStringify, _options$effects;
        const cachedAtom = atomCache.get(params);
        if (cachedAtom != null) {
            return cachedAtom;
        }
        const { cachePolicyForParams_UNSTABLE, ...atomOptions } = options;
        const optionsDefault = 'default' in options ? options.default : new Promise(()=>{});
        const newAtom = Recoil_atom({
            ...atomOptions,
            key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}`,
            default: typeof optionsDefault === 'function' ? // Flow doesn't know that T isn't a function, so we need to case to any
            // $FlowIssue[incompatible-use]
            optionsDefault(params) : optionsDefault,
            retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,
            effects: typeof options.effects === 'function' ? options.effects(params) : typeof options.effects_UNSTABLE === 'function' ? options.effects_UNSTABLE(params) : (_options$effects = options.effects) !== null && _options$effects !== void 0 ? _options$effects : options.effects_UNSTABLE // prettier-ignore
        });
        atomCache.set(params, newAtom);
        setConfigDeletionHandler$2(newAtom.key, ()=>{
            atomCache.delete(params);
        });
        return newAtom;
    };
}
var Recoil_atomFamily = atomFamily;
const { setConfigDeletionHandler: setConfigDeletionHandler$3 } = Recoil_Node;
// Keep in mind the parameter needs to be serializable as a cahche key
// using Recoil_stableStringify
// Add a unique index to each selector in case the cache implementation allows
// duplicate keys based on equivalent stringified parameters
let nextIndex = 0;
/* eslint-disable no-redeclare */ // Return a function that returns members of a family of selectors of the same type
// E.g.,
//
// const s = selectorFamily(...);
// s({a: 1}) => a selector
// s({a: 2}) => a different selector
//
// By default, the selectors are distinguished by distinct values of the
// parameter based on value equality, not reference equality.  This allows using
// object literals or other equivalent objects at callsites to not create
// duplicate cache entries.  This behavior may be overridden with the
// cacheImplementationForParams option.
function selectorFamily(options) {
    var _options$cachePolicyF, _options$cachePolicyF2;
    const selectorCache = Recoil_cacheFromPolicy({
        equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',
        eviction: 'keep-all'
    });
    return (params)=>{
        var _stableStringify;
        // Throw an error with selector key so that it is clear which
        // selector is causing an error
        let cachedSelector;
        try {
            cachedSelector = selectorCache.get(params);
        } catch (error) {
            throw Recoil_err(`Problem with cache lookup for selector ${options.key}: ${error.message}`);
        }
        if (cachedSelector != null) {
            return cachedSelector;
        }
        const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {
            // It is possible to use functions in parameters if the user uses
            // a cache with reference equality thanks to the incrementing index.
            allowFunctions: true
        })) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}/${nextIndex++}`; // Append index in case values serialize to the same key string
        const myGet = (callbacks)=>options.get(params)(callbacks);
        const myCachePolicy = options.cachePolicy_UNSTABLE;
        const retainedBy = typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;
        let newSelector;
        if (options.set != null) {
            const set = options.set;
            const mySet = (callbacks, newValue)=>set(params)(callbacks, newValue);
            newSelector = Recoil_selector({
                key: myKey,
                get: myGet,
                set: mySet,
                cachePolicy_UNSTABLE: myCachePolicy,
                dangerouslyAllowMutability: options.dangerouslyAllowMutability,
                retainedBy_UNSTABLE: retainedBy
            });
        } else {
            newSelector = Recoil_selector({
                key: myKey,
                get: myGet,
                cachePolicy_UNSTABLE: myCachePolicy,
                dangerouslyAllowMutability: options.dangerouslyAllowMutability,
                retainedBy_UNSTABLE: retainedBy
            });
        }
        selectorCache.set(params, newSelector);
        setConfigDeletionHandler$3(newSelector.key, ()=>{
            selectorCache.delete(params);
        });
        return newSelector;
    };
}
/* eslint-enable no-redeclare */ var Recoil_selectorFamily = selectorFamily;
// flowlint-next-line unclear-type:off
const constantSelector = Recoil_selectorFamily({
    key: '__constant',
    get: (constant)=>()=>constant,
    cachePolicyForParams_UNSTABLE: {
        equality: 'reference'
    }
}); // Function that returns a selector which always produces the
// same constant value.  It may be called multiple times with the
// same value, based on reference equality, and will provide the
// same selector.
function constSelector(constant) {
    return constantSelector(constant);
}
var Recoil_constSelector = constSelector;
// flowlint-next-line unclear-type:off
const throwingSelector = Recoil_selectorFamily({
    key: '__error',
    get: (message)=>()=>{
            throw Recoil_err(message);
        },
    // TODO Why?
    cachePolicyForParams_UNSTABLE: {
        equality: 'reference'
    }
}); // Function that returns a selector which always throws an error
// with the provided message.
function errorSelector(message) {
    return throwingSelector(message);
}
var Recoil_errorSelector = errorSelector;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Wraps another recoil value and prevents writing to it.
 *
 * 
 * @format
 * @oncall recoil
 */ function readOnlySelector(atom) {
    // flowlint-next-line unclear-type: off
    return atom;
}
var Recoil_readOnlySelector = readOnlySelector;
const { loadableWithError: loadableWithError$3, loadableWithPromise: loadableWithPromise$3, loadableWithValue: loadableWithValue$4 } = Recoil_Loadable$1;
/////////////////
//  TRUTH TABLE
/////////////////
// Dependencies        waitForNone         waitForAny        waitForAll       waitForAllSettled
//  [loading, loading]  [Promise, Promise]  Promise           Promise         Promise
//  [value, loading]    [value, Promise]    [value, Promise]  Promise         Promise
//  [value, value]      [value, value]      [value, value]    [value, value]  [value, value]
//
//  [error, loading]    [Error, Promise]    [Error, Promise]  Error           Promise
//  [error, error]      [Error, Error]      [Error, Error]    Error           [error, error]
//  [value, error]      [value, Error]      [value, Error]    Error           [value, error]
// Issue parallel requests for all dependencies and return the current
// status if they have results, have some error, or are still pending.
function concurrentRequests(getRecoilValue, deps) {
    const results = Array(deps.length).fill(undefined);
    const exceptions = Array(deps.length).fill(undefined);
    for (const [i, dep] of deps.entries()){
        try {
            results[i] = getRecoilValue(dep);
        } catch (e) {
            // exceptions can either be Promises of pending results or real errors
            exceptions[i] = e;
        }
    }
    return [
        results,
        exceptions
    ];
}
function isError(exp) {
    return exp != null && !Recoil_isPromise(exp);
}
function unwrapDependencies(dependencies) {
    return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map((key)=>dependencies[key]);
}
function wrapResults(dependencies, /* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's
 * LTI update could not be added via codemod */ results) {
    return Array.isArray(dependencies) ? results : Object.getOwnPropertyNames(dependencies).reduce((out, key, idx)=>({
            ...out,
            [key]: results[idx]
        }), {});
}
function wrapLoadables(dependencies, results, exceptions) {
    const output = exceptions.map((exception, idx)=>exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
    return wrapResults(dependencies, output);
}
function combineAsyncResultsWithSyncResults(syncResults, asyncResults) {
    return asyncResults.map((result, idx)=>/**
   * it's important we use === undefined as opposed to == null, because the
   * resolved value of the async promise could be `null`, in which case we
   * don't want to use syncResults[idx], which would be undefined. If async
   * promise resolves to `undefined`, that's ok because `syncResults[idx]`
   * will also be `undefined`. That's a little hacky, but it works.
   */ result === undefined ? syncResults[idx] : result);
} // Selector that requests all dependencies in parallel and immediately returns
// current results without waiting.
const waitForNone = Recoil_selectorFamily({
    key: '__waitForNone',
    get: (dependencies)=>({ get })=>{
            // Issue requests for all dependencies in parallel.
            const deps = unwrapDependencies(dependencies);
            const [results, exceptions] = concurrentRequests(get, deps); // Always return the current status of the results; never block.
            return wrapLoadables(dependencies, results, exceptions);
        },
    dangerouslyAllowMutability: true
}); // Selector that requests all dependencies in parallel and waits for at least
// one to be available before returning results.  It will only error if all
// dependencies have errors.
const waitForAny = Recoil_selectorFamily({
    key: '__waitForAny',
    get: (dependencies)=>({ get })=>{
            // Issue requests for all dependencies in parallel.
            // Exceptions can either be Promises of pending results or real errors
            const deps = unwrapDependencies(dependencies);
            const [results, exceptions] = concurrentRequests(get, deps); // If any results are available, value or error, return the current status
            if (exceptions.some((exp)=>!Recoil_isPromise(exp))) {
                return wrapLoadables(dependencies, results, exceptions);
            } // Otherwise, return a promise that will resolve when the next result is
            // available, whichever one happens to be next.  But, if all pending
            // dependencies end up with errors, then reject the promise.
            return new Promise((resolve)=>{
                for (const [i, exp] of exceptions.entries()){
                    if (Recoil_isPromise(exp)) {
                        exp.then((result)=>{
                            results[i] = result;
                            exceptions[i] = undefined;
                            resolve(wrapLoadables(dependencies, results, exceptions));
                        }).catch((error)=>{
                            exceptions[i] = error;
                            resolve(wrapLoadables(dependencies, results, exceptions));
                        });
                    }
                }
            });
        },
    dangerouslyAllowMutability: true
}); // Selector that requests all dependencies in parallel and waits for all to be
// available before returning a value.  It will error if any dependencies error.
const waitForAll = Recoil_selectorFamily({
    key: '__waitForAll',
    get: (dependencies)=>({ get })=>{
            // Issue requests for all dependencies in parallel.
            // Exceptions can either be Promises of pending results or real errors
            const deps = unwrapDependencies(dependencies);
            const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results
            if (exceptions.every((exp)=>exp == null)) {
                return wrapResults(dependencies, results);
            } // If we have any errors, throw the first error
            const error = exceptions.find(isError);
            if (error != null) {
                throw error;
            } // Otherwise, return a promise that will resolve when all results are available
            return Promise.all(exceptions).then((exceptionResults)=>wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults)));
        },
    dangerouslyAllowMutability: true
});
const waitForAllSettled = Recoil_selectorFamily({
    key: '__waitForAllSettled',
    get: (dependencies)=>({ get })=>{
            // Issue requests for all dependencies in parallel.
            // Exceptions can either be Promises of pending results or real errors
            const deps = unwrapDependencies(dependencies);
            const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results
            if (exceptions.every((exp)=>!Recoil_isPromise(exp))) {
                return wrapLoadables(dependencies, results, exceptions);
            } // Wait for all results to settle
            return Promise.all(exceptions.map((exp, i)=>Recoil_isPromise(exp) ? exp.then((result)=>{
                    results[i] = result;
                    exceptions[i] = undefined;
                }).catch((error)=>{
                    results[i] = undefined;
                    exceptions[i] = error;
                }) : null)) // Then wrap them as loadables
            .then(()=>wrapLoadables(dependencies, results, exceptions));
        },
    dangerouslyAllowMutability: true
});
const noWait = Recoil_selectorFamily({
    key: '__noWait',
    get: (dependency)=>({ get })=>{
            try {
                return Recoil_selector.value(loadableWithValue$4(get(dependency)));
            } catch (exception) {
                return Recoil_selector.value(Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
            }
        },
    dangerouslyAllowMutability: true
});
var Recoil_WaitFor = {
    waitForNone,
    waitForAny,
    waitForAll,
    waitForAllSettled,
    noWait
};
const { RecoilLoadable } = Recoil_Loadable$1;
const { DefaultValue: DefaultValue$3 } = Recoil_Node;
const { RecoilRoot: RecoilRoot$2, useRecoilStoreID: useRecoilStoreID$1 } = Recoil_RecoilRoot;
const { isRecoilValue: isRecoilValue$5 } = Recoil_RecoilValue$1;
const { retentionZone: retentionZone$1 } = Recoil_RetentionZone;
const { freshSnapshot: freshSnapshot$2 } = Recoil_Snapshot$1;
const { useRecoilState: useRecoilState$1, useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1, useRecoilStateLoadable: useRecoilStateLoadable$1, useRecoilValue: useRecoilValue$1, useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1, useRecoilValueLoadable: useRecoilValueLoadable$1, useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1, useResetRecoilState: useResetRecoilState$1, useSetRecoilState: useSetRecoilState$1 } = Recoil_Hooks;
const { useGotoRecoilSnapshot: useGotoRecoilSnapshot$1, useRecoilSnapshot: useRecoilSnapshot$1, useRecoilTransactionObserver: useRecoilTransactionObserver$1 } = Recoil_SnapshotHooks;
const { useRecoilCallback: useRecoilCallback$1 } = Recoil_useRecoilCallback;
const { noWait: noWait$1, waitForAll: waitForAll$1, waitForAllSettled: waitForAllSettled$1, waitForAny: waitForAny$1, waitForNone: waitForNone$1 } = Recoil_WaitFor;
var Recoil_index = {
    // Types
    DefaultValue: DefaultValue$3,
    isRecoilValue: isRecoilValue$5,
    RecoilLoadable,
    // Global Recoil environment settiongs
    RecoilEnv: Recoil_RecoilEnv,
    // Recoil Root
    RecoilRoot: RecoilRoot$2,
    useRecoilStoreID: useRecoilStoreID$1,
    useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,
    // Atoms/Selectors
    atom: Recoil_atom,
    selector: Recoil_selector,
    // Convenience Atoms/Selectors
    atomFamily: Recoil_atomFamily,
    selectorFamily: Recoil_selectorFamily,
    constSelector: Recoil_constSelector,
    errorSelector: Recoil_errorSelector,
    readOnlySelector: Recoil_readOnlySelector,
    // Concurrency Helpers for Atoms/Selectors
    noWait: noWait$1,
    waitForNone: waitForNone$1,
    waitForAny: waitForAny$1,
    waitForAll: waitForAll$1,
    waitForAllSettled: waitForAllSettled$1,
    // Hooks for Atoms/Selectors
    useRecoilValue: useRecoilValue$1,
    useRecoilValueLoadable: useRecoilValueLoadable$1,
    useRecoilState: useRecoilState$1,
    useRecoilStateLoadable: useRecoilStateLoadable$1,
    useSetRecoilState: useSetRecoilState$1,
    useResetRecoilState: useResetRecoilState$1,
    useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,
    useRecoilRefresher_UNSTABLE: Recoil_useRecoilRefresher,
    useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE: useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilValue_TRANSITION_SUPPORT_UNSTABLE: useRecoilValue_TRANSITION_SUPPORT_UNSTABLE$1,
    useRecoilState_TRANSITION_SUPPORT_UNSTABLE: useRecoilState_TRANSITION_SUPPORT_UNSTABLE$1,
    // Hooks for complex operations
    useRecoilCallback: useRecoilCallback$1,
    useRecoilTransaction_UNSTABLE: Recoil_useRecoilTransaction,
    // Snapshots
    useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
    useRecoilSnapshot: useRecoilSnapshot$1,
    useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,
    snapshot_UNSTABLE: freshSnapshot$2,
    // Memory Management
    useRetain: Recoil_useRetain,
    retentionZone: retentionZone$1
};
var Recoil_index_1 = Recoil_index.DefaultValue;
var Recoil_index_2 = Recoil_index.isRecoilValue;
var Recoil_index_3 = Recoil_index.RecoilLoadable;
var Recoil_index_4 = Recoil_index.RecoilEnv;
var Recoil_index_5 = Recoil_index.RecoilRoot;
var Recoil_index_6 = Recoil_index.useRecoilStoreID;
var Recoil_index_7 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;
var Recoil_index_8 = Recoil_index.atom;
var Recoil_index_9 = Recoil_index.selector;
var Recoil_index_10 = Recoil_index.atomFamily;
var Recoil_index_11 = Recoil_index.selectorFamily;
var Recoil_index_12 = Recoil_index.constSelector;
var Recoil_index_13 = Recoil_index.errorSelector;
var Recoil_index_14 = Recoil_index.readOnlySelector;
var Recoil_index_15 = Recoil_index.noWait;
var Recoil_index_16 = Recoil_index.waitForNone;
var Recoil_index_17 = Recoil_index.waitForAny;
var Recoil_index_18 = Recoil_index.waitForAll;
var Recoil_index_19 = Recoil_index.waitForAllSettled;
var Recoil_index_20 = Recoil_index.useRecoilValue;
var Recoil_index_21 = Recoil_index.useRecoilValueLoadable;
var Recoil_index_22 = Recoil_index.useRecoilState;
var Recoil_index_23 = Recoil_index.useRecoilStateLoadable;
var Recoil_index_24 = Recoil_index.useSetRecoilState;
var Recoil_index_25 = Recoil_index.useResetRecoilState;
var Recoil_index_26 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;
var Recoil_index_27 = Recoil_index.useRecoilRefresher_UNSTABLE;
var Recoil_index_28 = Recoil_index.useRecoilValueLoadable_TRANSITION_SUPPORT_UNSTABLE;
var Recoil_index_29 = Recoil_index.useRecoilValue_TRANSITION_SUPPORT_UNSTABLE;
var Recoil_index_30 = Recoil_index.useRecoilState_TRANSITION_SUPPORT_UNSTABLE;
var Recoil_index_31 = Recoil_index.useRecoilCallback;
var Recoil_index_32 = Recoil_index.useRecoilTransaction_UNSTABLE;
var Recoil_index_33 = Recoil_index.useGotoRecoilSnapshot;
var Recoil_index_34 = Recoil_index.useRecoilSnapshot;
var Recoil_index_35 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;
var Recoil_index_36 = Recoil_index.snapshot_UNSTABLE;
var Recoil_index_37 = Recoil_index.useRetain;
var Recoil_index_38 = Recoil_index.retentionZone;
const __TURBOPACK__default__export__ = Recoil_index;
;
}}),
}]);

//# sourceMappingURL=node_modules__pnpm_1b7efb3c._.js.map